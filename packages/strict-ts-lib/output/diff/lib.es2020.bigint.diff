@@ -1,43 +1,29 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2020.intl" />
+/// <reference path="./lib.es2020.intl.d.ts" />
 
 interface BigIntToLocaleStringOptions {
   /** The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}. */
-  localeMatcher?: string;
+  readonly localeMatcher?: string;
   /** The formatting style to use , the default is "decimal". */
-  style?: string;
+  readonly style?: string;
 
-  numberingSystem?: string;
+  readonly numberingSystem?: string;
   /**
    * The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is
    * "unit", the unit property must be provided.
    */
-  unit?: string;
+  readonly unit?: string;
 
   /** The unit formatting style to use in unit formatting, the defaults is "short". */
-  unitDisplay?: string;
+  readonly unitDisplay?: string;
 
   /**
    * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB â€” see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided.
    * It is only used when [[Style]] has the value "currency".
    */
-  currency?: string;
+  readonly currency?: string;
 
   /**
    * How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".
@@ -48,136 +34,31 @@ interface BigIntToLocaleStringOptions {
    *
    * "name" to use a localized currency name such as "dollar"
    */
-  currencyDisplay?: string;
+  readonly currencyDisplay?: string;
 
   /** Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true. */
-  useGrouping?: boolean;
+  readonly useGrouping?: boolean;
 
   /** The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1. */
-  minimumIntegerDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumIntegerDigits?: UintRange<1, 22>;
 
   /**
    * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the
    * {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information).
    */
-  minimumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly minimumFractionDigits?: UintRange<0, 21>;
 
   /**
    * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the
    * {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.
    */
-  maximumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly maximumFractionDigits?: UintRange<0, 21>;
 
   /** The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1. */
-  minimumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumSignificantDigits?: UintRange<1, 22>;
 
   /** The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21. */
-  maximumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly maximumSignificantDigits?: UintRange<1, 22>;
 
   /**
    * The formatting that should be displayed for the number, the defaults is "standard"
@@ -190,10 +71,10 @@ interface BigIntToLocaleStringOptions {
    *
    *     "compact" string representing exponent, defaults is using the "short" form
    */
-  notation?: string;
+  readonly notation?: string;
 
   /** Used only when notation is "compact" */
-  compactDisplay?: string;
+  readonly compactDisplay?: string;
 }
 
 interface BigInt {
@@ -202,7 +83,7 @@ interface BigInt {
    *
    * @param radix Specifies a radix for converting numeric values to strings.
    */
-  toString(radix?: number): string;
+  toString(radix?: UintRange<2, 37>): string;
 
   /** Returns a string representation appropriate to the host environment's current locale. */
   toLocaleString(
@@ -226,24 +107,24 @@ interface BigIntConstructor {
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asIntN(bits: number, int: bigint): bigint;
+  asIntN(bits: UintRange<0, 65>, int: bigint): bigint;
   /**
    * Interprets the low bits of a BigInt as an unsigned integer. All higher bits are discarded.
    *
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asUintN(bits: number, int: bigint): bigint;
+  asUintN(bits: UintRange<0, 65>, int: bigint): bigint;
 }
 
-declare var BigInt: BigIntConstructor;
+declare const BigInt: BigIntConstructor;
 
 /** A typed array of 64-bit signed integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated, an exception is raised. */
 interface BigInt64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
@@ -264,7 +145,7 @@ interface BigInt64Array<
   copyWithin(target: number, start: number, end?: number): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [number, bigint]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -278,7 +159,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -301,8 +182,8 @@ interface BigInt64Array<
       value: bigint,
       index: number,
       array: BigInt64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -317,7 +198,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -332,7 +213,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -347,7 +228,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -399,7 +280,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -495,7 +376,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -515,7 +396,7 @@ interface BigInt64Array<
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -546,14 +427,14 @@ interface BigInt64ArrayConstructor {
   new (array: ArrayLike<bigint> | ArrayBuffer): BigInt64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigInt64Array<ArrayBuffer>;
+  of(...items: readonly bigint[]): BigInt64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -573,17 +454,17 @@ interface BigInt64ArrayConstructor {
   from<U>(
     arrayLike: ArrayLike<U>,
     mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 }
-declare var BigInt64Array: BigInt64ArrayConstructor;
+declare const BigInt64Array: BigInt64ArrayConstructor;
 
 /** A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated, an exception is raised. */
 interface BigUint64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
@@ -604,7 +485,7 @@ interface BigUint64Array<
   copyWithin(target: number, start: number, end?: number): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [number, bigint]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -618,7 +499,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -641,8 +522,8 @@ interface BigUint64Array<
       value: bigint,
       index: number,
       array: BigUint64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -657,7 +538,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -672,7 +553,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -687,7 +568,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -739,7 +620,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -835,7 +716,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -855,7 +736,7 @@ interface BigUint64Array<
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -888,14 +769,14 @@ interface BigUint64ArrayConstructor {
   new (array: ArrayLike<bigint> | ArrayBuffer): BigUint64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigUint64Array<ArrayBuffer>;
+  of(...items: readonly bigint[]): BigUint64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -908,10 +789,10 @@ interface BigUint64ArrayConstructor {
   from<U>(
     arrayLike: ArrayLike<U>,
     mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigUint64Array;
 }
-declare var BigUint64Array: BigUint64ArrayConstructor;
+declare const BigUint64Array: BigUint64ArrayConstructor;
 
 interface DataView<TArrayBuffer extends ArrayBufferLike> {
   /**
