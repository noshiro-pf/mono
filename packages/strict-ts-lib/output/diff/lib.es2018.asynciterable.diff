@@ -1,22 +1,8 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
-/// <reference lib="es2015.iterable" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
+/// <reference path="./lib.es2015.iterable.d.ts" />
 
 interface SymbolConstructor {
   /**
@@ -28,11 +14,13 @@ interface SymbolConstructor {
 
 interface AsyncIterator<T, TReturn = any, TNext = undefined> {
   // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
-  next(...args: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;
+  next(
+    ...args: readonly [] | readonly [TNext]
+  ): Promise<IteratorResult<T, TReturn>>;
   return?(
     value?: TReturn | PromiseLike<TReturn>,
   ): Promise<IteratorResult<T, TReturn>>;
-  throw?(e?: any): Promise<IteratorResult<T, TReturn>>;
+  throw?(e?: unknown): Promise<IteratorResult<T, TReturn>>;
 }
 
 interface AsyncIterable<T> {
