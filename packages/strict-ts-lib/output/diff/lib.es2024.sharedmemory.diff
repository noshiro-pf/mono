@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2020.bigint" />
+/// <reference path="./lib.es2020.bigint.d.ts" />
 
 interface Atomics {
   /**
@@ -32,8 +18,8 @@ interface Atomics {
     value: number,
     timeout?: number,
   ):
-    | { async: false; value: 'not-equal' | 'timed-out' }
-    | { async: true; value: Promise<'ok' | 'timed-out'> };
+    | { readonly async: false; readonly value: 'not-equal' | 'timed-out' }
+    | { readonly async: true; readonly value: Promise<'ok' | 'timed-out'> };
 
   /**
    * A non-blocking, asynchronous version of wait which is usable on the main thread. Waits asynchronously on a shared memory location and returns a Promise
@@ -49,8 +35,8 @@ interface Atomics {
     value: bigint,
     timeout?: number,
   ):
-    | { async: false; value: 'not-equal' | 'timed-out' }
-    | { async: true; value: Promise<'ok' | 'timed-out'> };
+    | { readonly async: false; readonly value: 'not-equal' | 'timed-out' }
+    | { readonly async: true; readonly value: Promise<'ok' | 'timed-out'> };
 }
 
 interface SharedArrayBuffer {
@@ -79,6 +65,6 @@ interface SharedArrayBuffer {
 interface SharedArrayBufferConstructor {
   new (
     byteLength: number,
-    options?: { maxByteLength?: number },
+    options?: { readonly maxByteLength?: number },
   ): SharedArrayBuffer;
 }
