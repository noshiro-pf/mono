@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
 
 interface SymbolConstructor {
   /**
@@ -26,32 +12,32 @@ interface SymbolConstructor {
 }
 
 interface IteratorYieldResult<TYield> {
-  done?: false;
-  value: TYield;
+  readonly done?: false;
+  readonly value: TYield;
 }
 
 interface IteratorReturnResult<TReturn> {
-  done: true;
-  value: TReturn;
+  readonly done: true;
+  readonly value: TReturn;
 }
 
 type IteratorResult<T, TReturn = any> =
   | IteratorYieldResult<T>
   | IteratorReturnResult<TReturn>;
 
-interface Iterator<T, TReturn = any, TNext = any> {
+interface Iterator<T, TReturn = any, TNext = unknown> {
   // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
-  next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;
+  next(...[value]: readonly [] | readonly [TNext]): IteratorResult<T, TReturn>;
   return?(value?: TReturn): IteratorResult<T, TReturn>;
-  throw?(e?: any): IteratorResult<T, TReturn>;
+  throw?(e?: unknown): IteratorResult<T, TReturn>;
 }
 
-interface Iterable<T, TReturn = any, TNext = any> {
+interface Iterable<T, TReturn = any, TNext = unknown> {
   [Symbol.iterator](): Iterator<T, TReturn, TNext>;
 }
 
 /** Describes a user-defined {@link Iterator} that is also iterable. */
-interface IterableIterator<T, TReturn = any, TNext = any>
+interface IterableIterator<T, TReturn = any, TNext = unknown>
   extends Iterator<T, TReturn, TNext> {
   [Symbol.iterator](): IterableIterator<T, TReturn, TNext>;
 }
@@ -60,7 +46,7 @@ interface IterableIterator<T, TReturn = any, TNext = any>
  * Describes an {@link Iterator} produced by the runtime that inherits from the
  * intrinsic `Iterator.prototype`.
  */
-interface IteratorObject<T, TReturn = unknown, TNext = unknown>
+interface IteratorObject<T, TReturn = any, TNext = unknown>
   extends Iterator<T, TReturn, TNext> {
   [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;
 }
@@ -82,7 +68,7 @@ interface Array<T> {
   [Symbol.iterator](): ArrayIterator<T>;
 
   /** Returns an iterable of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, T]>;
+  entries(): ArrayIterator<readonly [number, T]>;
 
   /** Returns an iterable of keys in the array */
   keys(): ArrayIterator<number>;
@@ -109,7 +95,7 @@ interface ArrayConstructor {
   from<T, U>(
     iterable: Iterable<T> | ArrayLike<T>,
     mapfn: (v: T, k: number) => U,
-    thisArg?: any,
+    thisArg?: unknown,
   ): U[];
 }
 
@@ -118,7 +104,7 @@ interface ReadonlyArray<T> {
   [Symbol.iterator](): ArrayIterator<T>;
 
   /** Returns an iterable of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, T]>;
+  entries(): ArrayIterator<readonly [number, T]>;
 
   /** Returns an iterable of keys in the array */
   keys(): ArrayIterator<number>;
@@ -129,7 +115,7 @@ interface ReadonlyArray<T> {
 
 interface IArguments {
   /** Iterator */
-  [Symbol.iterator](): ArrayIterator<any>;
+  [Symbol.iterator](): ArrayIterator<unknown>;
 }
 
 interface MapIterator<T>
@@ -139,10 +125,10 @@ interface MapIterator<T>
 
 interface Map<K, V> {
   /** Returns an iterable of entries in the map. */
-  [Symbol.iterator](): MapIterator<[K, V]>;
+  [Symbol.iterator](): MapIterator<readonly [K, V]>;
 
   /** Returns an iterable of key, value pairs for every entry in the map. */
-  entries(): MapIterator<[K, V]>;
+  entries(): MapIterator<readonly [K, V]>;
 
   /** Returns an iterable of keys in the map */
   keys(): MapIterator<K>;
@@ -153,10 +139,10 @@ interface Map<K, V> {
 
 interface ReadonlyMap<K, V> {
   /** Returns an iterable of entries in the map. */
-  [Symbol.iterator](): MapIterator<[K, V]>;
+  [Symbol.iterator](): MapIterator<readonly [K, V]>;
 
   /** Returns an iterable of key, value pairs for every entry in the map. */
-  entries(): MapIterator<[K, V]>;
+  entries(): MapIterator<readonly [K, V]>;
 
   /** Returns an iterable of keys in the map */
   keys(): MapIterator<K>;
@@ -166,7 +152,7 @@ interface ReadonlyMap<K, V> {
 }
 
 interface MapConstructor {
-  new (): Map<any, any>;
+  new (): Map<never, never>;
   new <K, V>(iterable?: Iterable<readonly [K, V]> | null): Map<K, V>;
 }
 
@@ -187,7 +173,7 @@ interface Set<T> {
   /** Iterates over values in the set. */
   [Symbol.iterator](): SetIterator<T>;
   /** Returns an iterable of [v,v] pairs for every value `v` in the set. */
-  entries(): SetIterator<[T, T]>;
+  entries(): SetIterator<readonly [T, T]>;
   /** Despite its name, returns an iterable of the values in the set. */
   keys(): SetIterator<T>;
 
@@ -200,7 +186,7 @@ interface ReadonlySet<T> {
   [Symbol.iterator](): SetIterator<T>;
 
   /** Returns an iterable of [v,v] pairs for every value `v` in the set. */
-  entries(): SetIterator<[T, T]>;
+  entries(): SetIterator<readonly [T, T]>;
 
   /** Despite its name, returns an iterable of the values in the set. */
   keys(): SetIterator<T>;
@@ -210,6 +196,7 @@ interface ReadonlySet<T> {
 }
 
 interface SetConstructor {
+  new (): Set<never>;
   new <T>(iterable?: Iterable<T> | null): Set<T>;
 }
 
@@ -252,13 +239,13 @@ interface String {
 }
 
 interface Int8Array {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Int8>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Int8]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Int8>;
 }
 
 interface Int8ArrayConstructor {
@@ -271,21 +258,21 @@ interface Int8ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => Int8,
+    thisArg?: unknown,
   ): Int8Array;
 }
 
 interface Uint8Array {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Uint8>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Uint8]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Uint8>;
 }
 
 interface Uint8ArrayConstructor {
@@ -298,23 +285,23 @@ interface Uint8ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8Array;
 }
 
 interface Uint8ClampedArray {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Uint8>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Uint8]>;
 
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
 
   /** Returns an list of values in the array */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Uint8>;
 }
 
 interface Uint8ClampedArrayConstructor {
@@ -327,17 +314,17 @@ interface Uint8ClampedArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8ClampedArray;
 }
 
 interface Int16Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
 
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
@@ -356,17 +343,17 @@ interface Int16ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Int16Array;
 }
 
 interface Uint16Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
@@ -383,17 +370,17 @@ interface Uint16ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Uint16Array;
 }
 
 interface Int32Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
@@ -410,17 +397,17 @@ interface Int32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Int32Array;
 }
 
 interface Uint32Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
@@ -437,17 +424,17 @@ interface Uint32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Uint32Array;
 }
 
 interface Float32Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
@@ -464,17 +451,17 @@ interface Float32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Float32Array;
 }
 
 interface Float64Array {
   [Symbol.iterator](): ArrayIterator<number>;
   /** Returns an array of key, value pairs for every entry in the array */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /** Returns an list of keys in the array */
   keys(): ArrayIterator<number>;
   /** Returns an list of values in the array */
@@ -491,9 +478,9 @@ interface Float64ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(
-    arrayLike: Iterable<number>,
-    mapfn?: (v: number, k: number) => number,
-    thisArg?: any,
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+    mapfn?: (v: T, k: number) => number,
+    thisArg?: unknown,
   ): Float64Array;
 }
