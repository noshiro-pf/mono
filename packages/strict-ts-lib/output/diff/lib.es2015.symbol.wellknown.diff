@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
 
 interface SymbolConstructor {
   /** A method that determines if a constructor object recognizes an object as one of the constructorâ€™s instances. Called by the semantics of the instanceof operator. */
@@ -59,14 +45,14 @@ interface Symbol {
 interface Array<T> {
   /** Is an object whose properties have the value 'true' when they will be absent when used in a 'with' statement. */
   readonly [Symbol.unscopables]: {
-    [K in keyof any[]]?: boolean;
+    readonly [K in keyof (readonly any[])]?: boolean;
   };
 }
 
 interface ReadonlyArray<T> {
   /** Is an object whose properties have the value 'true' when they will be absent when used in a 'with' statement. */
   readonly [Symbol.unscopables]: {
-    [K in keyof (readonly any[])]?: boolean;
+    readonly [K in keyof (readonly any[])]?: boolean;
   };
 }
 
@@ -113,7 +99,7 @@ interface Function {
    *
    * A constructor function can control which objects are recognized as its instances by 'instanceof' by overriding this method.
    */
-  [Symbol.hasInstance](value: any): boolean;
+  [Symbol.hasInstance](value: unknown): boolean;
 }
 
 interface GeneratorFunction {
@@ -156,7 +142,7 @@ interface RegExp {
    */
   [Symbol.replace](
     string: string,
-    replacer: (substring: string, ...args: any[]) => string,
+    replacer: (substring: string, ...args: readonly unknown[]) => string,
   ): string;
 
   /**
@@ -214,10 +200,10 @@ interface String {
     searchValue: {
       [Symbol.replace](
         string: string,
-        replacer: (substring: string, ...args: any[]) => string,
+        replacer: (substring: string, ...args: readonly unknown[]) => string,
       ): string;
     },
-    replacer: (substring: string, ...args: any[]) => string,
+    replacer: (substring: string, ...args: readonly unknown[]) => string,
   ): string;
 
   /**
