@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
@@ -29,12 +15,12 @@ interface Array<T> {
    *   instead.
    */
   find<S extends T>(
-    predicate: (value: T, index: number, obj: T[]) => value is S,
-    thisArg?: any,
+    predicate: (value: T, index: number, obj: readonly T[]) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   find(
-    predicate: (value: T, index: number, obj: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, obj: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -50,8 +36,8 @@ interface Array<T> {
    *   instead.
    */
   findIndex(
-    predicate: (value: T, index: number, obj: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, obj: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -98,7 +84,7 @@ interface ArrayConstructor {
   from<T, U>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => U,
-    thisArg?: any,
+    thisArg?: unknown,
   ): U[];
 
   /**
@@ -106,7 +92,7 @@ interface ArrayConstructor {
    *
    * @param items A set of elements to include in the new array object.
    */
-  of<T>(...items: T[]): T[];
+  of<T>(...items: readonly T[]): T[];
 }
 
 interface DateConstructor {
@@ -128,7 +114,7 @@ interface Math {
    *
    * @param x A numeric expression.
    */
-  clz32(x: number): number;
+  clz32(x: number): UintRange<0, 33>;
 
   /**
    * Returns the result of 32-bit multiplication of two numbers.
@@ -227,7 +213,7 @@ interface Math {
    *   is +Infinity. If any argument is NaN, the result is NaN. If all arguments
    *   are either +0 or âˆ’0, the result is +0.
    */
-  hypot(...values: number[]): number;
+  hypot(...values: readonly number[]): number;
 
   /**
    * Returns the integral part of the a numeric expression, x, removing any
@@ -268,14 +254,14 @@ interface NumberConstructor {
    *
    * @param number A numeric value.
    */
-  isFinite(number: unknown): boolean;
+  isFinite(number: number): boolean;
 
   /**
    * Returns true if the value passed is an integer, false otherwise.
    *
    * @param number A numeric value.
    */
-  isInteger(number: unknown): boolean;
+  isInteger(number: number): boolean;
 
   /**
    * Returns a Boolean value that indicates whether a value is the reserved
@@ -285,14 +271,14 @@ interface NumberConstructor {
    *
    * @param number A numeric value.
    */
-  isNaN(number: unknown): boolean;
+  isNaN(number: number): boolean;
 
   /**
    * Returns true if the value passed is a safe integer.
    *
    * @param number A numeric value.
    */
-  isSafeInteger(number: unknown): boolean;
+  isSafeInteger(number: number): boolean;
 
   /**
    * The value of the largest integer n such that n and n + 1 are both exactly
@@ -324,7 +310,7 @@ interface NumberConstructor {
    *   '0x' are considered hexadecimal. All other strings are considered
    *   decimal.
    */
-  parseInt(string: string, radix?: number): number;
+  parseInt(string: string, radix?: UintRange<2, 37>): number;
 }
 
 interface ObjectConstructor {
@@ -370,14 +356,14 @@ interface ObjectConstructor {
    * @param target The target object to copy to.
    * @param sources One or more source objects from which to copy properties
    */
-  assign(target: object, ...sources: any[]): any;
+  assign(target: object, ...sources: readonly unknown[]): unknown;
 
   /**
    * Returns an array of all symbol properties found directly on object o.
    *
    * @param o Object to retrieve the symbols from.
    */
-  getOwnPropertySymbols(o: any): symbol[];
+  getOwnPropertySymbols(o: unknown): symbol[];
 
   /**
    * Returns the names of the enumerable string properties and methods of an
@@ -387,7 +373,7 @@ interface ObjectConstructor {
    *   object that you created or an existing Document Object Model (DOM)
    *   object.
    */
-  keys(o: {}): string[];
+  // keys(o: {}): string[];
 
   /**
    * Returns true if the values are the same value, false otherwise.
@@ -395,7 +381,7 @@ interface ObjectConstructor {
    * @param value1 The first value.
    * @param value2 The second value.
    */
-  is(value1: any, value2: any): boolean;
+  is(value1: unknown, value2: unknown): boolean;
 
   /**
    * Sets the prototype of a specified object o to object proto or null. Returns
@@ -404,7 +390,7 @@ interface ObjectConstructor {
    * @param o The object to change its prototype.
    * @param proto The value of the new prototype or null.
    */
-  setPrototypeOf(o: any, proto: object | null): any;
+  setPrototypeOf(o: unknown, proto: object | null): unknown;
 }
 
 interface ReadonlyArray<T> {
@@ -422,11 +408,11 @@ interface ReadonlyArray<T> {
    */
   find<S extends T>(
     predicate: (value: T, index: number, obj: readonly T[]) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   find(
-    predicate: (value: T, index: number, obj: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, obj: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -442,8 +428,8 @@ interface ReadonlyArray<T> {
    *   instead.
    */
   findIndex(
-    predicate: (value: T, index: number, obj: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, obj: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): number;
 }
 
@@ -652,7 +638,7 @@ interface StringConstructor {
    * Return the String value whose elements are, in order, the elements in the
    * List elements. If length is 0, the empty string is returned.
    */
-  fromCodePoint(...codePoints: number[]): string;
+  fromCodePoint(...codePoints: readonly number[]): string;
 
   /**
    * String.raw is usually used as a tag function of a Tagged Template String.
@@ -666,7 +652,7 @@ interface StringConstructor {
    * @param substitutions A set of substitution values.
    */
   raw(
-    template: { raw: readonly string[] | ArrayLike<string> },
-    ...substitutions: any[]
+    template: { readonly raw: readonly string[] | ArrayLike<string> },
+    ...substitutions: readonly unknown[]
   ): string;
 }
