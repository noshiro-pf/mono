@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 declare namespace Intl {
   // http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Determining-Plural-Categories
@@ -21,24 +7,24 @@ declare namespace Intl {
   type PluralRuleType = 'cardinal' | 'ordinal';
 
   interface PluralRulesOptions {
-    localeMatcher?: 'lookup' | 'best fit' | undefined;
-    type?: PluralRuleType | undefined;
-    minimumIntegerDigits?: number | undefined;
-    minimumFractionDigits?: number | undefined;
-    maximumFractionDigits?: number | undefined;
-    minimumSignificantDigits?: number | undefined;
-    maximumSignificantDigits?: number | undefined;
+    readonly localeMatcher?: 'lookup' | 'best fit' | undefined;
+    readonly type?: PluralRuleType | undefined;
+    readonly minimumIntegerDigits?: UintRange<1, 22> | undefined;
+    readonly minimumFractionDigits?: UintRange<0, 21> | undefined;
+    readonly maximumFractionDigits?: UintRange<0, 21> | undefined;
+    readonly minimumSignificantDigits?: UintRange<1, 22> | undefined;
+    readonly maximumSignificantDigits?: UintRange<1, 22> | undefined;
   }
 
   interface ResolvedPluralRulesOptions {
-    locale: string;
-    pluralCategories: LDMLPluralRule[];
-    type: PluralRuleType;
-    minimumIntegerDigits: number;
-    minimumFractionDigits: number;
-    maximumFractionDigits: number;
-    minimumSignificantDigits?: number;
-    maximumSignificantDigits?: number;
+    readonly locale: string;
+    readonly pluralCategories: readonly LDMLPluralRule[];
+    readonly type: PluralRuleType;
+    readonly minimumIntegerDigits: UintRange<1, 22>;
+    readonly minimumFractionDigits: UintRange<0, 21>;
+    readonly maximumFractionDigits: UintRange<0, 21>;
+    readonly minimumSignificantDigits?: UintRange<1, 22>;
+    readonly maximumSignificantDigits?: UintRange<1, 22>;
   }
 
   interface PluralRules {
@@ -57,32 +43,32 @@ declare namespace Intl {
     ): PluralRules;
     supportedLocalesOf(
       locales: string | readonly string[],
-      options?: { localeMatcher?: 'lookup' | 'best fit' },
+      options?: { readonly localeMatcher?: 'lookup' | 'best fit' },
     ): string[];
   }
 
   const PluralRules: PluralRulesConstructor;
 
   interface NumberFormatPartTypeRegistry {
-    literal: never;
-    nan: never;
-    infinity: never;
-    percent: never;
-    integer: never;
-    group: never;
-    decimal: never;
-    fraction: never;
-    plusSign: never;
-    minusSign: never;
-    percentSign: never;
-    currency: never;
+    readonly literal: never;
+    readonly nan: never;
+    readonly infinity: never;
+    readonly percent: never;
+    readonly integer: never;
+    readonly group: never;
+    readonly decimal: never;
+    readonly fraction: never;
+    readonly plusSign: never;
+    readonly minusSign: never;
+    readonly percentSign: never;
+    readonly currency: never;
   }
 
   type NumberFormatPartTypes = keyof NumberFormatPartTypeRegistry;
 
   interface NumberFormatPart {
-    type: NumberFormatPartTypes;
-    value: string;
+    readonly type: NumberFormatPartTypes;
+    readonly value: string;
   }
 
   interface NumberFormat {
