@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2020.intl" />
+/// <reference path="./lib.es2020.intl.d.ts" />
 
 interface BigIntToLocaleStringOptions {
   /**
@@ -23,11 +9,11 @@ interface BigIntToLocaleStringOptions {
    * information about this option, see the
    * {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.
    */
-  localeMatcher?: string;
+  readonly localeMatcher?: string;
   /** The formatting style to use , the default is "decimal". */
-  style?: string;
+  readonly style?: string;
 
-  numberingSystem?: string;
+  readonly numberingSystem?: string;
   /**
    * The unit to use in unit formatting, Possible values are core unit
    * identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from
@@ -35,13 +21,13 @@ interface BigIntToLocaleStringOptions {
    * be concatenated with "-per-" to make a compound unit. There is no default
    * value; if the style is "unit", the unit property must be provided.
    */
-  unit?: string;
+  readonly unit?: string;
 
   /**
    * The unit formatting style to use in unit formatting, the defaults is
    * "short".
    */
-  unitDisplay?: string;
+  readonly unitDisplay?: string;
 
   /**
    * The currency to use in currency formatting. Possible values are the ISO
@@ -51,7 +37,7 @@ interface BigIntToLocaleStringOptions {
    * property must be provided. It is only used when [[Style]] has the value
    * "currency".
    */
-  currency?: string;
+  readonly currency?: string;
 
   /**
    * How to display the currency in currency formatting. It is only used when
@@ -63,40 +49,19 @@ interface BigIntToLocaleStringOptions {
    *
    * "name" to use a localized currency name such as "dollar"
    */
-  currencyDisplay?: string;
+  readonly currencyDisplay?: string;
 
   /**
    * Whether to use grouping separators, such as thousands separators or
    * thousand/lakh/crore separators. The default is true.
    */
-  useGrouping?: boolean;
+  readonly useGrouping?: boolean;
 
   /**
    * The minimum number of integer digits to use. Possible values are from 1 to
    * 21; the default is 1.
    */
-  minimumIntegerDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumIntegerDigits?: UintRange<1, 22>;
 
   /**
    * The minimum number of fraction digits to use. Possible values are from 0 to
@@ -105,28 +70,7 @@ interface BigIntToLocaleStringOptions {
    * {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list}
    * (2 if the list doesn't provide that information).
    */
-  minimumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly minimumFractionDigits?: UintRange<0, 21>;
 
   /**
    * The maximum number of fraction digits to use. Possible values are from 0 to
@@ -138,82 +82,19 @@ interface BigIntToLocaleStringOptions {
    * (2 if the list doesn't provide that information); the default for percent
    * formatting is the larger of minimumFractionDigits and 0.
    */
-  maximumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly maximumFractionDigits?: UintRange<0, 21>;
 
   /**
    * The minimum number of significant digits to use. Possible values are from 1
    * to 21; the default is 1.
    */
-  minimumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumSignificantDigits?: UintRange<1, 22>;
 
   /**
    * The maximum number of significant digits to use. Possible values are from 1
    * to 21; the default is 21.
    */
-  maximumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly maximumSignificantDigits?: UintRange<1, 22>;
 
   /**
    * The formatting that should be displayed for the number, the defaults is
@@ -227,10 +108,10 @@ interface BigIntToLocaleStringOptions {
    *
    *     "compact" string representing exponent, defaults is using the "short" form
    */
-  notation?: string;
+  readonly notation?: string;
 
   /** Used only when notation is "compact" */
-  compactDisplay?: string;
+  readonly compactDisplay?: string;
 }
 
 interface BigInt {
@@ -239,7 +120,7 @@ interface BigInt {
    *
    * @param radix Specifies a radix for converting numeric values to strings.
    */
-  toString(radix?: number): string;
+  toString(radix?: UintRange<2, 37>): string;
 
   /**
    * Returns a string representation appropriate to the host environment's
@@ -267,7 +148,7 @@ interface BigIntConstructor {
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asIntN(bits: number, int: bigint): bigint;
+  asIntN(bits: UintRange<0, 65>, int: bigint): bigint;
   /**
    * Interprets the low bits of a BigInt as an unsigned integer. All higher bits
    * are discarded.
@@ -275,10 +156,10 @@ interface BigIntConstructor {
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asUintN(bits: number, int: bigint): bigint;
+  asUintN(bits: UintRange<0, 65>, int: bigint): bigint;
 }
 
-declare var BigInt: BigIntConstructor;
+declare const BigInt: BigIntConstructor;
 
 /**
  * A typed array of 64-bit signed integer values. The contents are initialized
@@ -289,7 +170,7 @@ interface BigInt64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
@@ -314,7 +195,7 @@ interface BigInt64Array<
   copyWithin(target: number, start: number, end?: number): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [number, bigint]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -332,7 +213,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -363,8 +244,8 @@ interface BigInt64Array<
       value: bigint,
       index: number,
       array: BigInt64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -385,7 +266,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -406,7 +287,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -424,7 +305,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -488,7 +369,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -616,7 +497,7 @@ interface BigInt64Array<
       index: number,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -638,7 +519,7 @@ interface BigInt64Array<
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -669,14 +550,14 @@ interface BigInt64ArrayConstructor {
   new (array: ArrayLike<bigint> | ArrayBuffer): BigInt64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigInt64Array<ArrayBuffer>;
+  of(...items: readonly bigint[]): BigInt64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -696,10 +577,10 @@ interface BigInt64ArrayConstructor {
   from<U>(
     arrayLike: ArrayLike<U>,
     mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 }
-declare var BigInt64Array: BigInt64ArrayConstructor;
+declare const BigInt64Array: BigInt64ArrayConstructor;
 
 /**
  * A typed array of 64-bit unsigned integer values. The contents are initialized
@@ -710,7 +591,7 @@ interface BigUint64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
@@ -735,7 +616,7 @@ interface BigUint64Array<
   copyWithin(target: number, start: number, end?: number): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [number, bigint]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -753,7 +634,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -784,8 +665,8 @@ interface BigUint64Array<
       value: bigint,
       index: number,
       array: BigUint64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -806,7 +687,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -827,7 +708,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -845,7 +726,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -909,7 +790,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -1037,7 +918,7 @@ interface BigUint64Array<
       index: number,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -1059,7 +940,7 @@ interface BigUint64Array<
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -1092,14 +973,14 @@ interface BigUint64ArrayConstructor {
   new (array: ArrayLike<bigint> | ArrayBuffer): BigUint64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigUint64Array<ArrayBuffer>;
+  of(...items: readonly bigint[]): BigUint64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -1112,10 +993,10 @@ interface BigUint64ArrayConstructor {
   from<U>(
     arrayLike: ArrayLike<U>,
     mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    thisArg?: unknown,
   ): BigUint64Array;
 }
-declare var BigUint64Array: BigUint64ArrayConstructor;
+declare const BigUint64Array: BigUint64ArrayConstructor;
 
 interface DataView<TArrayBuffer extends ArrayBufferLike> {
   /**
