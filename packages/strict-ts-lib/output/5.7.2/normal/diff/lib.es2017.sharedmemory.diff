@@ -1,22 +1,8 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
-/// <reference lib="es2015.symbol.wellknown" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
+/// <reference path="./lib.es2015.symbol.wellknown.d.ts" />
 
 interface SharedArrayBuffer {
   /** Read-only. The length of the ArrayBuffer (in bytes). */
@@ -32,62 +18,56 @@ interface SharedArrayBufferConstructor {
   readonly prototype: SharedArrayBuffer;
   new (byteLength?: number): SharedArrayBuffer;
 }
-declare var SharedArrayBuffer: SharedArrayBufferConstructor;
+declare const SharedArrayBuffer: SharedArrayBufferConstructor;
 
 interface ArrayBufferTypes {
-  SharedArrayBuffer: SharedArrayBuffer;
+  readonly SharedArrayBuffer: SharedArrayBuffer;
 }
 
 interface Atomics {
   /** Adds a value to the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  add(typedArray: Int8Array, index: number, value: Int8): Int8;
+  add(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   add(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
 
   /** Stores the bitwise AND of a value with the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  and(typedArray: Int8Array, index: number, value: Int8): Int8;
+  and(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   and(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
 
   /** Replaces the value at the given position in the array if the original value equals the given expected value, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
   compareExchange(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int8Array,
+    index: number,
+    expectedValue: Int8,
+    replacementValue: Int8,
+  ): Int8;
+  compareExchange(
+    typedArray: Uint8Array,
+    index: number,
+    expectedValue: Uint8,
+    replacementValue: Uint8,
+  ): Uint8;
+  compareExchange(
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     expectedValue: number,
     replacementValue: number,
   ): number;
 
   /** Replaces the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  exchange(typedArray: Int8Array, index: number, value: Int8): Int8;
+  exchange(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   exchange(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
@@ -96,52 +76,36 @@ interface Atomics {
   isLockFree(size: number): boolean;
 
   /** Returns the value at the given position in the array. Until this atomic operation completes, any other read or write operation against the array will block. */
+  load(typedArray: Int8Array, index: number): Int8;
+  load(typedArray: Uint8Array, index: number): Uint8;
   load(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
   ): number;
 
   /** Stores the bitwise OR of a value with the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  or(typedArray: Int8Array, index: number, value: Int8): Int8;
+  or(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   or(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
 
   /** Stores a value at the given position in the array, returning the new value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  store(typedArray: Int8Array, index: number, value: Int8): Int8;
+  store(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   store(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
 
   /** Subtracts a value from the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  sub(typedArray: Int8Array, index: number, value: Int8): Int8;
+  sub(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   sub(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
@@ -168,14 +132,10 @@ interface Atomics {
   ): number;
 
   /** Stores the bitwise XOR of a value with the value at the given position in the array, returning the original value. Until this atomic operation completes, any other read or write operation against the array will block. */
+  xor(typedArray: Int8Array, index: number, value: Int8): Int8;
+  xor(typedArray: Uint8Array, index: number, value: Uint8): Uint8;
   xor(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
+    typedArray: Int16Array | Uint16Array | Int32Array | Uint32Array,
     index: number,
     value: number,
   ): number;
@@ -183,4 +143,4 @@ interface Atomics {
   readonly [Symbol.toStringTag]: 'Atomics';
 }
 
-declare var Atomics: Atomics;
+declare const Atomics: Atomics;
