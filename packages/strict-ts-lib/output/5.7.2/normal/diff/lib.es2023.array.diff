@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
@@ -26,12 +12,12 @@ interface Array<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLast<S extends T>(
-    predicate: (value: T, index: number, array: T[]) => value is S,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -44,8 +30,8 @@ interface Array<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -65,13 +51,13 @@ interface Array<T> {
   toSorted(compareFn?: (a: T, b: T) => number): T[];
 
   /**
-   * Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.
+   * Copies an array and removes elements while, if necessary, inserting new elements in their place, returning the remaining elements.
    * @param start The zero-based location in the array from which to start removing elements.
    * @param deleteCount The number of elements to remove.
    * @param items Elements to insert into the copied array in place of the deleted elements.
-   * @returns The copied array.
+   * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount: number, ...items: T[]): T[];
+  toSpliced(start: number, deleteCount: number, ...items: readonly T[]): T[];
 
   /**
    * Copies an array and removes elements while returning the remaining elements.
@@ -105,11 +91,11 @@ interface ReadonlyArray<T> {
    */
   findLast<S extends T>(
     predicate: (value: T, index: number, array: readonly T[]) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -122,17 +108,17 @@ interface ReadonlyArray<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copied array with all of its elements reversed.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): T[];
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
@@ -149,7 +135,7 @@ interface ReadonlyArray<T> {
    * @param items Elements to insert into the copied array in place of the deleted elements.
    * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount: number, ...items: T[]): T[];
+  toSpliced(start: number, deleteCount: number, ...items: readonly T[]): T[];
 
   /**
    * Copies an array and removes elements while returning the remaining elements.
@@ -165,8 +151,8 @@ interface ReadonlyArray<T> {
    * of the array
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: T): T[];
 }
@@ -181,14 +167,14 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Int8>(
+    predicate: (value: Int8, index: number, array: this) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Int8, index: number, array: this) => boolean,
+    thisArg?: unknown,
+  ): Int8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -200,17 +186,17 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Int8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int8Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -219,18 +205,18 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Int8Array<Buffer>(4) [1, 2, 11, 22]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Int8Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Int8, b: Int8) => number): Int8Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Int8Array<ArrayBuffer>;
+  with(index: number, value: Int8): Int8Array<ArrayBuffer>;
 }
 
 interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
@@ -243,14 +229,14 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint8>(
+    predicate: (value: Uint8, index: number, array: this) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -262,17 +248,17 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint8Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -281,18 +267,18 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Uint8Array<Buffer>(4) [1, 2, 11, 22]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Uint8Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Uint8, b: Uint8) => number): Uint8Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint8Array<ArrayBuffer>;
+  with(index: number, value: Uint8): Uint8Array<ArrayBuffer>;
 }
 
 interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
@@ -305,14 +291,14 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint8>(
+    predicate: (value: Uint8, index: number, array: this) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -324,17 +310,17 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint8ClampedArray<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -344,17 +330,19 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Uint8, b: Uint8) => number,
   ): Uint8ClampedArray<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint8ClampedArray<ArrayBuffer>;
+  with(index: number, value: Uint8): Uint8ClampedArray<ArrayBuffer>;
 }
 
 interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
@@ -369,11 +357,11 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -386,17 +374,17 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int16Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -410,11 +398,13 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
   ): Int16Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Int16Array<ArrayBuffer>;
 }
@@ -431,11 +421,11 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -448,17 +438,17 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint16Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -472,11 +462,13 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
   ): Uint16Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Uint16Array<ArrayBuffer>;
 }
@@ -493,11 +485,11 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -510,17 +502,17 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -534,11 +526,13 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
   ): Int32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Int32Array<ArrayBuffer>;
 }
@@ -555,11 +549,11 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -572,17 +566,17 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -596,11 +590,13 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
   ): Uint32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Uint32Array<ArrayBuffer>;
 }
@@ -617,11 +613,11 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -634,17 +630,17 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Float32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -658,11 +654,13 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
   ): Float32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Float32Array<ArrayBuffer>;
 }
@@ -679,11 +677,11 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends number>(
     predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -696,17 +694,17 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Float64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -720,11 +718,13 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
   ): Float64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: number): Float64Array<ArrayBuffer>;
 }
@@ -741,11 +741,11 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends bigint>(
     predicate: (value: bigint, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: bigint, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -758,17 +758,17 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: bigint, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): BigInt64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -782,11 +782,13 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
   ): BigInt64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given bigint at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: bigint): BigInt64Array<ArrayBuffer>;
 }
@@ -803,11 +805,11 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    */
   findLast<S extends bigint>(
     predicate: (value: bigint, index: number, array: this) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: bigint, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): bigint | undefined;
 
   /**
@@ -820,17 +822,17 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: bigint, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): BigUint64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -844,11 +846,13 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
   ): BigUint64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given bigint at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
   with(index: number, value: bigint): BigUint64Array<ArrayBuffer>;
 }
