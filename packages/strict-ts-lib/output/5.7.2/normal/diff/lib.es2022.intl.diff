@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />

 declare namespace Intl {
   /**
@@ -23,9 +9,9 @@ declare namespace Intl {
    */
   interface SegmenterOptions {
     /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */
-    localeMatcher?: 'best fit' | 'lookup' | undefined;
+    readonly localeMatcher?: 'best fit' | 'lookup' | undefined;
     /** The type of input to be split */
-    granularity?: 'grapheme' | 'word' | 'sentence' | undefined;
+    readonly granularity?: 'grapheme' | 'word' | 'sentence' | undefined;
   }

   interface Segmenter {
@@ -41,8 +27,8 @@ declare namespace Intl {
   }

   interface ResolvedSegmenterOptions {
-    locale: string;
-    granularity: 'grapheme' | 'word' | 'sentence';
+    readonly locale: string;
+    readonly granularity: 'grapheme' | 'word' | 'sentence';
   }

   interface SegmentIterator<T>
@@ -64,20 +50,20 @@ declare namespace Intl {

   interface SegmentData {
     /** A string containing the segment extracted from the original input string. */
-    segment: string;
+    readonly segment: string;
     /** The code unit index in the original input string at which the segment begins. */
-    index: number;
+    readonly index: number;
     /** The complete input string that was segmented. */
-    input: string;
+    readonly input: string;
     /**
      * A boolean value only if granularity is "word"; otherwise, undefined.
      * If granularity is "word", then isWordLike is true when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, false.
      */
-    isWordLike?: boolean;
+    readonly isWordLike?: boolean;
   }

   const Segmenter: {
-    prototype: Segmenter;
+    readonly prototype: Segmenter;

     /**
      * Creates a new `Intl.Segmenter` object.
