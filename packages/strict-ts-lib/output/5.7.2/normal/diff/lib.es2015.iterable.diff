@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />

-/// <reference lib="es2015.symbol" />
+/// <reference path="./lib.es2015.symbol.d.ts" />

 interface SymbolConstructor {
   /**
@@ -26,34 +12,34 @@ interface SymbolConstructor {
 }

 interface IteratorYieldResult<TYield> {
-  done?: false;
-  value: TYield;
+  readonly done?: false;
+  readonly value: TYield;
 }

 interface IteratorReturnResult<TReturn> {
-  done: true;
-  value: TReturn;
+  readonly done: true;
+  readonly value: TReturn;
 }

 type IteratorResult<T, TReturn = any> =
   | IteratorYieldResult<T>
   | IteratorReturnResult<TReturn>;

-interface Iterator<T, TReturn = any, TNext = any> {
+interface Iterator<T, TReturn = any, TNext = unknown> {
   // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
   next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;
   return?(value?: TReturn): IteratorResult<T, TReturn>;
-  throw?(e?: any): IteratorResult<T, TReturn>;
+  throw?(e?: unknown): IteratorResult<T, TReturn>;
 }

-interface Iterable<T, TReturn = any, TNext = any> {
+interface Iterable<T, TReturn = any, TNext = unknown> {
   [Symbol.iterator](): Iterator<T, TReturn, TNext>;
 }

 /**
  * Describes a user-defined {@link Iterator} that is also iterable.
  */
-interface IterableIterator<T, TReturn = any, TNext = any>
+interface IterableIterator<T, TReturn = any, TNext = unknown>
   extends Iterator<T, TReturn, TNext> {
   [Symbol.iterator](): IterableIterator<T, TReturn, TNext>;
 }
@@ -61,7 +47,7 @@ interface IterableIterator<T, TReturn = any, TNext = any>
 /**
  * Describes an {@link Iterator} produced by the runtime that inherits from the intrinsic `Iterator.prototype`.
  */
-interface IteratorObject<T, TReturn = unknown, TNext = unknown>
+interface IteratorObject<T, TReturn = any, TNext = unknown>
   extends Iterator<T, TReturn, TNext> {
   [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;
 }
@@ -84,7 +70,7 @@ interface Array<T> {
   /**
    * Returns an iterable of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, T]>;
+  entries(): ArrayIterator<readonly [number, T]>;

   /**
    * Returns an iterable of keys in the array
@@ -113,7 +99,7 @@ interface ArrayConstructor {
   from<T, U>(
     iterable: Iterable<T> | ArrayLike<T>,
     mapfn: (v: T, k: number) => U,
-    thisArg?: any,
+    thisArg?: unknown,
   ): U[];
 }

@@ -124,7 +110,7 @@ interface ReadonlyArray<T> {
   /**
    * Returns an iterable of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, T]>;
+  entries(): ArrayIterator<readonly [number, T]>;

   /**
    * Returns an iterable of keys in the array
@@ -139,7 +125,7 @@ interface ReadonlyArray<T> {

 interface IArguments {
   /** Iterator */
-  [Symbol.iterator](): ArrayIterator<any>;
+  [Symbol.iterator](): ArrayIterator<unknown>;
 }

 interface MapIterator<T>
@@ -149,12 +135,12 @@ interface MapIterator<T>

 interface Map<K, V> {
   /** Returns an iterable of entries in the map. */
-  [Symbol.iterator](): MapIterator<[K, V]>;
+  [Symbol.iterator](): MapIterator<readonly [K, V]>;

   /**
    * Returns an iterable of key, value pairs for every entry in the map.
    */
-  entries(): MapIterator<[K, V]>;
+  entries(): MapIterator<readonly [K, V]>;

   /**
    * Returns an iterable of keys in the map
@@ -169,12 +155,12 @@ interface Map<K, V> {

 interface ReadonlyMap<K, V> {
   /** Returns an iterable of entries in the map. */
-  [Symbol.iterator](): MapIterator<[K, V]>;
+  [Symbol.iterator](): MapIterator<readonly [K, V]>;

   /**
    * Returns an iterable of key, value pairs for every entry in the map.
    */
-  entries(): MapIterator<[K, V]>;
+  entries(): MapIterator<readonly [K, V]>;

   /**
    * Returns an iterable of keys in the map
@@ -188,7 +174,7 @@ interface ReadonlyMap<K, V> {
 }

 interface MapConstructor {
-  new (): Map<any, any>;
+  new (): Map<never, never>;
   new <K, V>(iterable?: Iterable<readonly [K, V]> | null): Map<K, V>;
 }

@@ -211,7 +197,7 @@ interface Set<T> {
   /**
    * Returns an iterable of [v,v] pairs for every value `v` in the set.
    */
-  entries(): SetIterator<[T, T]>;
+  entries(): SetIterator<readonly [T, T]>;
   /**
    * Despite its name, returns an iterable of the values in the set.
    */
@@ -230,7 +216,7 @@ interface ReadonlySet<T> {
   /**
    * Returns an iterable of [v,v] pairs for every value `v` in the set.
    */
-  entries(): SetIterator<[T, T]>;
+  entries(): SetIterator<readonly [T, T]>;

   /**
    * Despite its name, returns an iterable of the values in the set.
@@ -244,6 +230,7 @@ interface ReadonlySet<T> {
 }

 interface SetConstructor {
+  new (): Set<never>;
   new <T>(iterable?: Iterable<T> | null): Set<T>;
 }

@@ -284,11 +271,11 @@ interface String {
 }

 interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Int8>;
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Int8]>;
   /**
    * Returns an list of keys in the array
    */
@@ -296,7 +283,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an list of values in the array
    */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Int8>;
 }

 interface Int8ArrayConstructor {
@@ -308,7 +295,7 @@ interface Int8ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Int8Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Int8Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -317,17 +304,17 @@ interface Int8ArrayConstructor {
    */
   from<T>(
     arrayLike: Iterable<T>,
-    mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn?: (v: T, k: number) => Int8,
+    thisArg?: unknown,
   ): Int8Array<ArrayBuffer>;
 }

 interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Uint8>;
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Uint8]>;
   /**
    * Returns an list of keys in the array
    */
@@ -335,7 +322,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an list of values in the array
    */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Uint8>;
 }

 interface Uint8ArrayConstructor {
@@ -347,7 +334,7 @@ interface Uint8ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Uint8Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -356,17 +343,17 @@ interface Uint8ArrayConstructor {
    */
   from<T>(
     arrayLike: Iterable<T>,
-    mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn?: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8Array<ArrayBuffer>;
 }

 interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
-  [Symbol.iterator](): ArrayIterator<number>;
+  [Symbol.iterator](): ArrayIterator<Uint8>;
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, Uint8]>;

   /**
    * Returns an list of keys in the array
@@ -376,7 +363,7 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an list of values in the array
    */
-  values(): ArrayIterator<number>;
+  values(): ArrayIterator<Uint8>;
 }

 interface Uint8ClampedArrayConstructor {
@@ -388,7 +375,9 @@ interface Uint8ClampedArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>;
+  from<T extends number>(
+    arrayLike: Iterable<T>,
+  ): Uint8ClampedArray<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -397,8 +386,8 @@ interface Uint8ClampedArrayConstructor {
    */
   from<T>(
     arrayLike: Iterable<T>,
-    mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn?: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8ClampedArray<ArrayBuffer>;
 }

@@ -407,7 +396,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;

   /**
    * Returns an list of keys in the array
@@ -429,7 +418,7 @@ interface Int16ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Int16Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Int16Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -439,7 +428,7 @@ interface Int16ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int16Array<ArrayBuffer>;
 }

@@ -448,7 +437,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /**
    * Returns an list of keys in the array
    */
@@ -468,7 +457,7 @@ interface Uint16ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Uint16Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -478,7 +467,7 @@ interface Uint16ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint16Array<ArrayBuffer>;
 }

@@ -487,7 +476,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /**
    * Returns an list of keys in the array
    */
@@ -507,7 +496,7 @@ interface Int32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Int32Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Int32Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -517,7 +506,7 @@ interface Int32ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int32Array<ArrayBuffer>;
 }

@@ -526,7 +515,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /**
    * Returns an list of keys in the array
    */
@@ -546,7 +535,7 @@ interface Uint32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Uint32Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -556,7 +545,7 @@ interface Uint32ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint32Array<ArrayBuffer>;
 }

@@ -565,7 +554,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /**
    * Returns an list of keys in the array
    */
@@ -585,7 +574,7 @@ interface Float32ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Float32Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Float32Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -595,7 +584,7 @@ interface Float32ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float32Array<ArrayBuffer>;
 }

@@ -604,7 +593,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
   /**
    * Returns an array of key, value pairs for every entry in the array
    */
-  entries(): ArrayIterator<[number, number]>;
+  entries(): ArrayIterator<readonly [number, number]>;
   /**
    * Returns an list of keys in the array
    */
@@ -624,7 +613,7 @@ interface Float64ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: Iterable<number>): Float64Array<ArrayBuffer>;
+  from<T extends number>(arrayLike: Iterable<T>): Float64Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
@@ -634,6 +623,6 @@ interface Float64ArrayConstructor {
   from<T>(
     arrayLike: Iterable<T>,
     mapfn?: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float64Array<ArrayBuffer>;
 }
