@@ -1,25 +1,11 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />

 interface PromiseConstructor {
   /**
    * A reference to the prototype.
    */
-  readonly prototype: Promise<any>;
+  readonly prototype: Promise<unknown>;

   /**
    * Creates a new Promise.
@@ -27,7 +13,7 @@ interface PromiseConstructor {
   new <T>(
     executor: (
       resolve: (value: T | PromiseLike<T>) => void,
-      reject: (reason?: any) => void,
+      reject: (reason?: unknown) => void,
     ) => void,
   ): Promise<T>;

@@ -40,7 +26,7 @@ interface PromiseConstructor {
    * @param values An array of Promises.
    * @returns A new Promise.
    */
-  all<T extends readonly unknown[] | []>(
+  all<T extends readonly unknown[] | readonly []>(
     values: T,
   ): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>;

@@ -53,7 +39,7 @@ interface PromiseConstructor {
    * @param values An array of Promises.
    * @returns A new Promise.
    */
-  race<T extends readonly unknown[] | []>(
+  race<T extends readonly unknown[] | readonly []>(
     values: T,
   ): Promise<Awaited<T[number]>>;

@@ -65,7 +51,7 @@ interface PromiseConstructor {
    * @param reason The reason the promise was rejected.
    * @returns A new rejected Promise.
    */
-  reject<T = never>(reason?: any): Promise<T>;
+  reject<T = never>(reason?: unknown): Promise<T>;

   /**
    * Creates a new resolved promise.
@@ -86,4 +72,4 @@ interface PromiseConstructor {
   resolve<T>(value: T | PromiseLike<T>): Promise<Awaited<T>>;
 }

-declare var Promise: PromiseConstructor;
+declare const Promise: PromiseConstructor;
