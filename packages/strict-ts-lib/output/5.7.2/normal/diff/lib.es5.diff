@@ -1,35 +1,22 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="decorators" />
-/// <reference lib="decorators.legacy" />
+/// <reference path="./lib.decorators.d.ts" />
+/// <reference path="./lib.decorators.legacy.d.ts" />
 
 /////////////////////////////
 /// ECMAScript APIs
 /////////////////////////////
 
-declare var NaN: number;
-declare var Infinity: number;
+declare const NaN: number;
+declare const Infinity: number;
 
 /**
  * Evaluates JavaScript code and executes it.
  * @param x A String value that contains valid JavaScript code.
+ * @deprecated
  */
-declare function eval(x: string): any;
+declare function eval(x: string): unknown;
 
 /**
  * Converts a string to an integer.
@@ -38,7 +25,7 @@ declare function eval(x: string): any;
  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
  * All other strings are considered decimal.
  */
-declare function parseInt(string: string, radix?: number): number;
+declare function parseInt(string: string, radix?: UintRange<2, 37>): number;
 
 /**
  * Converts a string to a floating-point number.
@@ -49,12 +36,14 @@ declare function parseFloat(string: string): number;
 /**
  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).
  * @param number A numeric value.
+ * @deprecated Use `Number.isNaN` instead.
  */
 declare function isNaN(number: number): boolean;
 
 /**
  * Determines whether a supplied number is finite.
  * @param number Any numeric value.
+ * @deprecated Use `Number.isFinite` instead.
  */
 declare function isFinite(number: number): boolean;
 
@@ -106,24 +95,25 @@ interface Symbol {
   valueOf(): symbol;
 }
 
-declare type PropertyKey = string | number | symbol;
+// This is already defined in ts-type-utils.
+// declare type PropertyKey = string | number | symbol;
 
 interface PropertyDescriptor {
-  configurable?: boolean;
-  enumerable?: boolean;
-  value?: any;
-  writable?: boolean;
-  get?(): any;
-  set?(v: any): void;
+  readonly configurable?: boolean;
+  readonly enumerable?: boolean;
+  readonly value?: unknown;
+  readonly writable?: boolean;
+  get?(): unknown;
+  set?(v: unknown): void;
 }
 
 interface PropertyDescriptorMap {
-  [key: PropertyKey]: PropertyDescriptor;
+  readonly [key: PropertyKey]: PropertyDescriptor;
 }
 
 interface Object {
   /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
-  constructor: Function;
+  readonly constructor: Function;
 
   /** Returns a string representation of an object. */
   toString(): string;
@@ -154,9 +144,12 @@ interface Object {
 }
 
 interface ObjectConstructor {
-  new (value?: any): Object;
-  (): any;
-  (value: any): any;
+  /** @deprecated Don't use Object constructor */
+  new (value?: unknown): Object;
+  /** @deprecated Don't use Object constructor */
+  (): unknown;
+  /** @deprecated Don't use Object constructor */
+  (value: unknown): unknown;
 
   /** A reference to the prototype for a class of objects. */
   readonly prototype: Object;
@@ -165,7 +158,7 @@ interface ObjectConstructor {
    * Returns the prototype of an object.
    * @param o The object that references the prototype.
    */
-  getPrototypeOf(o: any): any;
+  getPrototypeOf(o: unknown): unknown;
 
   /**
    * Gets the own property descriptor of the specified object.
@@ -174,7 +167,7 @@ interface ObjectConstructor {
    * @param p Name of the property.
    */
   getOwnPropertyDescriptor(
-    o: any,
+    o: unknown,
     p: PropertyKey,
   ): PropertyDescriptor | undefined;
 
@@ -183,13 +176,13 @@ interface ObjectConstructor {
    * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
    * @param o Object that contains the own properties.
    */
-  getOwnPropertyNames(o: any): string[];
+  getOwnPropertyNames(o: unknown): string[];
 
   /**
    * Creates an object that has the specified prototype or that has null prototype.
    * @param o Object to use as a prototype. May be null.
    */
-  create(o: object | null): any;
+  create(o: object | null): unknown;
 
   /**
    * Creates an object that has the specified prototype, and that optionally contains specified properties.
@@ -198,8 +191,8 @@ interface ObjectConstructor {
    */
   create(
     o: object | null,
-    properties: PropertyDescriptorMap & ThisType<any>,
-  ): any;
+    properties: PropertyDescriptorMap & ThisType<unknown>,
+  ): unknown;
 
   /**
    * Adds a property to an object, or modifies attributes of an existing property.
@@ -210,7 +203,7 @@ interface ObjectConstructor {
   defineProperty<T>(
     o: T,
     p: PropertyKey,
-    attributes: PropertyDescriptor & ThisType<any>,
+    attributes: PropertyDescriptor & ThisType<unknown>,
   ): T;
 
   /**
@@ -220,7 +213,7 @@ interface ObjectConstructor {
    */
   defineProperties<T>(
     o: T,
-    properties: PropertyDescriptorMap & ThisType<any>,
+    properties: PropertyDescriptorMap & ThisType<unknown>,
   ): T;
 
   /**
@@ -240,7 +233,7 @@ interface ObjectConstructor {
    * @param o Object on which to lock the attributes.
    */
   freeze<
-    T extends { [idx: string]: U | null | undefined | object },
+    T extends { readonly [idx: string]: U | null | undefined | object },
     U extends string | bigint | number | boolean | symbol,
   >(
     o: T,
@@ -262,31 +255,38 @@ interface ObjectConstructor {
    * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
    * @param o Object to test.
    */
-  isSealed(o: any): boolean;
+  isSealed(o: unknown): boolean;
 
   /**
    * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
    * @param o Object to test.
    */
-  isFrozen(o: any): boolean;
+  isFrozen(o: unknown): boolean;
 
   /**
    * Returns a value that indicates whether new properties can be added to an object.
    * @param o Object to test.
    */
-  isExtensible(o: any): boolean;
+  isExtensible(o: unknown): boolean;
 
   /**
    * Returns the names of the enumerable string properties and methods of an object.
    * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
+   *
+   * @example
+   * ```ts
+   * const ks = Object.keys({ x: 1, y: 2, z: '3', 3: 4 }); // ('3' | 'x' | 'y' | 'z' | (string & {}))[]
+   * ```
    */
-  keys(o: object): string[];
+  keys<const R extends UnknownRecord>(
+    object: R,
+  ): StrictLibInternals.ToObjectKeys<R>[];
 }
 
 /**
  * Provides functionality common to all JavaScript objects.
  */
-declare var Object: ObjectConstructor;
+declare const Object: ObjectConstructor;
 
 /**
  * Creates a new function.
@@ -297,14 +297,18 @@ interface Function {
    * @param thisArg The object to be used as the this object.
    * @param argArray A set of arguments to be passed to the function.
    */
-  apply(this: Function, thisArg: any, argArray?: any): any;
+  apply(this: Function, thisArg: unknown, argArray?: unknown): unknown;
 
   /**
    * Calls a method of an object, substituting another object for the current object.
    * @param thisArg The object to be used as the current object.
    * @param argArray A list of arguments to be passed to the method.
    */
-  call(this: Function, thisArg: any, ...argArray: any[]): any;
+  call(
+    this: Function,
+    thisArg: unknown,
+    ...argArray: readonly unknown[]
+  ): unknown;
 
   /**
    * For a given function, creates a bound function that has the same body as the original function.
@@ -312,35 +316,41 @@ interface Function {
    * @param thisArg An object to which the this keyword can refer inside the new function.
    * @param argArray A list of arguments to be passed to the new function.
    */
-  bind(this: Function, thisArg: any, ...argArray: any[]): any;
+  bind(
+    this: Function,
+    thisArg: unknown,
+    ...argArray: readonly unknown[]
+  ): unknown;
 
   /** Returns a string representation of a function. */
   toString(): string;
 
-  prototype: any;
+  readonly prototype: unknown;
   readonly length: number;
 
   // Non-standard extensions
-  arguments: any;
-  caller: Function;
+  readonly arguments: unknown;
+  readonly caller: Function;
 }
 
 interface FunctionConstructor {
   /**
    * Creates a new function.
    * @param args A list of arguments the function accepts.
+   * @deprecated Don't use Function constructor
    */
-  new (...args: string[]): Function;
-  (...args: string[]): Function;
+  new (...args: readonly string[]): Function;
+  /** @deprecated Don't use Function constructor */
+  (...args: readonly string[]): Function;
   readonly prototype: Function;
 }
 
-declare var Function: FunctionConstructor;
+declare const Function: FunctionConstructor;
 
 /**
  * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.
  */
-type ThisParameterType<T> = T extends (this: infer U, ...args: never) => any
+type ThisParameterType<T> = T extends (this: infer U, ...args: never) => unknown
   ? U
   : unknown;
 
@@ -366,7 +376,7 @@ interface CallableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args An array of argument values to be passed to the function.
    */
-  apply<T, A extends any[], R>(
+  apply<T, A extends readonly unknown[], R>(
     this: (this: T, ...args: A) => R,
     thisArg: T,
     args: A,
@@ -377,7 +387,7 @@ interface CallableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args Argument values to be passed to the function.
    */
-  call<T, A extends any[], R>(
+  call<T, A extends readonly unknown[], R>(
     this: (this: T, ...args: A) => R,
     thisArg: T,
     ...args: A
@@ -396,8 +406,8 @@ interface CallableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args Arguments to bind to the parameters of the function.
    */
-  bind<T, A extends any[], B extends any[], R>(
-    this: (this: T, ...args: [...A, ...B]) => R,
+  bind<T, A extends readonly unknown[], B extends readonly unknown[], R>(
+    this: (this: T, ...args: readonly [...A, ...B]) => R,
     thisArg: T,
     ...args: A
   ): (...args: B) => R;
@@ -414,7 +424,7 @@ interface NewableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args An array of argument values to be passed to the function.
    */
-  apply<T, A extends any[]>(
+  apply<T, A extends readonly unknown[]>(
     this: new (...args: A) => T,
     thisArg: T,
     args: A,
@@ -425,7 +435,7 @@ interface NewableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args Argument values to be passed to the function.
    */
-  call<T, A extends any[]>(
+  call<T, A extends readonly unknown[]>(
     this: new (...args: A) => T,
     thisArg: T,
     ...args: A
@@ -436,7 +446,7 @@ interface NewableFunction extends Function {
    * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
    * @param thisArg The object to be used as the this object.
    */
-  bind<T>(this: T, thisArg: any): T;
+  bind<T>(this: T, thisArg: unknown): T;
 
   /**
    * For a given function, creates a bound function that has the same body as the original function.
@@ -444,17 +454,17 @@ interface NewableFunction extends Function {
    * @param thisArg The object to be used as the this object.
    * @param args Arguments to bind to the parameters of the function.
    */
-  bind<A extends any[], B extends any[], R>(
-    this: new (...args: [...A, ...B]) => R,
-    thisArg: any,
+  bind<A extends readonly unknown[], B extends readonly unknown[], R>(
+    this: new (...args: readonly [...A, ...B]) => R,
+    thisArg: unknown,
     ...args: A
   ): new (...args: B) => R;
 }
 
 interface IArguments {
-  [index: number]: any;
-  length: number;
-  callee: Function;
+  readonly [index: number]: unknown;
+  readonly length: number;
+  readonly callee: Function;
 }
 
 interface String {
@@ -464,6 +474,7 @@ interface String {
   /**
    * Returns the character at the specified index.
    * @param pos The zero-based index of the desired character.
+   * @deprecated Prefer `String#at(...)` over `String#charAt(...)`. eslint(unicorn/prefer-at)
    */
   charAt(pos: number): string;
 
@@ -476,8 +487,9 @@ interface String {
   /**
    * Returns a string that contains the concatenation of two or more strings.
    * @param strings The strings to append to the end of the string.
+   * @deprecated Prefer the spread operator over `Array#concat(...)`. eslint(unicorn/prefer-spread)
    */
-  concat(...strings: string[]): string;
+  concat(...strings: readonly string[]): string;
 
   /**
    * Returns the position of the first occurrence of a substring.
@@ -519,7 +531,7 @@ interface String {
    */
   replace(
     searchValue: string | RegExp,
-    replacer: (substring: string, ...args: any[]) => string,
+    replacer: (substring: string, ...args: readonly unknown[]) => string,
   ): string;
 
   /**
@@ -555,13 +567,13 @@ interface String {
   toLowerCase(): string;
 
   /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
-  toLocaleLowerCase(locales?: string | string[]): string;
+  toLocaleLowerCase(locales?: string | readonly string[]): string;
 
   /** Converts all the alphabetic characters in a string to uppercase. */
   toUpperCase(): string;
 
   /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
-  toLocaleUpperCase(locales?: string | string[]): string;
+  toLocaleUpperCase(locales?: string | readonly string[]): string;
 
   /** Removes the leading and trailing white space and line terminator characters from a string. */
   trim(): string;
@@ -585,16 +597,18 @@ interface String {
 }
 
 interface StringConstructor {
-  new (value?: any): String;
-  (value?: any): string;
+  /** @deprecated Don't use String constructor */
+  new (value?: unknown): String;
+  /** @deprecated Don't use String constructor */
+  (value?: unknown): string;
   readonly prototype: String;
-  fromCharCode(...codes: number[]): string;
+  fromCharCode(...codes: readonly number[]): string;
 }
 
 /**
  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.
  */
-declare var String: StringConstructor;
+declare const String: StringConstructor;
 
 interface Boolean {
   /** Returns the primitive value of the specified object. */
@@ -602,45 +616,48 @@ interface Boolean {
 }
 
 interface BooleanConstructor {
-  new (value?: any): Boolean;
+  /** @deprecated Don't use Boolean constructor */
+  new (value?: unknown): Boolean;
+  /** @deprecated Don't use Boolean constructor */
   <T>(value?: T): boolean;
   readonly prototype: Boolean;
 }
 
-declare var Boolean: BooleanConstructor;
+declare const Boolean: BooleanConstructor;
 
 interface Number {
   /**
    * Returns a string representation of an object.
    * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
    */
-  toString(radix?: number): string;
+  toString(radix?: UintRange<2, 37>): string;
 
   /**
    * Returns a string representing a number in fixed-point notation.
    * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
    */
-  toFixed(fractionDigits?: number): string;
+  toFixed(fractionDigits?: UintRange<0, 101>): string;
 
   /**
    * Returns a string containing a number represented in exponential notation.
    * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
    */
-  toExponential(fractionDigits?: number): string;
+  toExponential(fractionDigits?: UintRange<1, 101>): string;
 
   /**
    * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
    * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
    */
-  toPrecision(precision?: number): string;
+  toPrecision(precision?: UintRange<1, 101>): string;
 
   /** Returns the primitive value of the specified object. */
   valueOf(): number;
 }
 
 interface NumberConstructor {
-  new (value?: any): Number;
-  (value?: any): number;
+  /** @deprecated Don't use Number constructor */
+  new (value?: unknown): Number;
+  (value?: unknown): number;
   readonly prototype: Number;
 
   /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */
@@ -669,7 +686,7 @@ interface NumberConstructor {
 }
 
 /** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */
-declare var Number: NumberConstructor;
+declare const Number: NumberConstructor;
 
 interface TemplateStringsArray extends ReadonlyArray<string> {
   readonly raw: readonly string[];
@@ -690,8 +707,8 @@ interface ImportMeta {}
  * augmented via interface merging.
  */
 interface ImportCallOptions {
-  /** @deprecated*/ assert?: ImportAssertions;
-  with?: ImportAttributes;
+  /** @deprecated*/ readonly assert?: ImportAssertions;
+  readonly with?: ImportAttributes;
 }
 
 /**
@@ -699,14 +716,14 @@ interface ImportCallOptions {
  * @deprecated
  */
 interface ImportAssertions {
-  [key: string]: string;
+  readonly [key: string]: string;
 }
 
 /**
  * The type for the `with` property of the optional second argument to `import()`.
  */
 interface ImportAttributes {
-  [key: string]: string;
+  readonly [key: string]: string;
 }
 
 interface Math {
@@ -731,6 +748,7 @@ interface Math {
    * For example, the absolute value of -5 is the same as the absolute value of 5.
    * @param x A numeric expression for which the absolute value is needed.
    */
+  abs<N extends number>(x: N): AbsoluteValue<N>;
   abs(x: number): number;
   /**
    * Returns the arc cosine (or inverse cosine) of a number.
@@ -782,12 +800,12 @@ interface Math {
    * Returns the larger of a set of supplied numeric expressions.
    * @param values Numeric expressions to be evaluated.
    */
-  max(...values: number[]): number;
+  max(...values: readonly number[]): number;
   /**
    * Returns the smaller of a set of supplied numeric expressions.
    * @param values Numeric expressions to be evaluated.
    */
-  min(...values: number[]): number;
+  min(...values: readonly number[]): number;
   /**
    * Returns the value of a base expression taken to a specified power.
    * @param x The base value of the expression.
@@ -818,7 +836,7 @@ interface Math {
   tan(x: number): number;
 }
 /** An intrinsic object that provides basic mathematics functionality and constants. */
-declare var Math: Math;
+declare const Math: Math;
 
 /** Enables basic storage and retrieval of dates and times. */
 interface Date {
@@ -843,33 +861,33 @@ interface Date {
   /** Gets the year using Universal Coordinated Time (UTC). */
   getUTCFullYear(): number;
   /** Gets the month, using local time. */
-  getMonth(): number;
+  getMonth(): MonthIndexEnum;
   /** Gets the month of a Date object using Universal Coordinated Time (UTC). */
-  getUTCMonth(): number;
+  getUTCMonth(): MonthIndexEnum;
   /** Gets the day-of-the-month, using local time. */
-  getDate(): number;
+  getDate(): DateEnum;
   /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */
-  getUTCDate(): number;
+  getUTCDate(): DateEnum;
   /** Gets the day of the week, using local time. */
-  getDay(): number;
+  getDay(): DayOfWeekIndex;
   /** Gets the day of the week using Universal Coordinated Time (UTC). */
-  getUTCDay(): number;
+  getUTCDay(): DayOfWeekIndex;
   /** Gets the hours in a date, using local time. */
-  getHours(): number;
+  getHours(): HoursEnum;
   /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */
-  getUTCHours(): number;
+  getUTCHours(): HoursEnum;
   /** Gets the minutes of a Date object, using local time. */
-  getMinutes(): number;
+  getMinutes(): MinutesEnum;
   /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */
-  getUTCMinutes(): number;
+  getUTCMinutes(): MinutesEnum;
   /** Gets the seconds of a Date object, using local time. */
-  getSeconds(): number;
+  getSeconds(): SecondsEnum;
   /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */
-  getUTCSeconds(): number;
+  getUTCSeconds(): SecondsEnum;
   /** Gets the milliseconds of a Date, using local time. */
-  getMilliseconds(): number;
+  getMilliseconds(): MillisecondsEnum;
   /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */
-  getUTCMilliseconds(): number;
+  getUTCMilliseconds(): MillisecondsEnum;
   /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */
   getTimezoneOffset(): number;
   /**
@@ -971,7 +989,7 @@ interface Date {
   /** Returns a date as a string value in ISO format. */
   toISOString(): string;
   /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */
-  toJSON(key?: any): string;
+  toJSON(key?: unknown): string;
 }
 
 interface DateConstructor {
@@ -989,12 +1007,12 @@ interface DateConstructor {
    */
   new (
     year: number,
-    monthIndex: number,
-    date?: number,
-    hours?: number,
-    minutes?: number,
-    seconds?: number,
-    ms?: number,
+    monthIndex: MonthIndexEnum,
+    date?: DateEnum,
+    hours?: HoursEnum,
+    minutes?: MinutesEnum,
+    seconds?: SecondsEnum,
+    ms?: MillisecondsEnum,
   ): Date;
   (): string;
   readonly prototype: Date;
@@ -1015,47 +1033,47 @@ interface DateConstructor {
    */
   UTC(
     year: number,
-    monthIndex: number,
-    date?: number,
-    hours?: number,
-    minutes?: number,
-    seconds?: number,
-    ms?: number,
+    monthIndex: MonthIndexEnum,
+    date?: DateEnum,
+    hours?: HoursEnum,
+    minutes?: MinutesEnum,
+    seconds?: SecondsEnum,
+    ms?: MillisecondsEnum,
   ): number;
   /** Returns the number of milliseconds elapsed since midnight, January 1, 1970 Universal Coordinated Time (UTC). */
   now(): number;
 }
 
-declare var Date: DateConstructor;
+declare const Date: DateConstructor;
 
 interface RegExpMatchArray extends Array<string> {
   /**
    * The index of the search at which the result was found.
    */
-  index?: number;
+  readonly index?: number;
   /**
    * A copy of the search string.
    */
-  input?: string;
+  readonly input?: string;
   /**
    * The first match. This will always be present because `null` will be returned if there are no matches.
    */
-  0: string;
+  readonly 0: string;
 }
 
 interface RegExpExecArray extends Array<string> {
   /**
    * The index of the search at which the result was found.
    */
-  index: number;
+  readonly index: number;
   /**
    * A copy of the search string.
    */
-  input: string;
+  readonly input: string;
   /**
    * The first match. This will always be present because `null` will be returned if there are no matches.
    */
-  0: string;
+  readonly 0: string;
 }
 
 interface RegExp {
@@ -1083,7 +1101,7 @@ interface RegExp {
   /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */
   readonly multiline: boolean;
 
-  lastIndex: number;
+  readonly lastIndex: number;
 
   // Non-standard extensions
   /** @deprecated A legacy feature for browser compatibility */
@@ -1099,50 +1117,50 @@ interface RegExpConstructor {
 
   // Non-standard extensions
   /** @deprecated A legacy feature for browser compatibility */
-  $1: string;
+  readonly $1: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $2: string;
+  readonly $2: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $3: string;
+  readonly $3: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $4: string;
+  readonly $4: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $5: string;
+  readonly $5: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $6: string;
+  readonly $6: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $7: string;
+  readonly $7: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $8: string;
+  readonly $8: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $9: string;
+  readonly $9: string;
   /** @deprecated A legacy feature for browser compatibility */
-  input: string;
+  readonly input: string;
   /** @deprecated A legacy feature for browser compatibility */
-  $_: string;
+  readonly $_: string;
   /** @deprecated A legacy feature for browser compatibility */
-  lastMatch: string;
+  readonly lastMatch: string;
   /** @deprecated A legacy feature for browser compatibility */
-  '$&': string;
+  readonly '$&': string;
   /** @deprecated A legacy feature for browser compatibility */
-  lastParen: string;
+  readonly lastParen: string;
   /** @deprecated A legacy feature for browser compatibility */
-  '$+': string;
+  readonly '$+': string;
   /** @deprecated A legacy feature for browser compatibility */
-  leftContext: string;
+  readonly leftContext: string;
   /** @deprecated A legacy feature for browser compatibility */
-  '$`': string;
+  readonly '$`': string;
   /** @deprecated A legacy feature for browser compatibility */
-  rightContext: string;
+  readonly rightContext: string;
   /** @deprecated A legacy feature for browser compatibility */
-  "$'": string;
+  readonly "$'": string;
 }
 
-declare var RegExp: RegExpConstructor;
+declare const RegExp: RegExpConstructor;
 
 interface Error {
   name: string;
-  message: string;
+  readonly message: string;
   stack?: string;
 }
 
@@ -1152,7 +1170,7 @@ interface ErrorConstructor {
   readonly prototype: Error;
 }
 
-declare var Error: ErrorConstructor;
+declare const Error: ErrorConstructor;
 
 interface EvalError extends Error {}
 
@@ -1162,7 +1180,7 @@ interface EvalErrorConstructor extends ErrorConstructor {
   readonly prototype: EvalError;
 }
 
-declare var EvalError: EvalErrorConstructor;
+declare const EvalError: EvalErrorConstructor;
 
 interface RangeError extends Error {}
 
@@ -1172,7 +1190,7 @@ interface RangeErrorConstructor extends ErrorConstructor {
   readonly prototype: RangeError;
 }
 
-declare var RangeError: RangeErrorConstructor;
+declare const RangeError: RangeErrorConstructor;
 
 interface ReferenceError extends Error {}
 
@@ -1182,7 +1200,7 @@ interface ReferenceErrorConstructor extends ErrorConstructor {
   readonly prototype: ReferenceError;
 }
 
-declare var ReferenceError: ReferenceErrorConstructor;
+declare const ReferenceError: ReferenceErrorConstructor;
 
 interface SyntaxError extends Error {}
 
@@ -1192,7 +1210,7 @@ interface SyntaxErrorConstructor extends ErrorConstructor {
   readonly prototype: SyntaxError;
 }
 
-declare var SyntaxError: SyntaxErrorConstructor;
+declare const SyntaxError: SyntaxErrorConstructor;
 
 interface TypeError extends Error {}
 
@@ -1202,7 +1220,7 @@ interface TypeErrorConstructor extends ErrorConstructor {
   readonly prototype: TypeError;
 }
 
-declare var TypeError: TypeErrorConstructor;
+declare const TypeError: TypeErrorConstructor;
 
 interface URIError extends Error {}
 
@@ -1212,7 +1230,7 @@ interface URIErrorConstructor extends ErrorConstructor {
   readonly prototype: URIError;
 }
 
-declare var URIError: URIErrorConstructor;
+declare const URIError: URIErrorConstructor;
 
 interface JSON {
   /**
@@ -1223,8 +1241,8 @@ interface JSON {
    */
   parse(
     text: string,
-    reviver?: (this: any, key: string, value: any) => any,
-  ): any;
+    reviver?: (this: unknown, key: string, value: unknown) => unknown,
+  ): MutableJsonValue;
   /**
    * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
    * @param value A JavaScript value, usually an object or array, to be converted.
@@ -1232,9 +1250,9 @@ interface JSON {
    * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
    */
   stringify(
-    value: any,
-    replacer?: (this: any, key: string, value: any) => any,
-    space?: string | number,
+    value: unknown,
+    replacer?: (this: unknown, key: string, value: unknown) => unknown,
+    space?: string | UintRange<1, 11>,
   ): string;
   /**
    * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
@@ -1243,16 +1261,16 @@ interface JSON {
    * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
    */
   stringify(
-    value: any,
-    replacer?: (number | string)[] | null,
-    space?: string | number,
+    value: unknown,
+    replacer?: readonly (number | string)[] | null,
+    space?: string | UintRange<1, 11>,
   ): string;
 }
 
 /**
  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
  */
-declare var JSON: JSON;
+declare const JSON: JSON;
 
 /////////////////////////////
 /// ECMAScript Array API (specially handled by compiler)
@@ -1262,7 +1280,8 @@ interface ReadonlyArray<T> {
   /**
    * Gets the length of the array. This is a number one higher than the highest element defined in an array.
    */
-  readonly length: number;
+  // This is already defined in ts-type-utils.
+  // readonly length: number;
   /**
    * Returns a string representation of an array.
    */
@@ -1275,12 +1294,12 @@ interface ReadonlyArray<T> {
    * Combines two or more arrays.
    * @param items Additional items to add to the end of array1.
    */
-  concat(...items: ConcatArray<T>[]): T[];
+  concat(...items: readonly ConcatArray<T>[]): T[];
   /**
    * Combines two or more arrays.
    * @param items Additional items to add to the end of array1.
    */
-  concat(...items: (T | ConcatArray<T>)[]): T[];
+  concat(...items: readonly (T | ConcatArray<T>)[]): T[];
   /**
    * Adds all the elements of an array separated by the specified separator string.
    * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
@@ -1314,7 +1333,7 @@ interface ReadonlyArray<T> {
    */
   every<S extends T>(
     predicate: (value: T, index: number, array: readonly T[]) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): this is readonly S[];
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -1325,8 +1344,8 @@ interface ReadonlyArray<T> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): boolean;
   /**
    * Determines whether the specified callback function returns true for any element of an array.
@@ -1337,8 +1356,8 @@ interface ReadonlyArray<T> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): boolean;
   /**
    * Performs the specified action for each element in an array.
@@ -1347,7 +1366,7 @@ interface ReadonlyArray<T> {
    */
   forEach(
     callbackfn: (value: T, index: number, array: readonly T[]) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
   /**
    * Calls a defined callback function on each element of an array, and returns an array that contains the results.
@@ -1356,7 +1375,7 @@ interface ReadonlyArray<T> {
    */
   map<U>(
     callbackfn: (value: T, index: number, array: readonly T[]) => U,
-    thisArg?: any,
+    thisArg?: unknown,
   ): U[];
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -1365,7 +1384,7 @@ interface ReadonlyArray<T> {
    */
   filter<S extends T>(
     predicate: (value: T, index: number, array: readonly T[]) => value is S,
-    thisArg?: any,
+    thisArg?: unknown,
   ): S[];
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -1373,8 +1392,8 @@ interface ReadonlyArray<T> {
    * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T[];
   /**
    * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
@@ -1449,7 +1468,8 @@ interface ReadonlyArray<T> {
     initialValue: U,
   ): U;
 
-  readonly [n: number]: T;
+  // This is already defined in ts-type-utils.
+  // readonly [n: number]: T;
 }
 
 interface ConcatArray<T> {
@@ -1463,7 +1483,8 @@ interface Array<T> {
   /**
    * Gets or sets the length of the array. This is a number one higher than the highest index in the array.
    */
-  length: number;
+  // This is already defined in ts-type-utils.
+  // readonly length: number;
   /**
    * Returns a string representation of an array.
    */
@@ -1481,19 +1502,19 @@ interface Array<T> {
    * Appends new elements to the end of an array, and returns the new length of the array.
    * @param items New elements to add to the array.
    */
-  push(...items: T[]): number;
+  push(...items: readonly T[]): number;
   /**
    * Combines two or more arrays.
    * This method returns a new array without modifying any existing arrays.
    * @param items Additional arrays and/or items to add to the end of the array.
    */
-  concat(...items: ConcatArray<T>[]): T[];
+  concat(...items: readonly ConcatArray<T>[]): T[];
   /**
    * Combines two or more arrays.
    * This method returns a new array without modifying any existing arrays.
    * @param items Additional arrays and/or items to add to the end of the array.
    */
-  concat(...items: (T | ConcatArray<T>)[]): T[];
+  concat(...items: readonly (T | ConcatArray<T>)[]): T[];
   /**
    * Adds all the elements of an array into a string, separated by the specified separator string.
    * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.
@@ -1544,12 +1565,12 @@ interface Array<T> {
    * @param items Elements to insert into the array in place of the deleted elements.
    * @returns An array containing the elements that were deleted.
    */
-  splice(start: number, deleteCount: number, ...items: T[]): T[];
+  splice(start: number, deleteCount: number, ...items: readonly T[]): T[];
   /**
    * Inserts new elements at the start of an array, and returns the new length of the array.
    * @param items Elements to insert at the start of the array.
    */
-  unshift(...items: T[]): number;
+  unshift(...items: readonly T[]): number;
   /**
    * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.
    * @param searchElement The value to locate in the array.
@@ -1571,8 +1592,8 @@ interface Array<T> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every<S extends T>(
-    predicate: (value: T, index: number, array: T[]) => value is S,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => value is S,
+    thisArg?: unknown,
   ): this is S[];
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -1583,8 +1604,8 @@ interface Array<T> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): boolean;
   /**
    * Determines whether the specified callback function returns true for any element of an array.
@@ -1595,8 +1616,8 @@ interface Array<T> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): boolean;
   /**
    * Performs the specified action for each element in an array.
@@ -1604,8 +1625,8 @@ interface Array<T> {
    * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
    */
   forEach(
-    callbackfn: (value: T, index: number, array: T[]) => void,
-    thisArg?: any,
+    callbackfn: (value: T, index: number, array: readonly T[]) => void,
+    thisArg?: unknown,
   ): void;
   /**
    * Calls a defined callback function on each element of an array, and returns an array that contains the results.
@@ -1613,8 +1634,8 @@ interface Array<T> {
    * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
    */
   map<U>(
-    callbackfn: (value: T, index: number, array: T[]) => U,
-    thisArg?: any,
+    callbackfn: (value: T, index: number, array: readonly T[]) => U,
+    thisArg?: unknown,
   ): U[];
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -1622,8 +1643,8 @@ interface Array<T> {
    * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
    */
   filter<S extends T>(
-    predicate: (value: T, index: number, array: T[]) => value is S,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => value is S,
+    thisArg?: unknown,
   ): S[];
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -1631,8 +1652,8 @@ interface Array<T> {
    * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (value: T, index: number, array: readonly T[]) => boolean,
+    thisArg?: unknown,
   ): T[];
   /**
    * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
@@ -1644,7 +1665,7 @@ interface Array<T> {
       previousValue: T,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => T,
   ): T;
   reduce(
@@ -1652,7 +1673,7 @@ interface Array<T> {
       previousValue: T,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => T,
     initialValue: T,
   ): T;
@@ -1666,7 +1687,7 @@ interface Array<T> {
       previousValue: U,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => U,
     initialValue: U,
   ): U;
@@ -1680,7 +1701,7 @@ interface Array<T> {
       previousValue: T,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => T,
   ): T;
   reduceRight(
@@ -1688,7 +1709,7 @@ interface Array<T> {
       previousValue: T,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => T,
     initialValue: T,
   ): T;
@@ -1702,40 +1723,47 @@ interface Array<T> {
       previousValue: U,
       currentValue: T,
       currentIndex: number,
-      array: T[],
+      array: readonly T[],
     ) => U,
     initialValue: U,
   ): U;
 
-  [n: number]: T;
+  // This is already defined in ts-type-utils.
+  // [n: number]: T;
 }
 
 interface ArrayConstructor {
-  new (arrayLength?: number): any[];
+  /** @deprecated use `Array.from({ length })` instead */
+  new (arrayLength?: number): unknown[];
+  /** @deprecated use `Array.from({ length })` instead */
   new <T>(arrayLength: number): T[];
-  new <T>(...items: T[]): T[];
-  (arrayLength?: number): any[];
+  /** @deprecated use `[...items]` instead */
+  new <T>(...items: readonly T[]): T[];
+  /** @deprecated use `Array.from({ length })` instead */
+  (arrayLength?: number): unknown[];
+  /** @deprecated use `Array.from({ length })` instead */
   <T>(arrayLength: number): T[];
-  <T>(...items: T[]): T[];
-  isArray(arg: any): arg is any[];
-  readonly prototype: any[];
+  /** @deprecated use `[...items]` instead */
+  <T>(...items: readonly T[]): T[];
+  isArray(arg: unknown): arg is unknown[];
+  readonly prototype: readonly unknown[];
 }
 
-declare var Array: ArrayConstructor;
+declare const Array: ArrayConstructor;
 
 interface TypedPropertyDescriptor<T> {
-  enumerable?: boolean;
-  configurable?: boolean;
-  writable?: boolean;
-  value?: T;
-  get?: () => T;
-  set?: (value: T) => void;
+  readonly enumerable?: boolean;
+  readonly configurable?: boolean;
+  readonly writable?: boolean;
+  readonly value?: T;
+  readonly get?: () => T;
+  readonly set?: (value: T) => void;
 }
 
 declare type PromiseConstructorLike = new <T>(
   executor: (
     resolve: (value: T | PromiseLike<T>) => void,
-    reject: (reason?: any) => void,
+    reject: (reason?: unknown) => void,
   ) => void,
 ) => PromiseLike<T>;
 
@@ -1752,7 +1780,7 @@ interface PromiseLike<T> {
       | undefined
       | null,
     onrejected?:
-      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
+      | ((reason: unknown) => TResult2 | PromiseLike<TResult2>)
       | undefined
       | null,
   ): PromiseLike<TResult1 | TResult2>;
@@ -1774,7 +1802,7 @@ interface Promise<T> {
       | undefined
       | null,
     onrejected?:
-      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
+      | ((reason: unknown) => TResult2 | PromiseLike<TResult2>)
       | undefined
       | null,
   ): Promise<TResult1 | TResult2>;
@@ -1786,7 +1814,7 @@ interface Promise<T> {
    */
   catch<TResult = never>(
     onrejected?:
-      | ((reason: any) => TResult | PromiseLike<TResult>)
+      | ((reason: unknown) => TResult | PromiseLike<TResult>)
       | undefined
       | null,
   ): Promise<T | TResult>;
@@ -1797,8 +1825,8 @@ interface Promise<T> {
  */
 type Awaited<T> = T extends null | undefined
   ? T // special case for `null | undefined` when not in `--strictNullChecks` mode
-  : T extends object & { then(onfulfilled: infer F, ...args: infer _): any } // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped
-    ? F extends (value: infer V, ...args: infer _) => any // if the argument to `then` is callable, extracts the first argument
+  : T extends object & { then(onfulfilled: infer F, ...args: infer _): unknown } // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped
+    ? F extends (value: infer V, ...args: infer _) => unknown // if the argument to `then` is callable, extracts the first argument
       ? Awaited<V> // recursively unwrap the value
       : never // the argument to `then` was not callable
     : T; // non-object or non-thenable
@@ -1811,52 +1839,60 @@ interface ArrayLike<T> {
 /**
  * Make all properties in T optional
  */
-type Partial<T> = {
-  [P in keyof T]?: T[P];
-};
+// This is already defined in ts-type-utils.
+// type Partial<T> = {
+//   [P in keyof T]?: T[P];
+// };
 
 /**
  * Make all properties in T required
  */
-type Required<T> = {
-  [P in keyof T]-?: T[P];
-};
+// This is already defined in ts-type-utils.
+// type Required<T> = {
+//   [P in keyof T]-?: T[P];
+// };
 
 /**
  * Make all properties in T readonly
  */
-type Readonly<T> = {
-  readonly [P in keyof T]: T[P];
-};
+// This is already defined in ts-type-utils.
+// type Readonly<T> = {
+//   readonly [P in keyof T]: T[P];
+// };
 
 /**
  * From T, pick a set of properties whose keys are in the union K
  */
-type Pick<T, K extends keyof T> = {
-  [P in K]: T[P];
-};
+// This is already defined in ts-type-utils.
+// type Pick<T, K extends keyof T> = {
+//   [P in K]: T[P];
+// };
 
 /**
  * Construct a type with a set of properties K of type T
  */
-type Record<K extends keyof any, T> = {
-  [P in K]: T;
-};
+// This is already defined in ts-type-utils.
+// type Record<K extends keyof never, T> = {
+//   readonly [P in K]: T;
+// };
 
 /**
  * Exclude from T those types that are assignable to U
  */
-type Exclude<T, U> = T extends U ? never : T;
+// This is already defined in ts-type-utils.
+// type Exclude<T, U extends T> = T extends U ? never : T;
 
 /**
  * Extract from T those types that are assignable to U
  */
-type Extract<T, U> = T extends U ? T : never;
+// This is already defined in ts-type-utils.
+// type Extract<T, U> = T extends U ? T : never;
 
 /**
  * Construct a type with the properties of T except for those in type K.
  */
-type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;
+// This is already defined in ts-type-utils.
+// type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
 
 /**
  * Exclude null and undefined from T
@@ -1866,37 +1902,34 @@ type NonNullable<T> = T & {};
 /**
  * Obtain the parameters of a function type in a tuple
  */
-type Parameters<T extends (...args: any) => any> = T extends (
-  ...args: infer P
-) => any
-  ? P
-  : never;
+// This is already defined in ts-type-utils.
+// type Parameters<T extends (...args: readonly never[]) => unknown> = T extends (...args: infer P) => unknown ? P : never;
 
 /**
  * Obtain the parameters of a constructor function type in a tuple
  */
-type ConstructorParameters<T extends abstract new (...args: any) => any> =
-  T extends abstract new (...args: infer P) => any ? P : never;
+type ConstructorParameters<
+  T extends abstract new (...args: readonly never[]) => unknown,
+> = T extends abstract new (...args: infer P) => unknown ? P : never;
 
 /**
  * Obtain the return type of a function type
  */
-type ReturnType<T extends (...args: any) => any> = T extends (
-  ...args: any
-) => infer R
-  ? R
-  : any;
+// This is already defined in ts-type-utils.
+// type ReturnType<T extends (...args: readonly never[]) => unknown> = T extends (...args: readonly never[]) => infer R ? R : unknown;
 
 /**
  * Obtain the return type of a constructor function type
  */
-type InstanceType<T extends abstract new (...args: any) => any> =
-  T extends abstract new (...args: any) => infer R ? R : any;
+type InstanceType<
+  T extends abstract new (...args: readonly never[]) => unknown,
+> = T extends abstract new (...args: readonly never[]) => infer R ? R : unknown;
 
 /**
  * Convert string literal type to uppercase
  */
-type Uppercase<S extends string> = intrinsic;
+// This is already defined in ts-type-utils.
+// type Uppercase<S extends string> = intrinsic;
 
 /**
  * Convert string literal type to lowercase
@@ -1927,7 +1960,7 @@ interface ThisType<T> {}
  * Stores types to be used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry
  */
 interface WeakKeyTypes {
-  object: object;
+  readonly object: object;
 }
 
 type WeakKey = WeakKeyTypes[keyof WeakKeyTypes];
@@ -1954,16 +1987,16 @@ interface ArrayBuffer {
  * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.
  */
 interface ArrayBufferTypes {
-  ArrayBuffer: ArrayBuffer;
+  readonly ArrayBuffer: ArrayBuffer;
 }
 type ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];
 
 interface ArrayBufferConstructor {
   readonly prototype: ArrayBuffer;
   new (byteLength: number): ArrayBuffer;
-  isView(arg: any): arg is ArrayBufferView;
+  isView(arg: unknown): arg is ArrayBufferView;
 }
-declare var ArrayBuffer: ArrayBufferConstructor;
+declare const ArrayBuffer: ArrayBufferConstructor;
 
 interface ArrayBufferView<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
@@ -2009,7 +2042,7 @@ interface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * no alignment constraint; multi-byte values may be fetched from any offset.
    * @param byteOffset The place in the buffer at which the value should be retrieved.
    */
-  getInt8(byteOffset: number): number;
+  getInt8(byteOffset: number): Int8;
 
   /**
    * Gets the Int16 value at the specified byte offset from the start of the view. There is
@@ -2031,7 +2064,7 @@ interface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * no alignment constraint; multi-byte values may be fetched from any offset.
    * @param byteOffset The place in the buffer at which the value should be retrieved.
    */
-  getUint8(byteOffset: number): number;
+  getUint8(byteOffset: number): Uint8;
 
   /**
    * Gets the Uint16 value at the specified byte offset from the start of the view. There is
@@ -2070,7 +2103,7 @@ interface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param byteOffset The place in the buffer at which the value should be set.
    * @param value The value to set.
    */
-  setInt8(byteOffset: number, value: number): void;
+  setInt8(byteOffset: number, value: Int8): void;
 
   /**
    * Stores an Int16 value at the specified byte offset from the start of the view.
@@ -2093,7 +2126,7 @@ interface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param byteOffset The place in the buffer at which the value should be set.
    * @param value The value to set.
    */
-  setUint8(byteOffset: number, value: number): void;
+  setUint8(byteOffset: number, value: Uint8): void;
 
   /**
    * Stores an Uint16 value at the specified byte offset from the start of the view.
@@ -2113,13 +2146,17 @@ interface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
 }
 interface DataViewConstructor {
   readonly prototype: DataView<ArrayBufferLike>;
-  new <TArrayBuffer extends ArrayBufferLike & { BYTES_PER_ELEMENT?: never }>(
+  new <
+    TArrayBuffer extends ArrayBufferLike & {
+      readonly BYTES_PER_ELEMENT?: never;
+    },
+  >(
     buffer: TArrayBuffer,
     byteOffset?: number,
     byteLength?: number,
   ): DataView<TArrayBuffer>;
 }
-declare var DataView: DataViewConstructor;
+declare const DataView: DataViewConstructor;
 
 /**
  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
@@ -2129,7 +2166,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -2166,8 +2203,8 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Int8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -2178,7 +2215,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param end index to stop filling the array at. If end is negative, it is treated as
    * length+end.
    */
-  fill(value: number, start?: number, end?: number): this;
+  fill(value: Int8, start?: number, end?: number): this;
 
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -2188,8 +2225,8 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: Int8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Int8Array<ArrayBuffer>;
 
   /**
@@ -2202,9 +2239,9 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   find(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Int8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
+  ): Int8 | undefined;
 
   /**
    * Returns the index of the first element in the array where predicate is true, and -1
@@ -2216,8 +2253,8 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findIndex(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    predicate: (value: Int8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -2228,8 +2265,8 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   forEach(
-    callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    callbackfn: (value: Int8, index: number, array: this) => void,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -2238,7 +2275,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    *  search starts at index 0.
    */
-  indexOf(searchElement: number, fromIndex?: number): number;
+  indexOf(searchElement: Int8, fromIndex?: number): number;
 
   /**
    * Adds all the elements of an array separated by the specified separator string.
@@ -2253,7 +2290,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    * search starts at index 0.
    */
-  lastIndexOf(searchElement: number, fromIndex?: number): number;
+  lastIndexOf(searchElement: Int8, fromIndex?: number): number;
 
   /**
    * The length of the array.
@@ -2269,8 +2306,8 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   map(
-    callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    callbackfn: (value: Int8, index: number, array: this) => Int8,
+    thisArg?: unknown,
   ): Int8Array<ArrayBuffer>;
 
   /**
@@ -2285,21 +2322,21 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Int8,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Int8,
+  ): Int8;
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Int8,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Int8,
+    initialValue: Int8,
+  ): Int8;
 
   /**
    * Calls the specified callback function for all the elements in an array. The return value of
@@ -2314,7 +2351,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   reduce<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -2333,21 +2370,21 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Int8,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Int8,
+  ): Int8;
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Int8,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Int8,
+    initialValue: Int8,
+  ): Int8;
 
   /**
    * Calls the specified callback function for all the elements in an array, in descending order.
@@ -2362,7 +2399,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   reduceRight<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Int8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -2379,7 +2416,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param array A typed or untyped array of values to set.
    * @param offset The index in the current array at which the values are to be written.
    */
-  set(array: ArrayLike<number>, offset?: number): void;
+  set(array: ArrayLike<Int8>, offset?: number): void;
 
   /**
    * Returns a section of an array.
@@ -2397,20 +2434,20 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Int8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
    * ```
    */
-  sort(compareFn?: (a: number, b: number) => number): this;
+  sort(compareFn?: (a: Int8, b: Int8) => number): this;
 
   /**
    * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements
@@ -2433,35 +2470,35 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /** Returns the primitive value of the specified object. */
   valueOf(): this;
 
-  [index: number]: number;
+  [index: number]: Int8;
 }
 interface Int8ArrayConstructor {
   readonly prototype: Int8Array<ArrayBufferLike>;
   new (length: number): Int8Array<ArrayBuffer>;
-  new (array: ArrayLike<number>): Int8Array<ArrayBuffer>;
+  new (array: ArrayLike<Int8>): Int8Array<ArrayBuffer>;
   new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(
     buffer: TArrayBuffer,
     byteOffset?: number,
     length?: number,
   ): Int8Array<TArrayBuffer>;
-  new (array: ArrayLike<number> | ArrayBuffer): Int8Array<ArrayBuffer>;
+  new (array: ArrayLike<Int8> | ArrayBuffer): Int8Array<ArrayBuffer>;
 
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Int8Array<ArrayBuffer>;
+  of(...items: readonly Int8[]): Int8Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
    */
-  from(arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>;
+  from(arrayLike: ArrayLike<Int8>): Int8Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -2471,11 +2508,11 @@ interface Int8ArrayConstructor {
    */
   from<T>(
     arrayLike: ArrayLike<T>,
-    mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn: (v: T, k: number) => Int8,
+    thisArg?: unknown,
   ): Int8Array<ArrayBuffer>;
 }
-declare var Int8Array: Int8ArrayConstructor;
+declare const Int8Array: Int8ArrayConstructor;
 
 /**
  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
@@ -2485,7 +2522,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -2522,8 +2559,8 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -2534,7 +2571,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param end index to stop filling the array at. If end is negative, it is treated as
    * length+end.
    */
-  fill(value: number, start?: number, end?: number): this;
+  fill(value: Uint8, start?: number, end?: number): this;
 
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -2544,8 +2581,8 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Uint8Array<ArrayBuffer>;
 
   /**
@@ -2558,9 +2595,9 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   find(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Uint8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the first element in the array where predicate is true, and -1
@@ -2572,8 +2609,8 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findIndex(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -2584,8 +2621,8 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   forEach(
-    callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    callbackfn: (value: Uint8, index: number, array: this) => void,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -2594,7 +2631,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    *  search starts at index 0.
    */
-  indexOf(searchElement: number, fromIndex?: number): number;
+  indexOf(searchElement: Uint8, fromIndex?: number): number;
 
   /**
    * Adds all the elements of an array separated by the specified separator string.
@@ -2609,7 +2646,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    * search starts at index 0.
    */
-  lastIndexOf(searchElement: number, fromIndex?: number): number;
+  lastIndexOf(searchElement: Uint8, fromIndex?: number): number;
 
   /**
    * The length of the array.
@@ -2625,8 +2662,8 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   map(
-    callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    callbackfn: (value: Uint8, index: number, array: this) => Uint8,
+    thisArg?: unknown,
   ): Uint8Array<ArrayBuffer>;
 
   /**
@@ -2641,21 +2678,21 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Uint8,
+  ): Uint8;
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Uint8,
+    initialValue: Uint8,
+  ): Uint8;
 
   /**
    * Calls the specified callback function for all the elements in an array. The return value of
@@ -2670,7 +2707,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   reduce<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -2689,21 +2726,21 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Uint8,
+  ): Uint8;
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Uint8,
+    initialValue: Uint8,
+  ): Uint8;
 
   /**
    * Calls the specified callback function for all the elements in an array, in descending order.
@@ -2718,7 +2755,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   reduceRight<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -2735,7 +2772,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * @param array A typed or untyped array of values to set.
    * @param offset The index in the current array at which the values are to be written.
    */
-  set(array: ArrayLike<number>, offset?: number): void;
+  set(array: ArrayLike<Uint8>, offset?: number): void;
 
   /**
    * Returns a section of an array.
@@ -2753,20 +2790,20 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
    * ```
    */
-  sort(compareFn?: (a: number, b: number) => number): this;
+  sort(compareFn?: (a: Uint8, b: Uint8) => number): this;
 
   /**
    * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements
@@ -2789,35 +2826,35 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /** Returns the primitive value of the specified object. */
   valueOf(): this;
 
-  [index: number]: number;
+  [index: number]: Uint8;
 }
 interface Uint8ArrayConstructor {
   readonly prototype: Uint8Array<ArrayBufferLike>;
   new (length: number): Uint8Array<ArrayBuffer>;
-  new (array: ArrayLike<number>): Uint8Array<ArrayBuffer>;
+  new (array: ArrayLike<Uint8>): Uint8Array<ArrayBuffer>;
   new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(
     buffer: TArrayBuffer,
     byteOffset?: number,
     length?: number,
   ): Uint8Array<TArrayBuffer>;
-  new (array: ArrayLike<number> | ArrayBuffer): Uint8Array<ArrayBuffer>;
+  new (array: ArrayLike<Uint8> | ArrayBuffer): Uint8Array<ArrayBuffer>;
 
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Uint8Array<ArrayBuffer>;
+  of(...items: readonly Uint8[]): Uint8Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
    */
-  from(arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>;
+  from(arrayLike: ArrayLike<Uint8>): Uint8Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -2827,11 +2864,11 @@ interface Uint8ArrayConstructor {
    */
   from<T>(
     arrayLike: ArrayLike<T>,
-    mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8Array<ArrayBuffer>;
 }
-declare var Uint8Array: Uint8ArrayConstructor;
+declare const Uint8Array: Uint8ArrayConstructor;
 
 /**
  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
@@ -2843,7 +2880,7 @@ interface Uint8ClampedArray<
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -2880,8 +2917,8 @@ interface Uint8ClampedArray<
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -2892,7 +2929,7 @@ interface Uint8ClampedArray<
    * @param end index to stop filling the array at. If end is negative, it is treated as
    * length+end.
    */
-  fill(value: number, start?: number, end?: number): this;
+  fill(value: Uint8, start?: number, end?: number): this;
 
   /**
    * Returns the elements of an array that meet the condition specified in a callback function.
@@ -2902,8 +2939,8 @@ interface Uint8ClampedArray<
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Uint8ClampedArray<ArrayBuffer>;
 
   /**
@@ -2916,9 +2953,9 @@ interface Uint8ClampedArray<
    * predicate. If it is not provided, undefined is used instead.
    */
   find(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (value: Uint8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the first element in the array where predicate is true, and -1
@@ -2930,8 +2967,8 @@ interface Uint8ClampedArray<
    * predicate. If it is not provided, undefined is used instead.
    */
   findIndex(
-    predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, obj: this) => boolean,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -2942,8 +2979,8 @@ interface Uint8ClampedArray<
    * If thisArg is omitted, undefined is used as the this value.
    */
   forEach(
-    callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    callbackfn: (value: Uint8, index: number, array: this) => void,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -2952,7 +2989,7 @@ interface Uint8ClampedArray<
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    *  search starts at index 0.
    */
-  indexOf(searchElement: number, fromIndex?: number): number;
+  indexOf(searchElement: Uint8, fromIndex?: number): number;
 
   /**
    * Adds all the elements of an array separated by the specified separator string.
@@ -2967,7 +3004,7 @@ interface Uint8ClampedArray<
    * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
    * search starts at index 0.
    */
-  lastIndexOf(searchElement: number, fromIndex?: number): number;
+  lastIndexOf(searchElement: Uint8, fromIndex?: number): number;
 
   /**
    * The length of the array.
@@ -2983,8 +3020,8 @@ interface Uint8ClampedArray<
    * If thisArg is omitted, undefined is used as the this value.
    */
   map(
-    callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    callbackfn: (value: Uint8, index: number, array: this) => Uint8,
+    thisArg?: unknown,
   ): Uint8ClampedArray<ArrayBuffer>;
 
   /**
@@ -2999,21 +3036,21 @@ interface Uint8ClampedArray<
    */
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Uint8,
+  ): Uint8;
   reduce(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Uint8,
+    initialValue: Uint8,
+  ): Uint8;
 
   /**
    * Calls the specified callback function for all the elements in an array. The return value of
@@ -3028,7 +3065,7 @@ interface Uint8ClampedArray<
   reduce<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -3047,21 +3084,21 @@ interface Uint8ClampedArray<
    */
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-  ): number;
+    ) => Uint8,
+  ): Uint8;
   reduceRight(
     callbackfn: (
-      previousValue: number,
-      currentValue: number,
+      previousValue: Uint8,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
-    ) => number,
-    initialValue: number,
-  ): number;
+    ) => Uint8,
+    initialValue: Uint8,
+  ): Uint8;
 
   /**
    * Calls the specified callback function for all the elements in an array, in descending order.
@@ -3076,7 +3113,7 @@ interface Uint8ClampedArray<
   reduceRight<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: number,
+      currentValue: Uint8,
       currentIndex: number,
       array: this,
     ) => U,
@@ -3093,7 +3130,7 @@ interface Uint8ClampedArray<
    * @param array A typed or untyped array of values to set.
    * @param offset The index in the current array at which the values are to be written.
    */
-  set(array: ArrayLike<number>, offset?: number): void;
+  set(array: ArrayLike<Uint8>, offset?: number): void;
 
   /**
    * Returns a section of an array.
@@ -3111,20 +3148,20 @@ interface Uint8ClampedArray<
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: Uint8, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
    * ```
    */
-  sort(compareFn?: (a: number, b: number) => number): this;
+  sort(compareFn?: (a: Uint8, b: Uint8) => number): this;
 
   /**
    * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements
@@ -3147,35 +3184,35 @@ interface Uint8ClampedArray<
   /** Returns the primitive value of the specified object. */
   valueOf(): this;
 
-  [index: number]: number;
+  [index: number]: Uint8;
 }
 interface Uint8ClampedArrayConstructor {
   readonly prototype: Uint8ClampedArray<ArrayBufferLike>;
   new (length: number): Uint8ClampedArray<ArrayBuffer>;
-  new (array: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>;
+  new (array: ArrayLike<Uint8>): Uint8ClampedArray<ArrayBuffer>;
   new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(
     buffer: TArrayBuffer,
     byteOffset?: number,
     length?: number,
   ): Uint8ClampedArray<TArrayBuffer>;
-  new (array: ArrayLike<number> | ArrayBuffer): Uint8ClampedArray<ArrayBuffer>;
+  new (array: ArrayLike<Uint8> | ArrayBuffer): Uint8ClampedArray<ArrayBuffer>;
 
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 1;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Uint8ClampedArray<ArrayBuffer>;
+  of(...items: readonly Uint8[]): Uint8ClampedArray<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
    * @param arrayLike An array-like or iterable object to convert to an array.
    */
-  from(arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>;
+  from(arrayLike: ArrayLike<Uint8>): Uint8ClampedArray<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -3185,11 +3222,11 @@ interface Uint8ClampedArrayConstructor {
    */
   from<T>(
     arrayLike: ArrayLike<T>,
-    mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    mapfn: (v: T, k: number) => Uint8,
+    thisArg?: unknown,
   ): Uint8ClampedArray<ArrayBuffer>;
 }
-declare var Uint8ClampedArray: Uint8ClampedArrayConstructor;
+declare const Uint8ClampedArray: Uint8ClampedArrayConstructor;
 
 /**
  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
@@ -3199,7 +3236,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 2;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -3236,8 +3273,8 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -3258,8 +3295,8 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Int16Array<ArrayBuffer>;
 
   /**
@@ -3273,7 +3310,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -3287,7 +3324,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -3299,8 +3336,9 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
+
   /**
    * Returns the index of the first occurrence of a value in an array.
    * @param searchElement The value to locate in the array.
@@ -3339,7 +3377,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int16Array<ArrayBuffer>;
 
   /**
@@ -3466,14 +3504,14 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -3518,13 +3556,13 @@ interface Int16ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 2;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Int16Array<ArrayBuffer>;
+  of(...items: readonly number[]): Int16Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -3541,10 +3579,10 @@ interface Int16ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int16Array<ArrayBuffer>;
 }
-declare var Int16Array: Int16ArrayConstructor;
+declare const Int16Array: Int16ArrayConstructor;
 
 /**
  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
@@ -3554,7 +3592,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 2;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -3591,8 +3629,8 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -3613,8 +3651,8 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Uint16Array<ArrayBuffer>;
 
   /**
@@ -3628,7 +3666,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -3642,7 +3680,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -3654,7 +3692,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -3695,7 +3733,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint16Array<ArrayBuffer>;
 
   /**
@@ -3822,14 +3860,14 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -3874,13 +3912,13 @@ interface Uint16ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 2;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Uint16Array<ArrayBuffer>;
+  of(...items: readonly number[]): Uint16Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -3897,10 +3935,10 @@ interface Uint16ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint16Array<ArrayBuffer>;
 }
-declare var Uint16Array: Uint16ArrayConstructor;
+declare const Uint16Array: Uint16ArrayConstructor;
 /**
  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
@@ -3909,7 +3947,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -3946,8 +3984,8 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -3968,8 +4006,8 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Int32Array<ArrayBuffer>;
 
   /**
@@ -3983,7 +4021,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -3997,7 +4035,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -4009,7 +4047,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -4050,7 +4088,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int32Array<ArrayBuffer>;
 
   /**
@@ -4177,14 +4215,14 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -4229,13 +4267,13 @@ interface Int32ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Int32Array<ArrayBuffer>;
+  of(...items: readonly number[]): Int32Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -4252,10 +4290,10 @@ interface Int32ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Int32Array<ArrayBuffer>;
 }
-declare var Int32Array: Int32ArrayConstructor;
+declare const Int32Array: Int32ArrayConstructor;
 
 /**
  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
@@ -4265,7 +4303,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -4302,8 +4340,8 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -4324,8 +4362,8 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Uint32Array<ArrayBuffer>;
 
   /**
@@ -4339,7 +4377,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -4353,7 +4391,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -4365,8 +4403,9 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
+
   /**
    * Returns the index of the first occurrence of a value in an array.
    * @param searchElement The value to locate in the array.
@@ -4405,7 +4444,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint32Array<ArrayBuffer>;
 
   /**
@@ -4532,14 +4571,14 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -4584,13 +4623,13 @@ interface Uint32ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Uint32Array<ArrayBuffer>;
+  of(...items: readonly number[]): Uint32Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -4607,10 +4646,10 @@ interface Uint32ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Uint32Array<ArrayBuffer>;
 }
-declare var Uint32Array: Uint32ArrayConstructor;
+declare const Uint32Array: Uint32ArrayConstructor;
 
 /**
  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
@@ -4620,7 +4659,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -4657,8 +4696,8 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -4679,8 +4718,8 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Float32Array<ArrayBuffer>;
 
   /**
@@ -4694,7 +4733,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -4708,7 +4747,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -4720,7 +4759,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -4761,7 +4800,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float32Array<ArrayBuffer>;
 
   /**
@@ -4888,14 +4927,14 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -4940,13 +4979,13 @@ interface Float32ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 4;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Float32Array<ArrayBuffer>;
+  of(...items: readonly number[]): Float32Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -4963,10 +5002,10 @@ interface Float32ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float32Array<ArrayBuffer>;
 }
-declare var Float32Array: Float32ArrayConstructor;
+declare const Float32Array: Float32ArrayConstructor;
 
 /**
  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested
@@ -4976,7 +5015,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * The ArrayBuffer instance referenced by the array.
@@ -5013,8 +5052,8 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   every(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -5035,8 +5074,8 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   filter(
-    predicate: (value: number, index: number, array: this) => any,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): Float64Array<ArrayBuffer>;
 
   /**
@@ -5050,7 +5089,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   find(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number | undefined;
 
   /**
@@ -5064,7 +5103,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   findIndex(
     predicate: (value: number, index: number, obj: this) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): number;
 
   /**
@@ -5076,7 +5115,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   forEach(
     callbackfn: (value: number, index: number, array: this) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -5117,7 +5156,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    */
   map(
     callbackfn: (value: number, index: number, array: this) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float64Array<ArrayBuffer>;
 
   /**
@@ -5244,14 +5283,14 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {
    * If thisArg is omitted, undefined is used as the this value.
    */
   some(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
+    predicate: (value: number, index: number, array: this) => boolean,
+    thisArg?: unknown,
   ): boolean;
 
   /**
    * Sorts an array.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
-   * a negative value if first argument is less than second argument, zero if they're equal and a positive
+   * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
    * ```ts
    * [11,2,22,1].sort((a, b) => a - b)
@@ -5296,13 +5335,13 @@ interface Float64ArrayConstructor {
   /**
    * The size in bytes of each element in the array.
    */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: number[]): Float64Array<ArrayBuffer>;
+  of(...items: readonly number[]): Float64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -5319,10 +5358,10 @@ interface Float64ArrayConstructor {
   from<T>(
     arrayLike: ArrayLike<T>,
     mapfn: (v: T, k: number) => number,
-    thisArg?: any,
+    thisArg?: unknown,
   ): Float64Array<ArrayBuffer>;
 }
-declare var Float64Array: Float64ArrayConstructor;
+declare const Float64Array: Float64ArrayConstructor;
 
 /////////////////////////////
 /// ECMAScript Internationalization API
@@ -5330,12 +5369,12 @@ declare var Float64Array: Float64ArrayConstructor;
 
 declare namespace Intl {
   interface CollatorOptions {
-    usage?: 'sort' | 'search' | undefined;
-    localeMatcher?: 'lookup' | 'best fit' | undefined;
-    numeric?: boolean | undefined;
-    caseFirst?: 'upper' | 'lower' | 'false' | undefined;
-    sensitivity?: 'base' | 'accent' | 'case' | 'variant' | undefined;
-    collation?:
+    readonly usage?: 'sort' | 'search' | undefined;
+    readonly localeMatcher?: 'lookup' | 'best fit' | undefined;
+    readonly numeric?: boolean | undefined;
+    readonly caseFirst?: 'upper' | 'lower' | 'false' | undefined;
+    readonly sensitivity?: 'base' | 'accent' | 'case' | 'variant' | undefined;
+    readonly collation?:
       | 'big5han'
       | 'compat'
       | 'dict'
@@ -5354,17 +5393,17 @@ declare namespace Intl {
       | 'unihan'
       | 'zhuyin'
       | undefined;
-    ignorePunctuation?: boolean | undefined;
+    readonly ignorePunctuation?: boolean | undefined;
   }
 
   interface ResolvedCollatorOptions {
-    locale: string;
-    usage: string;
-    sensitivity: string;
-    ignorePunctuation: boolean;
-    collation: string;
-    caseFirst: string;
-    numeric: boolean;
+    readonly locale: string;
+    readonly usage: string;
+    readonly sensitivity: string;
+    readonly ignorePunctuation: boolean;
+    readonly collation: string;
+    readonly caseFirst: string;
+    readonly numeric: boolean;
   }
 
   interface Collator {
@@ -5373,28 +5412,31 @@ declare namespace Intl {
   }
 
   interface CollatorConstructor {
-    new (locales?: string | string[], options?: CollatorOptions): Collator;
-    (locales?: string | string[], options?: CollatorOptions): Collator;
+    new (
+      locales?: string | readonly string[],
+      options?: CollatorOptions,
+    ): Collator;
+    (locales?: string | readonly string[], options?: CollatorOptions): Collator;
     supportedLocalesOf(
-      locales: string | string[],
+      locales: string | readonly string[],
       options?: CollatorOptions,
     ): string[];
   }
 
-  var Collator: CollatorConstructor;
+  const Collator: CollatorConstructor;
 
   interface NumberFormatOptionsStyleRegistry {
-    decimal: never;
-    percent: never;
-    currency: never;
+    readonly decimal: never;
+    readonly percent: never;
+    readonly currency: never;
   }
 
   type NumberFormatOptionsStyle = keyof NumberFormatOptionsStyleRegistry;
 
   interface NumberFormatOptionsCurrencyDisplayRegistry {
-    code: never;
-    symbol: never;
-    name: never;
+    readonly code: never;
+    readonly symbol: never;
+    readonly name: never;
   }
 
   type NumberFormatOptionsCurrencyDisplay =
@@ -5416,30 +5458,30 @@ declare namespace Intl {
       : keyof NumberFormatOptionsUseGroupingRegistry | false;
 
   interface NumberFormatOptions {
-    localeMatcher?: 'lookup' | 'best fit' | undefined;
-    style?: NumberFormatOptionsStyle | undefined;
-    currency?: string | undefined;
-    currencyDisplay?: NumberFormatOptionsCurrencyDisplay | undefined;
-    useGrouping?: NumberFormatOptionsUseGrouping | undefined;
-    minimumIntegerDigits?: number | undefined;
-    minimumFractionDigits?: number | undefined;
-    maximumFractionDigits?: number | undefined;
-    minimumSignificantDigits?: number | undefined;
-    maximumSignificantDigits?: number | undefined;
+    readonly localeMatcher?: 'lookup' | 'best fit' | undefined;
+    readonly style?: NumberFormatOptionsStyle | undefined;
+    readonly currency?: string | undefined;
+    readonly currencyDisplay?: NumberFormatOptionsCurrencyDisplay | undefined;
+    readonly useGrouping?: NumberFormatOptionsUseGrouping | undefined;
+    readonly minimumIntegerDigits?: UintRange<1, 22> | undefined;
+    readonly minimumFractionDigits?: UintRange<0, 21> | undefined;
+    readonly maximumFractionDigits?: UintRange<0, 21> | undefined;
+    readonly minimumSignificantDigits?: UintRange<1, 22> | undefined;
+    readonly maximumSignificantDigits?: UintRange<1, 22> | undefined;
   }
 
   interface ResolvedNumberFormatOptions {
-    locale: string;
-    numberingSystem: string;
-    style: NumberFormatOptionsStyle;
-    currency?: string;
-    currencyDisplay?: NumberFormatOptionsCurrencyDisplay;
-    minimumIntegerDigits: number;
-    minimumFractionDigits?: number;
-    maximumFractionDigits?: number;
-    minimumSignificantDigits?: number;
-    maximumSignificantDigits?: number;
-    useGrouping: ResolvedNumberFormatOptionsUseGrouping;
+    readonly locale: string;
+    readonly numberingSystem: string;
+    readonly style: NumberFormatOptionsStyle;
+    readonly currency?: string;
+    readonly currencyDisplay?: NumberFormatOptionsCurrencyDisplay;
+    readonly minimumIntegerDigits: UintRange<1, 22>;
+    readonly minimumFractionDigits?: UintRange<0, 21>;
+    readonly maximumFractionDigits?: UintRange<0, 21>;
+    readonly minimumSignificantDigits?: UintRange<1, 22>;
+    readonly maximumSignificantDigits?: UintRange<1, 22>;
+    readonly useGrouping: ResolvedNumberFormatOptionsUseGrouping;
   }
 
   interface NumberFormat {
@@ -5449,30 +5491,39 @@ declare namespace Intl {
 
   interface NumberFormatConstructor {
     new (
-      locales?: string | string[],
+      locales?: string | readonly string[],
+      options?: NumberFormatOptions,
+    ): NumberFormat;
+    (
+      locales?: string | readonly string[],
       options?: NumberFormatOptions,
     ): NumberFormat;
-    (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
     supportedLocalesOf(
-      locales: string | string[],
+      locales: string | readonly string[],
       options?: NumberFormatOptions,
     ): string[];
     readonly prototype: NumberFormat;
   }
 
-  var NumberFormat: NumberFormatConstructor;
+  const NumberFormat: NumberFormatConstructor;
 
   interface DateTimeFormatOptions {
-    localeMatcher?: 'best fit' | 'lookup' | undefined;
-    weekday?: 'long' | 'short' | 'narrow' | undefined;
-    era?: 'long' | 'short' | 'narrow' | undefined;
-    year?: 'numeric' | '2-digit' | undefined;
-    month?: 'numeric' | '2-digit' | 'long' | 'short' | 'narrow' | undefined;
-    day?: 'numeric' | '2-digit' | undefined;
-    hour?: 'numeric' | '2-digit' | undefined;
-    minute?: 'numeric' | '2-digit' | undefined;
-    second?: 'numeric' | '2-digit' | undefined;
-    timeZoneName?:
+    readonly localeMatcher?: 'best fit' | 'lookup' | undefined;
+    readonly weekday?: 'long' | 'short' | 'narrow' | undefined;
+    readonly era?: 'long' | 'short' | 'narrow' | undefined;
+    readonly year?: 'numeric' | '2-digit' | undefined;
+    readonly month?:
+      | 'numeric'
+      | '2-digit'
+      | 'long'
+      | 'short'
+      | 'narrow'
+      | undefined;
+    readonly day?: 'numeric' | '2-digit' | undefined;
+    readonly hour?: 'numeric' | '2-digit' | undefined;
+    readonly minute?: 'numeric' | '2-digit' | undefined;
+    readonly second?: 'numeric' | '2-digit' | undefined;
+    readonly timeZoneName?:
       | 'short'
       | 'long'
       | 'shortOffset'
@@ -5480,26 +5531,26 @@ declare namespace Intl {
       | 'shortGeneric'
       | 'longGeneric'
       | undefined;
-    formatMatcher?: 'best fit' | 'basic' | undefined;
-    hour12?: boolean | undefined;
-    timeZone?: string | undefined;
+    readonly formatMatcher?: 'best fit' | 'basic' | undefined;
+    readonly hour12?: boolean | undefined;
+    readonly timeZone?: string | undefined;
   }
 
   interface ResolvedDateTimeFormatOptions {
-    locale: string;
-    calendar: string;
-    numberingSystem: string;
-    timeZone: string;
-    hour12?: boolean;
-    weekday?: string;
-    era?: string;
-    year?: string;
-    month?: string;
-    day?: string;
-    hour?: string;
-    minute?: string;
-    second?: string;
-    timeZoneName?: string;
+    readonly locale: string;
+    readonly calendar: string;
+    readonly numberingSystem: string;
+    readonly timeZone: string;
+    readonly hour12?: boolean;
+    readonly weekday?: string;
+    readonly era?: string;
+    readonly year?: string;
+    readonly month?: string;
+    readonly day?: string;
+    readonly hour?: string;
+    readonly minute?: string;
+    readonly second?: string;
+    readonly timeZoneName?: string;
   }
 
   interface DateTimeFormat {
@@ -5509,21 +5560,21 @@ declare namespace Intl {
 
   interface DateTimeFormatConstructor {
     new (
-      locales?: string | string[],
+      locales?: string | readonly string[],
       options?: DateTimeFormatOptions,
     ): DateTimeFormat;
     (
-      locales?: string | string[],
+      locales?: string | readonly string[],
       options?: DateTimeFormatOptions,
     ): DateTimeFormat;
     supportedLocalesOf(
-      locales: string | string[],
+      locales: string | readonly string[],
       options?: DateTimeFormatOptions,
     ): string[];
     readonly prototype: DateTimeFormat;
   }
 
-  var DateTimeFormat: DateTimeFormatConstructor;
+  const DateTimeFormat: DateTimeFormatConstructor;
 }
 
 interface String {
@@ -5535,7 +5586,7 @@ interface String {
    */
   localeCompare(
     that: string,
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.CollatorOptions,
   ): number;
 }
@@ -5547,7 +5598,7 @@ interface Number {
    * @param options An object that contains one or more properties that specify comparison options.
    */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 }
@@ -5559,7 +5610,7 @@ interface Date {
    * @param options An object that contains one or more properties that specify comparison options.
    */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.DateTimeFormatOptions,
   ): string;
   /**
@@ -5568,7 +5619,7 @@ interface Date {
    * @param options An object that contains one or more properties that specify comparison options.
    */
   toLocaleDateString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.DateTimeFormatOptions,
   ): string;
 
@@ -5578,7 +5629,13 @@ interface Date {
    * @param options An object that contains one or more properties that specify comparison options.
    */
   toLocaleTimeString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.DateTimeFormatOptions,
   ): string;
 }
+
+type RawDateMutType = Date;
+
+type RawDateType = Readonly<RawDateMutType>;
+
+type TimerId = ReturnType<typeof setTimeout>; // NodeJS.Timeout or number
