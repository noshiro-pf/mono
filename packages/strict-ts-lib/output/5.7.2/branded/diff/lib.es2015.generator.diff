@@ -1,28 +1,14 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.iterable" />
+/// <reference path="./lib.es2015.iterable.d.ts" />
 
-interface Generator<T = unknown, TReturn = any, TNext = any>
+interface Generator<T = unknown, TReturn = any, TNext = unknown>
   extends IteratorObject<T, TReturn, TNext> {
   // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
-  next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;
+  next(...[value]: readonly [] | readonly [TNext]): IteratorResult<T, TReturn>;
   return(value: TReturn): IteratorResult<T, TReturn>;
-  throw(e: any): IteratorResult<T, TReturn>;
+  throw(e: unknown): IteratorResult<T, TReturn>;
   [Symbol.iterator](): Generator<T, TReturn, TNext>;
 }
 
@@ -31,16 +17,16 @@ interface GeneratorFunction {
    * Creates a new Generator object.
    * @param args A list of arguments the function accepts.
    */
-  new (...args: any[]): Generator;
+  new (...args: readonly unknown[]): Generator;
   /**
    * Creates a new Generator object.
    * @param args A list of arguments the function accepts.
    */
-  (...args: any[]): Generator;
+  (...args: readonly unknown[]): Generator;
   /**
    * The length of the arguments.
    */
-  readonly length: number;
+  readonly length: NumberType.ArraySize;
   /**
    * Returns the name of the function.
    */
@@ -56,16 +42,16 @@ interface GeneratorFunctionConstructor {
    * Creates a new Generator function.
    * @param args A list of arguments the function accepts.
    */
-  new (...args: string[]): GeneratorFunction;
+  new (...args: readonly string[]): GeneratorFunction;
   /**
    * Creates a new Generator function.
    * @param args A list of arguments the function accepts.
    */
-  (...args: string[]): GeneratorFunction;
+  (...args: readonly string[]): GeneratorFunction;
   /**
    * The length of the arguments.
    */
-  readonly length: number;
+  readonly length: NumberType.ArraySize;
   /**
    * Returns the name of the function.
    */
