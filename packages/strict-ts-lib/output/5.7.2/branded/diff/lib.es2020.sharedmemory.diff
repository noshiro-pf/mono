@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2020.bigint" />
+/// <reference path="./lib.es2020.bigint.d.ts" />
 
 interface Atomics {
   /**
@@ -24,12 +10,15 @@ interface Atomics {
    * will block.
    */
   add(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  add(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Stores the bitwise AND of a value with the value at the given position in the array,
@@ -37,12 +26,15 @@ interface Atomics {
    * write operation against the array will block.
    */
   and(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  and(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Replaces the value at the given position in the array if the original value equals the given
@@ -50,13 +42,17 @@ interface Atomics {
    * other read or write operation against the array will block.
    */
   compareExchange(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    expectedValue: bigint,
-    replacementValue: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: BigInt64,
+    replacementValue: BigInt64,
+  ): BigInt64;
+  compareExchange(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: BigUint64,
+    replacementValue: BigUint64,
+  ): BigUint64;
 
   /**
    * Replaces the value at the given position in the array, returning the original value. Until
@@ -64,23 +60,28 @@ interface Atomics {
    * block.
    */
   exchange(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  exchange(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Returns the value at the given position in the array. Until this atomic operation completes,
    * any other read or write operation against the array will block.
    */
   load(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+  ): BigInt64;
+  load(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+  ): BigUint64;
 
   /**
    * Stores the bitwise OR of a value with the value at the given position in the array,
@@ -88,24 +89,30 @@ interface Atomics {
    * operation against the array will block.
    */
   or(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  or(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Stores a value at the given position in the array, returning the new value. Until this
    * atomic operation completes, any other read or write operation against the array will block.
    */
   store(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  store(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Subtracts a value from the value at the given position in the array, returning the original
@@ -113,12 +120,15 @@ interface Atomics {
    * array will block.
    */
   sub(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  sub(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * If the value at the given position in the array is equal to the provided value, the current
@@ -128,8 +138,8 @@ interface Atomics {
    */
   wait(
     typedArray: BigInt64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
     timeout?: number,
   ): 'ok' | 'not-equal' | 'timed-out';
 
@@ -142,9 +152,9 @@ interface Atomics {
    */
   notify(
     typedArray: BigInt64Array<ArrayBufferLike>,
-    index: number,
-    count?: number,
-  ): number;
+    index: NumberType.TypedArraySizeArg,
+    count?: SafeUint,
+  ): SafeUint;
 
   /**
    * Stores the bitwise XOR of a value with the value at the given position in the array,
@@ -152,10 +162,13 @@ interface Atomics {
    * operation against the array will block.
    */
   xor(
-    typedArray:
-      | BigInt64Array<ArrayBufferLike>
-      | BigUint64Array<ArrayBufferLike>,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  xor(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 }
