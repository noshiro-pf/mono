@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
@@ -26,12 +12,20 @@ interface Array<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLast<S extends T>(
-    predicate: (value: T, index: number, array: T[]) => value is S,
-    thisArg?: any,
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -44,14 +38,18 @@ interface Array<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: T, index: number, array: T[]) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.ArraySearchResult;
 
   /**
    * Returns a copy of an array with its elements reversed.
    */
-  toReversed(): T[];
+  toReversed(): readonly T[];
 
   /**
    * Returns a copy of an array with its elements sorted.
@@ -62,16 +60,20 @@ interface Array<T> {
    * [11, 2, 22, 1].toSorted((a, b) => a - b) // [1, 2, 11, 22]
    * ```
    */
-  toSorted(compareFn?: (a: T, b: T) => number): T[];
+  toSorted(compareFn?: (a: T, b: T) => number): readonly T[];
 
   /**
-   * Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.
+   * Copies an array and removes elements while, if necessary, inserting new elements in their place, returning the remaining elements.
    * @param start The zero-based location in the array from which to start removing elements.
    * @param deleteCount The number of elements to remove.
    * @param items Elements to insert into the copied array in place of the deleted elements.
-   * @returns The copied array.
+   * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount: number, ...items: T[]): T[];
+  toSpliced(
+    start: NumberType.ArraySizeArg,
+    deleteCount: NumberType.ArraySizeArg,
+    ...items: readonly T[]
+  ): readonly T[];
 
   /**
    * Copies an array and removes elements while returning the remaining elements.
@@ -79,7 +81,10 @@ interface Array<T> {
    * @param deleteCount The number of elements to remove.
    * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount?: number): T[];
+  toSpliced(
+    start: NumberType.ArraySizeArg,
+    deleteCount?: NumberType.ArraySizeArg,
+  ): readonly T[];
 
   /**
    * Copies an array, then overwrites the value at the provided index with the
@@ -90,7 +95,7 @@ interface Array<T> {
    * @param value The value to write into the copied array.
    * @returns The copied array with the updated value.
    */
-  with(index: number, value: T): T[];
+  with(index: NumberType.ArraySizeArg, value: T): readonly T[];
 }
 
 interface ReadonlyArray<T> {
@@ -104,12 +109,20 @@ interface ReadonlyArray<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLast<S extends T>(
-    predicate: (value: T, index: number, array: readonly T[]) => value is S,
-    thisArg?: any,
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => boolean,
+    thisArg?: unknown,
   ): T | undefined;
 
   /**
@@ -122,17 +135,21 @@ interface ReadonlyArray<T> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: T, index: number, array: readonly T[]) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: T,
+      index: NumberType.ArraySize,
+      array: readonly T[],
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.ArraySearchResult;
 
   /**
-   * Copies the array and returns the copied array with all of its elements reversed.
+   * Returns a copy of an array with its elements reversed.
    */
-  toReversed(): T[];
+  toReversed(): readonly T[];
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
@@ -140,7 +157,7 @@ interface ReadonlyArray<T> {
    * [11, 2, 22, 1].toSorted((a, b) => a - b) // [1, 2, 11, 22]
    * ```
    */
-  toSorted(compareFn?: (a: T, b: T) => number): T[];
+  toSorted(compareFn?: (a: T, b: T) => number): readonly T[];
 
   /**
    * Copies an array and removes elements while, if necessary, inserting new elements in their place, returning the remaining elements.
@@ -149,7 +166,11 @@ interface ReadonlyArray<T> {
    * @param items Elements to insert into the copied array in place of the deleted elements.
    * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount: number, ...items: T[]): T[];
+  toSpliced(
+    start: NumberType.ArraySizeArg,
+    deleteCount: NumberType.ArraySizeArg,
+    ...items: readonly T[]
+  ): readonly T[];
 
   /**
    * Copies an array and removes elements while returning the remaining elements.
@@ -157,7 +178,10 @@ interface ReadonlyArray<T> {
    * @param deleteCount The number of elements to remove.
    * @returns A copy of the original array with the remaining elements.
    */
-  toSpliced(start: number, deleteCount?: number): T[];
+  toSpliced(
+    start: NumberType.ArraySizeArg,
+    deleteCount?: NumberType.ArraySizeArg,
+  ): readonly T[];
 
   /**
    * Copies an array, then overwrites the value at the provided index with the
@@ -165,10 +189,10 @@ interface ReadonlyArray<T> {
    * of the array
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: T): T[];
+  with(index: NumberType.ArraySizeArg, value: T): readonly T[];
 }
 
 interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
@@ -181,14 +205,22 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Int8>(
+    predicate: (
+      value: Int8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Int8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Int8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -200,17 +232,21 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Int8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int8Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -219,18 +255,21 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Int8Array<Buffer>(4) [1, 2, 11, 22]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Int8Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Int8, b: Int8) => number): Int8Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Int8Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8Array<ArrayBuffer>;
 }
 
 interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
@@ -243,14 +282,22 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint8>(
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -262,17 +309,21 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint8Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -281,18 +332,21 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Uint8Array<Buffer>(4) [1, 2, 11, 22]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Uint8Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Uint8, b: Uint8) => number): Uint8Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint8Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8Array<ArrayBuffer>;
 }
 
 interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
@@ -305,14 +359,22 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint8>(
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Uint8 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -324,17 +386,21 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Uint8,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint8ClampedArray<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -344,17 +410,22 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Uint8, b: Uint8) => number,
   ): Uint8ClampedArray<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint8ClampedArray<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8ClampedArray<ArrayBuffer>;
 }
 
 interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
@@ -367,14 +438,22 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Int16>(
+    predicate: (
+      value: Int16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Int16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Int16 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -386,17 +465,21 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Int16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int16Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -405,18 +488,21 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Int16Array<Buffer>(4) [-22, 1, 2, 11]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Int16Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Int16, b: Int16) => number): Int16Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Int16Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16Array<ArrayBuffer>;
 }
 
 interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
@@ -429,14 +515,22 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint16>(
+    predicate: (
+      value: Uint16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Uint16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Uint16 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -448,17 +542,21 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Uint16,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint16Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -468,17 +566,22 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Uint16, b: Uint16) => number,
   ): Uint16Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint16Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16Array<ArrayBuffer>;
 }
 
 interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -491,14 +594,22 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Int32>(
+    predicate: (
+      value: Int32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Int32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Int32 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -510,17 +621,21 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Int32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Int32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -529,18 +644,21 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    * myNums.toSorted((a, b) => a - b) // Int32Array<Buffer>(4) [-22, 1, 2, 11]
    * ```
    */
-  toSorted(
-    compareFn?: (a: number, b: number) => number,
-  ): Int32Array<ArrayBuffer>;
+  toSorted(compareFn?: (a: Int32, b: Int32) => number): Int32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Int32Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32Array<ArrayBuffer>;
 }
 
 interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -553,14 +671,22 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Uint32>(
+    predicate: (
+      value: Uint32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Uint32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Uint32 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -572,17 +698,21 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Uint32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Uint32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -592,17 +722,22 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Uint32, b: Uint32) => number,
   ): Uint32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Uint32Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32Array<ArrayBuffer>;
 }
 
 interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -615,14 +750,22 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Float32>(
+    predicate: (
+      value: Float32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Float32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Float32 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -634,17 +777,21 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Float32,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Float32Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -654,17 +801,22 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Float32, b: Float32) => number,
   ): Float32Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Float32Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Float32,
+  ): Float32Array<ArrayBuffer>;
 }
 
 interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -677,14 +829,22 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends number>(
-    predicate: (value: number, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends Float64>(
+    predicate: (
+      value: Float64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number | undefined;
+    predicate: (
+      value: Float64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): Float64 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -696,17 +856,21 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: number, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: Float64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): Float64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -716,17 +880,22 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: number, b: number) => number,
+    compareFn?: (a: Float64, b: Float64) => number,
   ): Float64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given number at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: number): Float64Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: Float64,
+  ): Float64Array<ArrayBuffer>;
 }
 
 interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -739,14 +908,22 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends bigint>(
-    predicate: (value: bigint, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends BigInt64>(
+    predicate: (
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): bigint | undefined;
+    predicate: (
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): BigInt64 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -758,17 +935,21 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): BigInt64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -778,17 +959,22 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: bigint, b: bigint) => number,
+    compareFn?: (a: BigInt64, b: BigInt64) => number,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given bigint at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: bigint): BigInt64Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64Array<ArrayBuffer>;
 }
 
 interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -801,14 +987,22 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    * @param thisArg If provided, it will be used as the this value for each invocation of
    * predicate. If it is not provided, undefined is used instead.
    */
-  findLast<S extends bigint>(
-    predicate: (value: bigint, index: number, array: this) => value is S,
-    thisArg?: any,
+  findLast<S extends BigUint64>(
+    predicate: (
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => value is S,
+    thisArg?: unknown,
   ): S | undefined;
   findLast(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): bigint | undefined;
+    predicate: (
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): BigUint64 | undefined;
 
   /**
    * Returns the index of the last element in the array where predicate is true, and -1
@@ -820,17 +1014,21 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    * predicate. If it is not provided, undefined is used instead.
    */
   findLastIndex(
-    predicate: (value: bigint, index: number, array: this) => unknown,
-    thisArg?: any,
-  ): number;
+    predicate: (
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
+      array: this,
+    ) => boolean,
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
-   * Copies the array and returns the copy with the elements in reverse order.
+   * Returns a copy of an array with its elements reversed.
    */
   toReversed(): BigUint64Array<ArrayBuffer>;
 
   /**
-   * Copies and sorts the array.
+   * Returns a copy of an array with its elements sorted.
    * @param compareFn Function used to determine the order of the elements. It is expected to return
    * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
    * value otherwise. If omitted, the elements are sorted in ascending order.
@@ -840,15 +1038,20 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    * ```
    */
   toSorted(
-    compareFn?: (a: bigint, b: bigint) => number,
+    compareFn?: (a: BigUint64, b: BigUint64) => number,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
-   * Copies the array and inserts the given bigint at the provided index.
+   * Copies an array, then overwrites the value at the provided index with the
+   * given value. If the index is negative, then it replaces from the end
+   * of the array.
    * @param index The index of the value to overwrite. If the index is
    * negative, then it replaces from the end of the array.
-   * @param value The value to insert into the copied array.
-   * @returns A copy of the original array with the inserted value.
+   * @param value The value to write into the copied array.
+   * @returns The copied array with the updated value.
    */
-  with(index: number, value: bigint): BigUint64Array<ArrayBuffer>;
+  with(
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64Array<ArrayBuffer>;
 }
