@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Map<K, V> {
   clear(): void;
@@ -25,8 +11,8 @@ interface Map<K, V> {
    * Executes a provided function once per each key/value pair in the Map, in insertion order.
    */
   forEach(
-    callbackfn: (value: V, key: K, map: Map<K, V>) => void,
-    thisArg?: any,
+    callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void,
+    thisArg?: unknown,
   ): void;
   /**
    * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.
@@ -36,7 +22,7 @@ interface Map<K, V> {
   /**
    * @returns boolean indicating whether an element with the specified key exists or not.
    */
-  has(key: K): boolean;
+  has(key: K | (WidenLiteral<K> & {})): key is K;
   /**
    * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.
    */
@@ -44,24 +30,24 @@ interface Map<K, V> {
   /**
    * @returns the number of elements in the Map.
    */
-  readonly size: number;
+  readonly size: NumberType.ArraySize;
 }
 
 interface MapConstructor {
-  new (): Map<any, any>;
+  new (): Map<never, never>;
   new <K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;
-  readonly prototype: Map<any, any>;
+  readonly prototype: Map<never, never>;
 }
-declare var Map: MapConstructor;
+declare const Map: MapConstructor;
 
 interface ReadonlyMap<K, V> {
   forEach(
     callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
   get(key: K): V | undefined;
-  has(key: K): boolean;
-  readonly size: number;
+  has(key: K | (WidenLiteral<K> & {})): key is K;
+  readonly size: NumberType.ArraySize;
 }
 
 interface WeakMap<K extends WeakKey, V> {
@@ -77,7 +63,7 @@ interface WeakMap<K extends WeakKey, V> {
   /**
    * @returns a boolean indicating whether an element with the specified key exists or not.
    */
-  has(key: K): boolean;
+  has(key: K | (WidenLiteral<K> & {})): key is K;
   /**
    * Adds a new element with a specified key and value.
    * @param key Must be an object or symbol.
@@ -86,12 +72,12 @@ interface WeakMap<K extends WeakKey, V> {
 }
 
 interface WeakMapConstructor {
-  new <K extends WeakKey = WeakKey, V = any>(
+  new <K extends WeakKey = WeakKey, V = unknown>(
     entries?: readonly (readonly [K, V])[] | null,
   ): WeakMap<K, V>;
-  readonly prototype: WeakMap<WeakKey, any>;
+  readonly prototype: WeakMap<WeakKey, unknown>;
 }
-declare var WeakMap: WeakMapConstructor;
+declare const WeakMap: WeakMapConstructor;
 
 interface Set<T> {
   /**
@@ -109,32 +95,32 @@ interface Set<T> {
    * Executes a provided function once per each value in the Set object, in insertion order.
    */
   forEach(
-    callbackfn: (value: T, value2: T, set: Set<T>) => void,
-    thisArg?: any,
+    callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void,
+    thisArg?: unknown,
   ): void;
   /**
    * @returns a boolean indicating whether an element with the specified value exists in the Set or not.
    */
-  has(value: T): boolean;
+  has(value: T | (WidenLiteral<T> & {})): value is T;
   /**
    * @returns the number of (unique) elements in Set.
    */
-  readonly size: number;
+  readonly size: NumberType.ArraySize;
 }
 
 interface SetConstructor {
-  new <T = any>(values?: readonly T[] | null): Set<T>;
-  readonly prototype: Set<any>;
+  new <T = never>(values?: readonly T[] | null): Set<T>;
+  readonly prototype: Set<never>;
 }
-declare var Set: SetConstructor;
+declare const Set: SetConstructor;
 
 interface ReadonlySet<T> {
   forEach(
     callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
-  has(value: T): boolean;
-  readonly size: number;
+  has(value: T | (WidenLiteral<T> & {})): value is T;
+  readonly size: NumberType.ArraySize;
 }
 
 interface WeakSet<T extends WeakKey> {
@@ -150,11 +136,11 @@ interface WeakSet<T extends WeakKey> {
   /**
    * @returns a boolean indicating whether a value exists in the WeakSet or not.
    */
-  has(value: T): boolean;
+  has(value: T | (WidenLiteral<T> & {})): value is T;
 }
 
 interface WeakSetConstructor {
   new <T extends WeakKey = WeakKey>(values?: readonly T[] | null): WeakSet<T>;
   readonly prototype: WeakSet<WeakKey>;
 }
-declare var WeakSet: WeakSetConstructor;
+declare const WeakSet: WeakSetConstructor;
