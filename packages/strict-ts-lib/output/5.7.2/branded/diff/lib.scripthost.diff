@@ -1,28 +1,14 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 /////////////////////////////
 /// Windows Script Host APIS
 /////////////////////////////
 
 interface ActiveXObject {
-  new (s: string): any;
+  new (s: string): unknown;
 }
-declare var ActiveXObject: ActiveXObject;
+declare const ActiveXObject: ActiveXObject;
 
 interface ITextWriter {
   Write(s: string): void;
@@ -32,10 +18,10 @@ interface ITextWriter {
 
 interface TextStreamBase {
   /** The column number of the current character position in an input stream. */
-  Column: number;
+  readonly Column: number;
 
   /** The current line number in an input stream. */
-  Line: number;
+  readonly Line: number;
 
   /**
    * Closes a text stream. It is not necessary to close standard streams; they
@@ -99,70 +85,70 @@ interface TextStreamReader extends TextStreamBase {
   SkipLine(): void;
 
   /** Indicates whether the stream pointer position is at the end of a line. */
-  AtEndOfLine: boolean;
+  readonly AtEndOfLine: boolean;
 
   /** Indicates whether the stream pointer position is at the end of a stream. */
-  AtEndOfStream: boolean;
+  readonly AtEndOfStream: boolean;
 }
 
-declare var WScript: {
+declare const WScript: {
   /**
    * Outputs text to either a message box (under WScript.exe) or the command
    * console window followed by a newline (under CScript.exe).
    */
-  Echo(s: any): void;
+  Echo(s: unknown): void;
 
   /**
    * Exposes the write-only error output stream for the current script. Can be
    * accessed only while using CScript.exe.
    */
-  StdErr: TextStreamWriter;
+  readonly StdErr: TextStreamWriter;
 
   /**
    * Exposes the write-only output stream for the current script. Can be
    * accessed only while using CScript.exe.
    */
-  StdOut: TextStreamWriter;
-  Arguments: { length: number; Item(n: number): string };
+  readonly StdOut: TextStreamWriter;
+  readonly Arguments: { readonly length: number; Item(n: number): string };
 
   /** The full path of the currently running script. */
-  ScriptFullName: string;
+  readonly ScriptFullName: string;
 
   /** Forces the script to stop immediately, with an optional exit code. */
   Quit(exitCode?: number): number;
 
   /** The Windows Script Host build version number. */
-  BuildVersion: number;
+  readonly BuildVersion: number;
 
   /** Fully qualified path of the host executable. */
-  FullName: string;
+  readonly FullName: string;
 
   /** Gets/sets the script mode - interactive(true) or batch(false). */
-  Interactive: boolean;
+  readonly Interactive: boolean;
 
   /** The name of the host executable (WScript.exe or CScript.exe). */
-  Name: string;
+  readonly Name: string;
 
   /** Path of the directory containing the host executable. */
-  Path: string;
+  readonly Path: string;
 
   /** The filename of the currently running script. */
-  ScriptName: string;
+  readonly ScriptName: string;
 
   /**
    * Exposes the read-only input stream for the current script. Can be accessed
    * only while using CScript.exe.
    */
-  StdIn: TextStreamReader;
+  readonly StdIn: TextStreamReader;
 
   /** Windows Script Host version */
-  Version: string;
+  readonly Version: string;
 
   /**
    * Connects a COM object's event sources to functions named with a given
    * prefix, in the form prefix_event.
    */
-  ConnectObject(objEventSource: any, strPrefix: string): void;
+  ConnectObject(objEventSource: unknown, strPrefix: string): void;
 
   /**
    * Creates a COM object.
@@ -171,10 +157,10 @@ declare var WScript: {
    * @param strPrefix Function names in the form prefix_event will be bound to
    *   this object's COM events.
    */
-  CreateObject(strProgID: string, strPrefix?: string): any;
+  CreateObject(strProgID: string, strPrefix?: string): unknown;
 
   /** Disconnects a COM object from its event sources. */
-  DisconnectObject(obj: any): void;
+  DisconnectObject(obj: unknown): void;
 
   /**
    * Retrieves an existing object with the specified ProgID from memory, or
@@ -186,7 +172,11 @@ declare var WScript: {
    * @param strPrefix Function names in the form prefix_event will be bound to
    *   this object's COM events.
    */
-  GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any;
+  GetObject(
+    strPathname: string,
+    strProgID?: string,
+    strPrefix?: string,
+  ): unknown;
 
   /**
    * Suspends script execution for a specified length of time, then continues
@@ -198,10 +188,10 @@ declare var WScript: {
 };
 
 /** WSH is an alias for WScript under Windows Script Host */
-declare var WSH: typeof WScript;
+declare const WSH: typeof WScript;
 
 /** Represents an Automation SAFEARRAY */
-declare class SafeArray<T = any> {
+declare class SafeArray<T = unknown> {
   private constructor();
   private SafeArray_typekey: SafeArray<T>;
 }
@@ -210,7 +200,7 @@ declare class SafeArray<T = any> {
  * Allows enumerating over a COM collection, which may not have indexed item
  * access.
  */
-interface Enumerator<T = any> {
+interface Enumerator<T = unknown> {
   /**
    * Returns true if the current item is the last one in the collection, or the
    * collection is empty, or the current item is undefined.
@@ -235,18 +225,18 @@ interface Enumerator<T = any> {
 }
 
 interface EnumeratorConstructor {
-  new <T = any>(safearray: SafeArray<T>): Enumerator<T>;
-  new <T = any>(collection: { Item(index: any): T }): Enumerator<T>;
-  new <T = any>(collection: any): Enumerator<T>;
+  new <T = unknown>(safearray: SafeArray<T>): Enumerator<T>;
+  new <T = unknown>(collection: { Item(index: unknown): T }): Enumerator<T>;
+  new <T = unknown>(collection: unknown): Enumerator<T>;
 }
 
-declare var Enumerator: EnumeratorConstructor;
+declare const Enumerator: EnumeratorConstructor;
 
 /**
  * Enables reading from a COM safe array, which might have an alternate lower
  * bound, or multiple dimensions.
  */
-interface VBArray<T = any> {
+interface VBArray<T = unknown> {
   /** Returns the number of dimensions (1-based). */
   dimensions(): number;
 
@@ -254,7 +244,7 @@ interface VBArray<T = any> {
    * Takes an index for each dimension in the array, and returns the item at the
    * corresponding location.
    */
-  getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T;
+  getItem(dimension1Index: number, ...dimensionNIndexes: readonly number[]): T;
 
   /**
    * Returns the smallest available index for a given dimension.
@@ -275,14 +265,14 @@ interface VBArray<T = any> {
    * are multiple dimensions, each successive dimension is appended to the end
    * of the array. Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]
    */
-  toArray(): T[];
+  toArray(): readonly T[];
 }
 
 interface VBArrayConstructor {
-  new <T = any>(safeArray: SafeArray<T>): VBArray<T>;
+  new <T = unknown>(safeArray: SafeArray<T>): VBArray<T>;
 }
 
-declare var VBArray: VBArrayConstructor;
+declare const VBArray: VBArrayConstructor;
 
 /** Automation date (VT_DATE) */
 declare class VarDate {
@@ -295,5 +285,5 @@ interface DateConstructor {
 }
 
 interface Date {
-  getVarDate: () => VarDate;
+  readonly getVarDate: () => VarDate;
 }
