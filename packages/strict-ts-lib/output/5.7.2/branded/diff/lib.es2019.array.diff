@@ -1,26 +1,12 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 type FlatArray<Arr, Depth extends number> = {
-  done: Arr;
-  recur: Arr extends ReadonlyArray<infer InnerArr>
+  readonly done: Arr;
+  readonly recur: Arr extends ReadonlyArray<infer InnerArr>
     ? FlatArray<
         InnerArr,
-        [
+        (readonly [
           -1,
           0,
           1,
@@ -43,7 +29,7 @@ type FlatArray<Arr, Depth extends number> = {
           18,
           19,
           20,
-        ][Depth]
+        ])[Depth]
       >
     : Arr;
 }[Depth extends -1 ? 'done' : 'recur'];
@@ -63,11 +49,11 @@ interface ReadonlyArray<T> {
     callback: (
       this: This,
       value: T,
-      index: number,
-      array: T[],
+      index: NumberType.ArraySize,
+      array: readonly T[],
     ) => U | ReadonlyArray<U>,
     thisArg?: This,
-  ): U[];
+  ): readonly U[];
 
   /**
    * Returns a new array with all sub-array elements concatenated into it recursively up to the
@@ -75,7 +61,10 @@ interface ReadonlyArray<T> {
    *
    * @param depth The maximum recursion depth
    */
-  flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
+  flat<A, D extends NumberType.ArraySizeArgNonNegative = 1>(
+    this: A,
+    depth?: D,
+  ): readonly FlatArray<A, D>[];
 }
 
 interface Array<T> {
@@ -93,11 +82,11 @@ interface Array<T> {
     callback: (
       this: This,
       value: T,
-      index: number,
-      array: T[],
+      index: NumberType.ArraySize,
+      array: readonly T[],
     ) => U | ReadonlyArray<U>,
     thisArg?: This,
-  ): U[];
+  ): readonly U[];
 
   /**
    * Returns a new array with all sub-array elements concatenated into it recursively up to the
@@ -105,5 +94,8 @@ interface Array<T> {
    *
    * @param depth The maximum recursion depth
    */
-  flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
+  flat<A, D extends NumberType.ArraySizeArgNonNegative = 1>(
+    this: A,
+    depth?: D,
+  ): readonly FlatArray<A, D>[];
 }
