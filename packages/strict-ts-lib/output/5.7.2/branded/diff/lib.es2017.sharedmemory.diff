@@ -1,45 +1,34 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
-/// <reference lib="es2015.symbol.wellknown" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
+/// <reference path="./lib.es2015.symbol.wellknown.d.ts" />
 
 interface SharedArrayBuffer {
   /**
    * Read-only. The length of the ArrayBuffer (in bytes).
    */
-  readonly byteLength: number;
+  readonly byteLength: NumberType.TypedArraySize;
 
   /**
    * Returns a section of an SharedArrayBuffer.
    */
-  slice(begin?: number, end?: number): SharedArrayBuffer;
+  slice(
+    begin?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): SharedArrayBuffer;
   readonly [Symbol.species]: SharedArrayBuffer;
   readonly [Symbol.toStringTag]: 'SharedArrayBuffer';
 }
 
 interface SharedArrayBufferConstructor {
   readonly prototype: SharedArrayBuffer;
-  new (byteLength?: number): SharedArrayBuffer;
+  new (byteLength?: NumberType.TypedArraySizeArgNonNegative): SharedArrayBuffer;
 }
-declare var SharedArrayBuffer: SharedArrayBufferConstructor;
+declare const SharedArrayBuffer: SharedArrayBufferConstructor;
 
 interface ArrayBufferTypes {
-  SharedArrayBuffer: SharedArrayBuffer;
+  readonly SharedArrayBuffer: SharedArrayBuffer;
 }
 
 interface Atomics {
@@ -49,16 +38,35 @@ interface Atomics {
    * will block.
    */
   add(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  add(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  add(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  add(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  add(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  add(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * Stores the bitwise AND of a value with the value at the given position in the array,
@@ -66,16 +74,35 @@ interface Atomics {
    * write operation against the array will block.
    */
   and(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  and(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  and(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  and(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  and(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  and(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * Replaces the value at the given position in the array if the original value equals the given
@@ -83,17 +110,41 @@ interface Atomics {
    * other read or write operation against the array will block.
    */
   compareExchange(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    expectedValue: number,
-    replacementValue: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Int8,
+    replacementValue: Int8,
+  ): Int8;
+  compareExchange(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Uint8,
+    replacementValue: Uint8,
+  ): Uint8;
+  compareExchange(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Int16,
+    replacementValue: Int16,
+  ): Int16;
+  compareExchange(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Uint16,
+    replacementValue: Uint16,
+  ): Uint16;
+  compareExchange(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Int32,
+    replacementValue: Int32,
+  ): Int32;
+  compareExchange(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: Uint32,
+    replacementValue: Uint32,
+  ): Uint32;
 
   /**
    * Replaces the value at the given position in the array, returning the original value. Until
@@ -101,38 +152,53 @@ interface Atomics {
    * block.
    */
   exchange(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  exchange(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  exchange(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  exchange(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  exchange(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  exchange(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * Returns a value indicating whether high-performance algorithms can use atomic operations
    * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed
    * array.
    */
-  isLockFree(size: number): boolean;
+  isLockFree(size: NumberType.TypedArraySizeArgPositive): boolean;
 
   /**
    * Returns the value at the given position in the array. Until this atomic operation completes,
    * any other read or write operation against the array will block.
    */
-  load(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-  ): number;
+  load(typedArray: Int8Array, index: NumberType.TypedArraySizeArg): Int8;
+  load(typedArray: Uint8Array, index: NumberType.TypedArraySizeArg): Uint8;
+  load(typedArray: Int16Array, index: NumberType.TypedArraySizeArg): Int16;
+  load(typedArray: Uint16Array, index: NumberType.TypedArraySizeArg): Uint16;
+  load(typedArray: Int32Array, index: NumberType.TypedArraySizeArg): Int32;
+  load(typedArray: Uint32Array, index: NumberType.TypedArraySizeArg): Uint32;
 
   /**
    * Stores the bitwise OR of a value with the value at the given position in the array,
@@ -140,32 +206,70 @@ interface Atomics {
    * operation against the array will block.
    */
   or(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  or(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  or(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  or(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  or(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  or(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * Stores a value at the given position in the array, returning the new value. Until this
    * atomic operation completes, any other read or write operation against the array will block.
    */
   store(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  store(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  store(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  store(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  store(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  store(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * Subtracts a value from the value at the given position in the array, returning the original
@@ -173,16 +277,35 @@ interface Atomics {
    * array will block.
    */
   sub(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  sub(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  sub(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  sub(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  sub(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  sub(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   /**
    * If the value at the given position in the array is equal to the provided value, the current
@@ -192,8 +315,8 @@ interface Atomics {
    */
   wait(
     typedArray: Int32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
     timeout?: number,
   ): 'ok' | 'not-equal' | 'timed-out';
 
@@ -206,9 +329,9 @@ interface Atomics {
    */
   notify(
     typedArray: Int32Array<ArrayBufferLike>,
-    index: number,
-    count?: number,
-  ): number;
+    index: NumberType.TypedArraySizeArg,
+    count?: SafeUint,
+  ): SafeUint;
 
   /**
    * Stores the bitwise XOR of a value with the value at the given position in the array,
@@ -216,18 +339,37 @@ interface Atomics {
    * operation against the array will block.
    */
   xor(
-    typedArray:
-      | Int8Array<ArrayBufferLike>
-      | Uint8Array<ArrayBufferLike>
-      | Int16Array<ArrayBufferLike>
-      | Uint16Array<ArrayBufferLike>
-      | Int32Array<ArrayBufferLike>
-      | Uint32Array<ArrayBufferLike>,
-    index: number,
-    value: number,
-  ): number;
+    typedArray: Int8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int8,
+  ): Int8;
+  xor(
+    typedArray: Uint8Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint8,
+  ): Uint8;
+  xor(
+    typedArray: Int16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int16,
+  ): Int16;
+  xor(
+    typedArray: Uint16Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint16,
+  ): Uint16;
+  xor(
+    typedArray: Int32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Int32,
+  ): Int32;
+  xor(
+    typedArray: Uint32Array,
+    index: NumberType.TypedArraySizeArg,
+    value: Uint32,
+  ): Uint32;
 
   readonly [Symbol.toStringTag]: 'Atomics';
 }
 
-declare var Atomics: Atomics;
+declare const Atomics: Atomics;
