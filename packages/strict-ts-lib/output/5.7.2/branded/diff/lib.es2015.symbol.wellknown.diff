@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2015.symbol" />
+/// <reference path="./lib.es2015.symbol.d.ts" />
 
 interface SymbolConstructor {
   /**
@@ -95,7 +81,7 @@ interface Array<T> {
    * absent when used in a 'with' statement.
    */
   readonly [Symbol.unscopables]: {
-    [K in keyof any[]]?: boolean;
+    readonly [K in keyof (readonly any[])]?: boolean;
   };
 }
 
@@ -105,7 +91,7 @@ interface ReadonlyArray<T> {
    * absent when used in a 'with' statement.
    */
   readonly [Symbol.unscopables]: {
-    [K in keyof (readonly any[])]?: boolean;
+    readonly [K in keyof (readonly any[])]?: boolean;
   };
 }
 
@@ -157,7 +143,7 @@ interface Function {
    * A constructor function can control which objects are recognized as its
    * instances by 'instanceof' by overriding this method.
    */
-  [Symbol.hasInstance](value: any): boolean;
+  [Symbol.hasInstance](value: unknown): boolean;
 }
 
 interface GeneratorFunction {
@@ -204,7 +190,7 @@ interface RegExp {
    */
   [Symbol.replace](
     string: string,
-    replacer: (substring: string, ...args: any[]) => string,
+    replacer: (substring: string, ...args: readonly unknown[]) => string,
   ): string;
 
   /**
@@ -213,7 +199,7 @@ interface RegExp {
    *
    * @param string The string to search within.
    */
-  [Symbol.search](string: string): number;
+  [Symbol.search](string: string): NumberType.StringSize;
 
   /**
    * Returns an array of substrings that were delimited by strings in the
@@ -227,7 +213,10 @@ interface RegExp {
    * @param limit If not undefined, the output array is truncated so that it
    *   contains no more than 'limit' elements.
    */
-  [Symbol.split](string: string, limit?: number): string[];
+  [Symbol.split](
+    string: string,
+    limit?: NumberType.ArraySizeArgNonNegative,
+  ): readonly string[];
 }
 
 interface RegExpConstructor {
@@ -274,10 +263,10 @@ interface String {
     searchValue: {
       [Symbol.replace](
         string: string,
-        replacer: (substring: string, ...args: any[]) => string,
+        replacer: (substring: string, ...args: readonly unknown[]) => string,
       ): string;
     },
-    replacer: (substring: string, ...args: any[]) => string,
+    replacer: (substring: string, ...args: readonly unknown[]) => string,
   ): string;
 
   /**
@@ -296,9 +285,11 @@ interface String {
    *   array.
    */
   split(
-    splitter: { [Symbol.split](string: string, limit?: number): string[] },
+    splitter: {
+      [Symbol.split](string: string, limit?: number): readonly string[];
+    },
     limit?: number,
-  ): string[];
+  ): readonly string[];
 }
 
 interface ArrayBuffer {
