@@ -1,26 +1,12 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): T | undefined;
+  at(index: NumberType.ArraySizeArg): T | undefined;
 }
 
 interface ReadonlyArray<T> {
@@ -28,7 +14,7 @@ interface ReadonlyArray<T> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): T | undefined;
+  at(index: NumberType.ArraySizeArg): T | undefined;
 }
 
 interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
@@ -36,7 +22,7 @@ interface Int8Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int8 | undefined;
 }
 
 interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
@@ -44,7 +30,7 @@ interface Uint8Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint8 | undefined;
 }
 
 interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
@@ -52,7 +38,7 @@ interface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint8 | undefined;
 }
 
 interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
@@ -60,7 +46,7 @@ interface Int16Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int16 | undefined;
 }
 
 interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
@@ -68,7 +54,7 @@ interface Uint16Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint16 | undefined;
 }
 
 interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -76,7 +62,7 @@ interface Int32Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int32 | undefined;
 }
 
 interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -84,7 +70,7 @@ interface Uint32Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint32 | undefined;
 }
 
 interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
@@ -92,7 +78,7 @@ interface Float32Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Float32 | undefined;
 }
 
 interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -100,7 +86,7 @@ interface Float64Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Float64 | undefined;
 }
 
 interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -108,7 +94,7 @@ interface BigInt64Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): bigint | undefined;
+  at(index: NumberType.TypedArraySizeArg): BigInt64 | undefined;
 }
 
 interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
@@ -116,5 +102,5 @@ interface BigUint64Array<TArrayBuffer extends ArrayBufferLike> {
    * Returns the item located at the specified index.
    * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.
    */
-  at(index: number): bigint | undefined;
+  at(index: NumberType.TypedArraySizeArg): BigUint64 | undefined;
 }
