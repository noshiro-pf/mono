/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/// <reference no-default-lib="true"/>

/////////////////////////////
/// Window APIs
/////////////////////////////

interface AddEventListenerOptions extends EventListenerOptions {
  readonly once?: boolean;
  readonly passive?: boolean;
  readonly signal?: AbortSignal;
}

interface AesCbcParams extends Algorithm {
  readonly iv: BufferSource;
}

interface AesCtrParams extends Algorithm {
  readonly counter: BufferSource;
  readonly length: number;
}

interface AesDerivedKeyParams extends Algorithm {
  readonly length: number;
}

interface AesGcmParams extends Algorithm {
  readonly additionalData?: BufferSource;
  readonly iv: BufferSource;
  readonly tagLength?: number;
}

interface AesKeyAlgorithm extends KeyAlgorithm {
  readonly length: number;
}

interface AesKeyGenParams extends Algorithm {
  readonly length: number;
}

interface Algorithm {
  readonly name: string;
}

interface AnalyserOptions extends AudioNodeOptions {
  readonly fftSize?: number;
  readonly maxDecibels?: number;
  readonly minDecibels?: number;
  readonly smoothingTimeConstant?: number;
}

interface AnimationEventInit extends EventInit {
  readonly animationName?: string;
  readonly elapsedTime?: number;
  readonly pseudoElement?: string;
}

interface AnimationPlaybackEventInit extends EventInit {
  readonly currentTime?: CSSNumberish | null;
  readonly timelineTime?: CSSNumberish | null;
}

interface AssignedNodesOptions {
  readonly flatten?: boolean;
}

interface AudioBufferOptions {
  readonly length: number;
  readonly numberOfChannels?: number;
  readonly sampleRate: number;
}

interface AudioBufferSourceOptions {
  readonly buffer?: AudioBuffer | null;
  readonly detune?: number;
  readonly loop?: boolean;
  readonly loopEnd?: number;
  readonly loopStart?: number;
  readonly playbackRate?: number;
}

interface AudioConfiguration {
  readonly bitrate?: number;
  readonly channels?: string;
  readonly contentType: string;
  readonly samplerate?: number;
  readonly spatialRendering?: boolean;
}

interface AudioContextOptions {
  readonly latencyHint?: AudioContextLatencyCategory | number;
  readonly sampleRate?: number;
}

interface AudioNodeOptions {
  readonly channelCount?: number;
  readonly channelCountMode?: ChannelCountMode;
  readonly channelInterpretation?: ChannelInterpretation;
}

interface AudioProcessingEventInit extends EventInit {
  readonly inputBuffer: AudioBuffer;
  readonly outputBuffer: AudioBuffer;
  readonly playbackTime: number;
}

interface AudioTimestamp {
  readonly contextTime?: number;
  readonly performanceTime?: DOMHighResTimeStamp;
}

interface AudioWorkletNodeOptions extends AudioNodeOptions {
  readonly numberOfInputs?: number;
  readonly numberOfOutputs?: number;
  readonly outputChannelCount?: readonly number[];
  readonly parameterData?: Record<string, number>;
  readonly processorOptions?: unknown;
}

interface AuthenticationExtensionsClientInputs {
  readonly appid?: string;
  readonly credProps?: boolean;
  readonly hmacCreateSecret?: boolean;
  readonly minPinLength?: boolean;
}

interface AuthenticationExtensionsClientOutputs {
  readonly appid?: boolean;
  readonly credProps?: CredentialPropertiesOutput;
  readonly hmacCreateSecret?: boolean;
}

interface AuthenticatorSelectionCriteria {
  readonly authenticatorAttachment?: AuthenticatorAttachment;
  readonly requireResidentKey?: boolean;
  readonly residentKey?: ResidentKeyRequirement;
  readonly userVerification?: UserVerificationRequirement;
}

interface AvcEncoderConfig {
  readonly format?: AvcBitstreamFormat;
}

interface BiquadFilterOptions extends AudioNodeOptions {
  readonly Q?: number;
  readonly detune?: number;
  readonly frequency?: number;
  readonly gain?: number;
  readonly type?: BiquadFilterType;
}

interface BlobEventInit {
  readonly data: Blob;
  readonly timecode?: DOMHighResTimeStamp;
}

interface BlobPropertyBag {
  readonly endings?: EndingType;
  readonly type?: string;
}

interface CSSMatrixComponentOptions {
  readonly is2D?: boolean;
}

interface CSSNumericType {
  readonly angle?: number;
  readonly flex?: number;
  readonly frequency?: number;
  readonly length?: number;
  readonly percent?: number;
  readonly percentHint?: CSSNumericBaseType;
  readonly resolution?: number;
  readonly time?: number;
}

interface CSSStyleSheetInit {
  readonly baseURL?: string;
  readonly disabled?: boolean;
  readonly media?: MediaList | string;
}

interface CacheQueryOptions {
  readonly ignoreMethod?: boolean;
  readonly ignoreSearch?: boolean;
  readonly ignoreVary?: boolean;
}

interface CanvasRenderingContext2DSettings {
  readonly alpha?: boolean;
  readonly colorSpace?: PredefinedColorSpace;
  readonly desynchronized?: boolean;
  readonly willReadFrequently?: boolean;
}

interface ChannelMergerOptions extends AudioNodeOptions {
  readonly numberOfInputs?: number;
}

interface ChannelSplitterOptions extends AudioNodeOptions {
  readonly numberOfOutputs?: number;
}

interface CheckVisibilityOptions {
  readonly checkOpacity?: boolean;
  readonly checkVisibilityCSS?: boolean;
}

interface ClientQueryOptions {
  readonly includeUncontrolled?: boolean;
  readonly type?: ClientTypes;
}

interface ClipboardEventInit extends EventInit {
  readonly clipboardData?: DataTransfer | null;
}

interface ClipboardItemOptions {
  readonly presentationStyle?: PresentationStyle;
}

interface CloseEventInit extends EventInit {
  readonly code?: number;
  readonly reason?: string;
  readonly wasClean?: boolean;
}

interface CompositionEventInit extends UIEventInit {
  readonly data?: string;
}

interface ComputedEffectTiming extends EffectTiming {
  readonly activeDuration?: CSSNumberish;
  readonly currentIteration?: number | null;
  readonly endTime?: CSSNumberish;
  readonly localTime?: CSSNumberish | null;
  readonly progress?: number | null;
  readonly startTime?: CSSNumberish;
}

interface ComputedKeyframe {
  readonly composite: CompositeOperationOrAuto;
  readonly computedOffset: number;
  readonly easing: string;
  readonly offset: number | null;
  readonly [property: string]: string | number | null | undefined;
}

interface ConstantSourceOptions {
  readonly offset?: number;
}

interface ConstrainBooleanParameters {
  readonly exact?: boolean;
  readonly ideal?: boolean;
}

interface ConstrainDOMStringParameters {
  readonly exact?: string | readonly string[];
  readonly ideal?: string | readonly string[];
}

interface ConstrainDoubleRange extends DoubleRange {
  readonly exact?: number;
  readonly ideal?: number;
}

interface ConstrainULongRange extends ULongRange {
  readonly exact?: number;
  readonly ideal?: number;
}

interface ConvolverOptions extends AudioNodeOptions {
  readonly buffer?: AudioBuffer | null;
  readonly disableNormalization?: boolean;
}

interface CredentialCreationOptions {
  readonly publicKey?: PublicKeyCredentialCreationOptions;
  readonly signal?: AbortSignal;
}

interface CredentialPropertiesOutput {
  readonly rk?: boolean;
}

interface CredentialRequestOptions {
  readonly mediation?: CredentialMediationRequirement;
  readonly publicKey?: PublicKeyCredentialRequestOptions;
  readonly signal?: AbortSignal;
}

interface CryptoKeyPair {
  readonly privateKey: CryptoKey;
  readonly publicKey: CryptoKey;
}

interface CustomEventInit<T = unknown> extends EventInit {
  readonly detail?: T;
}

interface DOMMatrix2DInit {
  readonly a?: number;
  readonly b?: number;
  readonly c?: number;
  readonly d?: number;
  readonly e?: number;
  readonly f?: number;
  readonly m11?: number;
  readonly m12?: number;
  readonly m21?: number;
  readonly m22?: number;
  readonly m41?: number;
  readonly m42?: number;
}

interface DOMMatrixInit extends DOMMatrix2DInit {
  readonly is2D?: boolean;
  readonly m13?: number;
  readonly m14?: number;
  readonly m23?: number;
  readonly m24?: number;
  readonly m31?: number;
  readonly m32?: number;
  readonly m33?: number;
  readonly m34?: number;
  readonly m43?: number;
  readonly m44?: number;
}

interface DOMPointInit {
  readonly w?: number;
  readonly x?: number;
  readonly y?: number;
  readonly z?: number;
}

interface DOMQuadInit {
  readonly p1?: DOMPointInit;
  readonly p2?: DOMPointInit;
  readonly p3?: DOMPointInit;
  readonly p4?: DOMPointInit;
}

interface DOMRectInit {
  readonly height?: number;
  readonly width?: number;
  readonly x?: number;
  readonly y?: number;
}

interface DelayOptions extends AudioNodeOptions {
  readonly delayTime?: number;
  readonly maxDelayTime?: number;
}

interface DeviceMotionEventAccelerationInit {
  readonly x?: number | null;
  readonly y?: number | null;
  readonly z?: number | null;
}

interface DeviceMotionEventInit extends EventInit {
  readonly acceleration?: DeviceMotionEventAccelerationInit;
  readonly accelerationIncludingGravity?: DeviceMotionEventAccelerationInit;
  readonly interval?: number;
  readonly rotationRate?: DeviceMotionEventRotationRateInit;
}

interface DeviceMotionEventRotationRateInit {
  readonly alpha?: number | null;
  readonly beta?: number | null;
  readonly gamma?: number | null;
}

interface DeviceOrientationEventInit extends EventInit {
  readonly absolute?: boolean;
  readonly alpha?: number | null;
  readonly beta?: number | null;
  readonly gamma?: number | null;
}

interface DisplayMediaStreamOptions {
  readonly audio?: boolean | MediaTrackConstraints;
  readonly video?: boolean | MediaTrackConstraints;
}

interface DocumentTimelineOptions {
  readonly originTime?: DOMHighResTimeStamp;
}

interface DoubleRange {
  readonly max?: number;
  readonly min?: number;
}

interface DragEventInit extends MouseEventInit {
  readonly dataTransfer?: DataTransfer | null;
}

interface DynamicsCompressorOptions extends AudioNodeOptions {
  readonly attack?: number;
  readonly knee?: number;
  readonly ratio?: number;
  readonly release?: number;
  readonly threshold?: number;
}

interface EcKeyAlgorithm extends KeyAlgorithm {
  readonly namedCurve: NamedCurve;
}

interface EcKeyGenParams extends Algorithm {
  readonly namedCurve: NamedCurve;
}

interface EcKeyImportParams extends Algorithm {
  readonly namedCurve: NamedCurve;
}

interface EcdhKeyDeriveParams extends Algorithm {
  readonly public: CryptoKey;
}

interface EcdsaParams extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
}

interface EffectTiming {
  readonly delay?: number;
  readonly direction?: PlaybackDirection;
  readonly duration?: number | CSSNumericValue | string;
  readonly easing?: string;
  readonly endDelay?: number;
  readonly fill?: FillMode;
  readonly iterationStart?: number;
  readonly iterations?: number;
  readonly playbackRate?: number;
}

interface ElementCreationOptions {
  readonly is?: string;
}

interface ElementDefinitionOptions {
  readonly extends?: string;
}

interface EncodedVideoChunkInit {
  readonly data: AllowSharedBufferSource;
  readonly duration?: number;
  readonly timestamp: number;
  readonly type: EncodedVideoChunkType;
}

interface EncodedVideoChunkMetadata {
  readonly decoderConfig?: VideoDecoderConfig;
}

interface ErrorEventInit extends EventInit {
  readonly colno?: number;
  readonly error?: unknown;
  readonly filename?: string;
  readonly lineno?: number;
  readonly message?: string;
}

interface EventInit {
  readonly bubbles?: boolean;
  readonly cancelable?: boolean;
  readonly composed?: boolean;
}

interface EventListenerOptions {
  readonly capture?: boolean;
}

interface EventModifierInit extends UIEventInit {
  readonly altKey?: boolean;
  readonly ctrlKey?: boolean;
  readonly metaKey?: boolean;
  readonly modifierAltGraph?: boolean;
  readonly modifierCapsLock?: boolean;
  readonly modifierFn?: boolean;
  readonly modifierFnLock?: boolean;
  readonly modifierHyper?: boolean;
  readonly modifierNumLock?: boolean;
  readonly modifierScrollLock?: boolean;
  readonly modifierSuper?: boolean;
  readonly modifierSymbol?: boolean;
  readonly modifierSymbolLock?: boolean;
  readonly shiftKey?: boolean;
}

interface EventSourceInit {
  readonly withCredentials?: boolean;
}

interface FilePropertyBag extends BlobPropertyBag {
  readonly lastModified?: number;
}

interface FileSystemCreateWritableOptions {
  readonly keepExistingData?: boolean;
}

interface FileSystemFlags {
  readonly create?: boolean;
  readonly exclusive?: boolean;
}

interface FileSystemGetDirectoryOptions {
  readonly create?: boolean;
}

interface FileSystemGetFileOptions {
  readonly create?: boolean;
}

interface FileSystemRemoveOptions {
  readonly recursive?: boolean;
}

interface FocusEventInit extends UIEventInit {
  readonly relatedTarget?: EventTarget | null;
}

interface FocusOptions {
  readonly preventScroll?: boolean;
}

interface FontFaceDescriptors {
  readonly ascentOverride?: string;
  readonly descentOverride?: string;
  readonly display?: FontDisplay;
  readonly featureSettings?: string;
  readonly lineGapOverride?: string;
  readonly stretch?: string;
  readonly style?: string;
  readonly unicodeRange?: string;
  readonly weight?: string;
}

interface FontFaceSetLoadEventInit extends EventInit {
  readonly fontfaces?: readonly FontFace[];
}

interface FormDataEventInit extends EventInit {
  readonly formData: FormData;
}

interface FullscreenOptions {
  readonly navigationUI?: FullscreenNavigationUI;
}

interface GainOptions extends AudioNodeOptions {
  readonly gain?: number;
}

interface GamepadEffectParameters {
  readonly duration?: number;
  readonly startDelay?: number;
  readonly strongMagnitude?: number;
  readonly weakMagnitude?: number;
}

interface GamepadEventInit extends EventInit {
  readonly gamepad: Gamepad;
}

interface GetAnimationsOptions {
  readonly subtree?: boolean;
}

interface GetNotificationOptions {
  readonly tag?: string;
}

interface GetRootNodeOptions {
  readonly composed?: boolean;
}

interface HashChangeEventInit extends EventInit {
  readonly newURL?: string;
  readonly oldURL?: string;
}

interface HkdfParams extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
  readonly info: BufferSource;
  readonly salt: BufferSource;
}

interface HmacImportParams extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
  readonly length?: number;
}

interface HmacKeyAlgorithm extends KeyAlgorithm {
  readonly hash: KeyAlgorithm;
  readonly length: number;
}

interface HmacKeyGenParams extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
  readonly length?: number;
}

interface IDBDatabaseInfo {
  readonly name?: string;
  readonly version?: number;
}

interface IDBIndexParameters {
  readonly multiEntry?: boolean;
  readonly unique?: boolean;
}

interface IDBObjectStoreParameters {
  readonly autoIncrement?: boolean;
  readonly keyPath?: string | readonly string[] | null;
}

interface IDBTransactionOptions {
  readonly durability?: IDBTransactionDurability;
}

interface IDBVersionChangeEventInit extends EventInit {
  readonly newVersion?: number | null;
  readonly oldVersion?: number;
}

interface IIRFilterOptions extends AudioNodeOptions {
  readonly feedback: readonly number[];
  readonly feedforward: readonly number[];
}

interface IdleRequestOptions {
  readonly timeout?: number;
}

interface ImageBitmapOptions {
  readonly colorSpaceConversion?: ColorSpaceConversion;
  readonly imageOrientation?: ImageOrientation;
  readonly premultiplyAlpha?: PremultiplyAlpha;
  readonly resizeHeight?: number;
  readonly resizeQuality?: ResizeQuality;
  readonly resizeWidth?: number;
}

interface ImageBitmapRenderingContextSettings {
  readonly alpha?: boolean;
}

interface ImageDataSettings {
  readonly colorSpace?: PredefinedColorSpace;
}

interface ImageEncodeOptions {
  readonly quality?: number;
  readonly type?: string;
}

interface ImportMeta {
  readonly url: string;
}

interface InputEventInit extends UIEventInit {
  readonly data?: string | null;
  readonly dataTransfer?: DataTransfer | null;
  readonly inputType?: string;
  readonly isComposing?: boolean;
  readonly targetRanges?: readonly StaticRange[];
}

interface IntersectionObserverEntryInit {
  readonly boundingClientRect: DOMRectInit;
  readonly intersectionRatio: number;
  readonly intersectionRect: DOMRectInit;
  readonly isIntersecting: boolean;
  readonly rootBounds: DOMRectInit | null;
  readonly target: Element;
  readonly time: DOMHighResTimeStamp;
}

interface IntersectionObserverInit {
  readonly root?: Element | Document | null;
  readonly rootMargin?: string;
  readonly threshold?: number | readonly number[];
}

interface JsonWebKey {
  readonly alg?: string;
  readonly crv?: string;
  readonly d?: string;
  readonly dp?: string;
  readonly dq?: string;
  readonly e?: string;
  readonly ext?: boolean;
  readonly k?: string;
  readonly key_ops?: readonly string[];
  readonly kty?: string;
  readonly n?: string;
  readonly oth?: readonly RsaOtherPrimesInfo[];
  readonly p?: string;
  readonly q?: string;
  readonly qi?: string;
  readonly use?: string;
  readonly x?: string;
  readonly y?: string;
}

interface KeyAlgorithm {
  readonly name: string;
}

interface KeyboardEventInit extends EventModifierInit {
  /** @deprecated */
  readonly charCode?: number;
  readonly code?: string;
  readonly isComposing?: boolean;
  readonly key?: string;
  /** @deprecated */
  readonly keyCode?: number;
  readonly location?: number;
  readonly repeat?: boolean;
}

interface Keyframe {
  readonly composite?: CompositeOperationOrAuto;
  readonly easing?: string;
  readonly offset?: number | null;
  readonly [property: string]: string | number | null | undefined;
}

interface KeyframeAnimationOptions extends KeyframeEffectOptions {
  readonly id?: string;
  readonly timeline?: AnimationTimeline | null;
}

interface KeyframeEffectOptions extends EffectTiming {
  readonly composite?: CompositeOperation;
  readonly iterationComposite?: IterationCompositeOperation;
  readonly pseudoElement?: string | null;
}

interface LockInfo {
  readonly clientId?: string;
  readonly mode?: LockMode;
  readonly name?: string;
}

interface LockManagerSnapshot {
  readonly held?: readonly LockInfo[];
  readonly pending?: readonly LockInfo[];
}

interface LockOptions {
  readonly ifAvailable?: boolean;
  readonly mode?: LockMode;
  readonly signal?: AbortSignal;
  readonly steal?: boolean;
}

interface MIDIConnectionEventInit extends EventInit {
  readonly port?: MIDIPort;
}

interface MIDIMessageEventInit extends EventInit {
  readonly data?: Uint8Array;
}

interface MIDIOptions {
  readonly software?: boolean;
  readonly sysex?: boolean;
}

interface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo {
  readonly configuration?: MediaDecodingConfiguration;
}

interface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo {
  readonly configuration?: MediaEncodingConfiguration;
}

interface MediaCapabilitiesInfo {
  readonly powerEfficient: boolean;
  readonly smooth: boolean;
  readonly supported: boolean;
}

interface MediaConfiguration {
  readonly audio?: AudioConfiguration;
  readonly video?: VideoConfiguration;
}

interface MediaDecodingConfiguration extends MediaConfiguration {
  readonly type: MediaDecodingType;
}

interface MediaElementAudioSourceOptions {
  readonly mediaElement: HTMLMediaElement;
}

interface MediaEncodingConfiguration extends MediaConfiguration {
  readonly type: MediaEncodingType;
}

interface MediaEncryptedEventInit extends EventInit {
  readonly initData?: ArrayBuffer | null;
  readonly initDataType?: string;
}

interface MediaImage {
  readonly sizes?: string;
  readonly src: string;
  readonly type?: string;
}

interface MediaKeyMessageEventInit extends EventInit {
  readonly message: ArrayBuffer;
  readonly messageType: MediaKeyMessageType;
}

interface MediaKeySystemConfiguration {
  readonly audioCapabilities?: readonly MediaKeySystemMediaCapability[];
  readonly distinctiveIdentifier?: MediaKeysRequirement;
  readonly initDataTypes?: readonly string[];
  readonly label?: string;
  readonly persistentState?: MediaKeysRequirement;
  readonly sessionTypes?: readonly string[];
  readonly videoCapabilities?: readonly MediaKeySystemMediaCapability[];
}

interface MediaKeySystemMediaCapability {
  readonly contentType?: string;
  readonly encryptionScheme?: string | null;
  readonly robustness?: string;
}

interface MediaMetadataInit {
  readonly album?: string;
  readonly artist?: string;
  readonly artwork?: readonly MediaImage[];
  readonly title?: string;
}

interface MediaPositionState {
  readonly duration?: number;
  readonly playbackRate?: number;
  readonly position?: number;
}

interface MediaQueryListEventInit extends EventInit {
  readonly matches?: boolean;
  readonly media?: string;
}

interface MediaRecorderOptions {
  readonly audioBitsPerSecond?: number;
  readonly bitsPerSecond?: number;
  readonly mimeType?: string;
  readonly videoBitsPerSecond?: number;
}

interface MediaSessionActionDetails {
  readonly action: MediaSessionAction;
  readonly fastSeek?: boolean;
  readonly seekOffset?: number;
  readonly seekTime?: number;
}

interface MediaStreamAudioSourceOptions {
  readonly mediaStream: MediaStream;
}

interface MediaStreamConstraints {
  readonly audio?: boolean | MediaTrackConstraints;
  readonly peerIdentity?: string;
  readonly preferCurrentTab?: boolean;
  readonly video?: boolean | MediaTrackConstraints;
}

interface MediaStreamTrackEventInit extends EventInit {
  readonly track: MediaStreamTrack;
}

interface MediaTrackCapabilities {
  readonly aspectRatio?: DoubleRange;
  readonly autoGainControl?: readonly boolean[];
  readonly channelCount?: ULongRange;
  readonly deviceId?: string;
  readonly displaySurface?: string;
  readonly echoCancellation?: readonly boolean[];
  readonly facingMode?: readonly string[];
  readonly frameRate?: DoubleRange;
  readonly groupId?: string;
  readonly height?: ULongRange;
  readonly noiseSuppression?: readonly boolean[];
  readonly sampleRate?: ULongRange;
  readonly sampleSize?: ULongRange;
  readonly width?: ULongRange;
}

interface MediaTrackConstraintSet {
  readonly aspectRatio?: ConstrainDouble;
  readonly autoGainControl?: ConstrainBoolean;
  readonly channelCount?: ConstrainULong;
  readonly deviceId?: ConstrainDOMString;
  readonly displaySurface?: ConstrainDOMString;
  readonly echoCancellation?: ConstrainBoolean;
  readonly facingMode?: ConstrainDOMString;
  readonly frameRate?: ConstrainDouble;
  readonly groupId?: ConstrainDOMString;
  readonly height?: ConstrainULong;
  readonly noiseSuppression?: ConstrainBoolean;
  readonly sampleRate?: ConstrainULong;
  readonly sampleSize?: ConstrainULong;
  readonly width?: ConstrainULong;
}

interface MediaTrackConstraints extends MediaTrackConstraintSet {
  readonly advanced?: readonly MediaTrackConstraintSet[];
}

interface MediaTrackSettings {
  readonly aspectRatio?: number;
  readonly autoGainControl?: boolean;
  readonly channelCount?: number;
  readonly deviceId?: string;
  readonly displaySurface?: string;
  readonly echoCancellation?: boolean;
  readonly facingMode?: string;
  readonly frameRate?: number;
  readonly groupId?: string;
  readonly height?: number;
  readonly noiseSuppression?: boolean;
  readonly sampleRate?: number;
  readonly sampleSize?: number;
  readonly width?: number;
}

interface MediaTrackSupportedConstraints {
  readonly aspectRatio?: boolean;
  readonly autoGainControl?: boolean;
  readonly channelCount?: boolean;
  readonly deviceId?: boolean;
  readonly displaySurface?: boolean;
  readonly echoCancellation?: boolean;
  readonly facingMode?: boolean;
  readonly frameRate?: boolean;
  readonly groupId?: boolean;
  readonly height?: boolean;
  readonly noiseSuppression?: boolean;
  readonly sampleRate?: boolean;
  readonly sampleSize?: boolean;
  readonly width?: boolean;
}

interface MessageEventInit<T = unknown> extends EventInit {
  readonly data?: T;
  readonly lastEventId?: string;
  readonly origin?: string;
  readonly ports?: readonly MessagePort[];
  readonly source?: MessageEventSource | null;
}

interface MouseEventInit extends EventModifierInit {
  readonly button?: number;
  readonly buttons?: number;
  readonly clientX?: number;
  readonly clientY?: number;
  readonly movementX?: number;
  readonly movementY?: number;
  readonly relatedTarget?: EventTarget | null;
  readonly screenX?: number;
  readonly screenY?: number;
}

interface MultiCacheQueryOptions extends CacheQueryOptions {
  readonly cacheName?: string;
}

interface MutationObserverInit {
  /**
   * Set to a list of attribute local names (without namespace) if not all
   * attribute mutations need to be observed and attributes is true or
   * omitted.
   */
  readonly attributeFilter?: readonly string[];
  /**
   * Set to true if attributes is true or omitted and target's attribute value
   * before the mutation needs to be recorded.
   */
  readonly attributeOldValue?: boolean;
  /**
   * Set to true if mutations to target's attributes are to be observed. Can
   * be omitted if attributeOldValue or attributeFilter is specified.
   */
  readonly attributes?: boolean;
  /**
   * Set to true if mutations to target's data are to be observed. Can be
   * omitted if characterDataOldValue is specified.
   */
  readonly characterData?: boolean;
  /**
   * Set to true if characterData is set to true or omitted and target's data
   * before the mutation needs to be recorded.
   */
  readonly characterDataOldValue?: boolean;
  /** Set to true if mutations to target's children are to be observed. */
  readonly childList?: boolean;
  /**
   * Set to true if mutations to not just target, but also target's
   * descendants are to be observed.
   */
  readonly subtree?: boolean;
}

interface NavigationPreloadState {
  readonly enabled?: boolean;
  readonly headerValue?: string;
}

interface NotificationOptions {
  readonly badge?: string;
  readonly body?: string;
  readonly data?: unknown;
  readonly dir?: NotificationDirection;
  readonly icon?: string;
  readonly lang?: string;
  readonly requireInteraction?: boolean;
  readonly silent?: boolean | null;
  readonly tag?: string;
}

interface OfflineAudioCompletionEventInit extends EventInit {
  readonly renderedBuffer: AudioBuffer;
}

interface OfflineAudioContextOptions {
  readonly length: number;
  readonly numberOfChannels?: number;
  readonly sampleRate: number;
}

interface OptionalEffectTiming {
  readonly delay?: number;
  readonly direction?: PlaybackDirection;
  readonly duration?: number | string;
  readonly easing?: string;
  readonly endDelay?: number;
  readonly fill?: FillMode;
  readonly iterationStart?: number;
  readonly iterations?: number;
  readonly playbackRate?: number;
}

interface OscillatorOptions extends AudioNodeOptions {
  readonly detune?: number;
  readonly frequency?: number;
  readonly periodicWave?: PeriodicWave;
  readonly type?: OscillatorType;
}

interface PageTransitionEventInit extends EventInit {
  readonly persisted?: boolean;
}

interface PannerOptions extends AudioNodeOptions {
  readonly coneInnerAngle?: number;
  readonly coneOuterAngle?: number;
  readonly coneOuterGain?: number;
  readonly distanceModel?: DistanceModelType;
  readonly maxDistance?: number;
  readonly orientationX?: number;
  readonly orientationY?: number;
  readonly orientationZ?: number;
  readonly panningModel?: PanningModelType;
  readonly positionX?: number;
  readonly positionY?: number;
  readonly positionZ?: number;
  readonly refDistance?: number;
  readonly rolloffFactor?: number;
}

interface PaymentCurrencyAmount {
  readonly currency: string;
  readonly value: string;
}

interface PaymentDetailsBase {
  readonly displayItems?: readonly PaymentItem[];
  readonly modifiers?: readonly PaymentDetailsModifier[];
}

interface PaymentDetailsInit extends PaymentDetailsBase {
  readonly id?: string;
  readonly total: PaymentItem;
}

interface PaymentDetailsModifier {
  readonly additionalDisplayItems?: readonly PaymentItem[];
  readonly data?: unknown;
  readonly supportedMethods: string;
  readonly total?: PaymentItem;
}

interface PaymentDetailsUpdate extends PaymentDetailsBase {
  readonly paymentMethodErrors?: unknown;
  readonly total?: PaymentItem;
}

interface PaymentItem {
  readonly amount: PaymentCurrencyAmount;
  readonly label: string;
  readonly pending?: boolean;
}

interface PaymentMethodChangeEventInit extends PaymentRequestUpdateEventInit {
  readonly methodDetails?: unknown;
  readonly methodName?: string;
}

interface PaymentMethodData {
  readonly data?: unknown;
  readonly supportedMethods: string;
}

interface PaymentRequestUpdateEventInit extends EventInit {}

interface PaymentValidationErrors {
  readonly error?: string;
  readonly paymentMethod?: unknown;
}

interface Pbkdf2Params extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
  readonly iterations: number;
  readonly salt: BufferSource;
}

interface PerformanceMarkOptions {
  readonly detail?: unknown;
  readonly startTime?: DOMHighResTimeStamp;
}

interface PerformanceMeasureOptions {
  readonly detail?: unknown;
  readonly duration?: DOMHighResTimeStamp;
  readonly end?: string | DOMHighResTimeStamp;
  readonly start?: string | DOMHighResTimeStamp;
}

interface PerformanceObserverInit {
  readonly buffered?: boolean;
  readonly entryTypes?: readonly string[];
  readonly type?: string;
}

interface PeriodicWaveConstraints {
  readonly disableNormalization?: boolean;
}

interface PeriodicWaveOptions extends PeriodicWaveConstraints {
  readonly imag?: readonly number[] | Float32Array;
  readonly real?: readonly number[] | Float32Array;
}

interface PermissionDescriptor {
  readonly name: PermissionName;
}

interface PictureInPictureEventInit extends EventInit {
  readonly pictureInPictureWindow: PictureInPictureWindow;
}

interface PlaneLayout {
  readonly offset: number;
  readonly stride: number;
}

interface PointerEventInit extends MouseEventInit {
  readonly coalescedEvents?: readonly PointerEvent[];
  readonly height?: number;
  readonly isPrimary?: boolean;
  readonly pointerId?: number;
  readonly pointerType?: string;
  readonly predictedEvents?: readonly PointerEvent[];
  readonly pressure?: number;
  readonly tangentialPressure?: number;
  readonly tiltX?: number;
  readonly tiltY?: number;
  readonly twist?: number;
  readonly width?: number;
}

interface PopStateEventInit extends EventInit {
  readonly state?: unknown;
}

interface PositionOptions {
  readonly enableHighAccuracy?: boolean;
  readonly maximumAge?: number;
  readonly timeout?: number;
}

interface ProgressEventInit extends EventInit {
  readonly lengthComputable?: boolean;
  readonly loaded?: number;
  readonly total?: number;
}

interface PromiseRejectionEventInit extends EventInit {
  readonly promise: Promise<unknown>;
  readonly reason?: unknown;
}

interface PropertyDefinition {
  readonly inherits: boolean;
  readonly initialValue?: string;
  readonly name: string;
  readonly syntax?: string;
}

interface PropertyIndexedKeyframes {
  readonly composite?:
    | CompositeOperationOrAuto
    | readonly CompositeOperationOrAuto[];
  readonly easing?: string | readonly string[];
  readonly offset?: number | readonly (number | null)[];
  readonly [property: string]:
    | string
    | readonly string[]
    | number
    | null
    | readonly (number | null)[]
    | undefined;
}

interface PublicKeyCredentialCreationOptions {
  readonly attestation?: AttestationConveyancePreference;
  readonly authenticatorSelection?: AuthenticatorSelectionCriteria;
  readonly challenge: BufferSource;
  readonly excludeCredentials?: readonly PublicKeyCredentialDescriptor[];
  readonly extensions?: AuthenticationExtensionsClientInputs;
  readonly pubKeyCredParams: readonly PublicKeyCredentialParameters[];
  readonly rp: PublicKeyCredentialRpEntity;
  readonly timeout?: number;
  readonly user: PublicKeyCredentialUserEntity;
}

interface PublicKeyCredentialDescriptor {
  readonly id: BufferSource;
  readonly transports?: readonly AuthenticatorTransport[];
  readonly type: PublicKeyCredentialType;
}

interface PublicKeyCredentialEntity {
  readonly name: string;
}

interface PublicKeyCredentialParameters {
  readonly alg: COSEAlgorithmIdentifier;
  readonly type: PublicKeyCredentialType;
}

interface PublicKeyCredentialRequestOptions {
  readonly allowCredentials?: readonly PublicKeyCredentialDescriptor[];
  readonly challenge: BufferSource;
  readonly extensions?: AuthenticationExtensionsClientInputs;
  readonly rpId?: string;
  readonly timeout?: number;
  readonly userVerification?: UserVerificationRequirement;
}

interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {
  readonly id?: string;
}

interface PublicKeyCredentialUserEntity extends PublicKeyCredentialEntity {
  readonly displayName: string;
  readonly id: BufferSource;
}

interface PushSubscriptionJSON {
  readonly endpoint?: string;
  readonly expirationTime?: EpochTimeStamp | null;
  readonly keys?: Record<string, string>;
}

interface PushSubscriptionOptionsInit {
  readonly applicationServerKey?: BufferSource | string | null;
  readonly userVisibleOnly?: boolean;
}

interface QueuingStrategy<T = unknown> {
  readonly highWaterMark?: number;
  readonly size?: QueuingStrategySize<T>;
}

interface QueuingStrategyInit {
  /**
   * Creates a new ByteLengthQueuingStrategy with the provided high water
   * mark.
   *
   * Note that the provided high water mark will not be validated ahead of
   * time. Instead, if it is negative, NaN, or not a number, the resulting
   * ByteLengthQueuingStrategy will cause the corresponding stream constructor
   * to throw.
   */
  readonly highWaterMark: number;
}

interface RTCAnswerOptions extends RTCOfferAnswerOptions {}

interface RTCCertificateExpiration {
  readonly expires?: number;
}

interface RTCConfiguration {
  readonly bundlePolicy?: RTCBundlePolicy;
  readonly certificates?: readonly RTCCertificate[];
  readonly iceCandidatePoolSize?: number;
  readonly iceServers?: readonly RTCIceServer[];
  readonly iceTransportPolicy?: RTCIceTransportPolicy;
  readonly rtcpMuxPolicy?: RTCRtcpMuxPolicy;
}

interface RTCDTMFToneChangeEventInit extends EventInit {
  readonly tone?: string;
}

interface RTCDataChannelEventInit extends EventInit {
  readonly channel: RTCDataChannel;
}

interface RTCDataChannelInit {
  readonly id?: number;
  readonly maxPacketLifeTime?: number;
  readonly maxRetransmits?: number;
  readonly negotiated?: boolean;
  readonly ordered?: boolean;
  readonly protocol?: string;
}

interface RTCDtlsFingerprint {
  readonly algorithm?: string;
  readonly value?: string;
}

interface RTCEncodedAudioFrameMetadata {
  readonly contributingSources?: readonly number[];
  readonly payloadType?: number;
  readonly sequenceNumber?: number;
  readonly synchronizationSource?: number;
}

interface RTCEncodedVideoFrameMetadata {
  readonly contributingSources?: readonly number[];
  readonly dependencies?: readonly number[];
  readonly frameId?: number;
  readonly height?: number;
  readonly payloadType?: number;
  readonly spatialIndex?: number;
  readonly synchronizationSource?: number;
  readonly temporalIndex?: number;
  readonly timestamp?: number;
  readonly width?: number;
}

interface RTCErrorEventInit extends EventInit {
  readonly error: RTCError;
}

interface RTCErrorInit {
  readonly errorDetail: RTCErrorDetailType;
  readonly httpRequestStatusCode?: number;
  readonly receivedAlert?: number;
  readonly sctpCauseCode?: number;
  readonly sdpLineNumber?: number;
  readonly sentAlert?: number;
}

interface RTCIceCandidateInit {
  readonly candidate?: string;
  readonly sdpMLineIndex?: number | null;
  readonly sdpMid?: string | null;
  readonly usernameFragment?: string | null;
}

interface RTCIceCandidatePair {
  readonly local?: RTCIceCandidate;
  readonly remote?: RTCIceCandidate;
}

interface RTCIceCandidatePairStats extends RTCStats {
  readonly availableIncomingBitrate?: number;
  readonly availableOutgoingBitrate?: number;
  readonly bytesReceived?: number;
  readonly bytesSent?: number;
  readonly currentRoundTripTime?: number;
  readonly lastPacketReceivedTimestamp?: DOMHighResTimeStamp;
  readonly lastPacketSentTimestamp?: DOMHighResTimeStamp;
  readonly localCandidateId: string;
  readonly nominated?: boolean;
  readonly remoteCandidateId: string;
  readonly requestsReceived?: number;
  readonly requestsSent?: number;
  readonly responsesReceived?: number;
  readonly responsesSent?: number;
  readonly state: RTCStatsIceCandidatePairState;
  readonly totalRoundTripTime?: number;
  readonly transportId: string;
}

interface RTCIceServer {
  readonly credential?: string;
  readonly urls: string | readonly string[];
  readonly username?: string;
}

interface RTCInboundRtpStreamStats extends RTCReceivedRtpStreamStats {
  readonly audioLevel?: number;
  readonly bytesReceived?: number;
  readonly concealedSamples?: number;
  readonly concealmentEvents?: number;
  readonly decoderImplementation?: string;
  readonly estimatedPlayoutTimestamp?: DOMHighResTimeStamp;
  readonly fecPacketsDiscarded?: number;
  readonly fecPacketsReceived?: number;
  readonly firCount?: number;
  readonly frameHeight?: number;
  readonly frameWidth?: number;
  readonly framesDecoded?: number;
  readonly framesDropped?: number;
  readonly framesPerSecond?: number;
  readonly framesReceived?: number;
  readonly headerBytesReceived?: number;
  readonly insertedSamplesForDeceleration?: number;
  readonly jitterBufferDelay?: number;
  readonly jitterBufferEmittedCount?: number;
  readonly keyFramesDecoded?: number;
  readonly lastPacketReceivedTimestamp?: DOMHighResTimeStamp;
  readonly mid?: string;
  readonly nackCount?: number;
  readonly packetsDiscarded?: number;
  readonly pliCount?: number;
  readonly qpSum?: number;
  readonly remoteId?: string;
  readonly removedSamplesForAcceleration?: number;
  readonly silentConcealedSamples?: number;
  readonly totalAudioEnergy?: number;
  readonly totalDecodeTime?: number;
  readonly totalInterFrameDelay?: number;
  readonly totalProcessingDelay?: number;
  readonly totalSamplesDuration?: number;
  readonly totalSamplesReceived?: number;
  readonly totalSquaredInterFrameDelay?: number;
  readonly trackIdentifier: string;
}

interface RTCLocalSessionDescriptionInit {
  readonly sdp?: string;
  readonly type?: RTCSdpType;
}

interface RTCOfferAnswerOptions {}

interface RTCOfferOptions extends RTCOfferAnswerOptions {
  readonly iceRestart?: boolean;
  readonly offerToReceiveAudio?: boolean;
  readonly offerToReceiveVideo?: boolean;
}

interface RTCOutboundRtpStreamStats extends RTCSentRtpStreamStats {
  readonly firCount?: number;
  readonly frameHeight?: number;
  readonly frameWidth?: number;
  readonly framesEncoded?: number;
  readonly framesPerSecond?: number;
  readonly framesSent?: number;
  readonly headerBytesSent?: number;
  readonly hugeFramesSent?: number;
  readonly keyFramesEncoded?: number;
  readonly mediaSourceId?: string;
  readonly nackCount?: number;
  readonly pliCount?: number;
  readonly qpSum?: number;
  readonly qualityLimitationResolutionChanges?: number;
  readonly remoteId?: string;
  readonly retransmittedBytesSent?: number;
  readonly retransmittedPacketsSent?: number;
  readonly rid?: string;
  readonly rtxSsrc?: number;
  readonly targetBitrate?: number;
  readonly totalEncodeTime?: number;
  readonly totalEncodedBytesTarget?: number;
  readonly totalPacketSendDelay?: number;
}

interface RTCPeerConnectionIceErrorEventInit extends EventInit {
  readonly address?: string | null;
  readonly errorCode: number;
  readonly errorText?: string;
  readonly port?: number | null;
  readonly url?: string;
}

interface RTCPeerConnectionIceEventInit extends EventInit {
  readonly candidate?: RTCIceCandidate | null;
  readonly url?: string | null;
}

interface RTCReceivedRtpStreamStats extends RTCRtpStreamStats {
  readonly jitter?: number;
  readonly packetsLost?: number;
  readonly packetsReceived?: number;
}

interface RTCRtcpParameters {
  readonly cname?: string;
  readonly reducedSize?: boolean;
}

interface RTCRtpCapabilities {
  readonly codecs: readonly RTCRtpCodecCapability[];
  readonly headerExtensions: readonly RTCRtpHeaderExtensionCapability[];
}

interface RTCRtpCodec {
  readonly channels?: number;
  readonly clockRate: number;
  readonly mimeType: string;
  readonly sdpFmtpLine?: string;
}

interface RTCRtpCodecCapability extends RTCRtpCodec {}

interface RTCRtpCodecParameters extends RTCRtpCodec {
  readonly payloadType: number;
}

interface RTCRtpCodingParameters {
  readonly rid?: string;
}

interface RTCRtpContributingSource {
  readonly audioLevel?: number;
  readonly rtpTimestamp: number;
  readonly source: number;
  readonly timestamp: DOMHighResTimeStamp;
}

interface RTCRtpEncodingParameters extends RTCRtpCodingParameters {
  readonly active?: boolean;
  readonly maxBitrate?: number;
  readonly maxFramerate?: number;
  readonly networkPriority?: RTCPriorityType;
  readonly priority?: RTCPriorityType;
  readonly scaleResolutionDownBy?: number;
}

interface RTCRtpHeaderExtensionCapability {
  readonly uri: string;
}

interface RTCRtpHeaderExtensionParameters {
  readonly encrypted?: boolean;
  readonly id: number;
  readonly uri: string;
}

interface RTCRtpParameters {
  readonly codecs: readonly RTCRtpCodecParameters[];
  readonly headerExtensions: readonly RTCRtpHeaderExtensionParameters[];
  readonly rtcp: RTCRtcpParameters;
}

interface RTCRtpReceiveParameters extends RTCRtpParameters {}

interface RTCRtpSendParameters extends RTCRtpParameters {
  readonly degradationPreference?: RTCDegradationPreference;
  readonly encodings: readonly RTCRtpEncodingParameters[];
  readonly transactionId: string;
}

interface RTCRtpStreamStats extends RTCStats {
  readonly codecId?: string;
  readonly kind: string;
  readonly ssrc: number;
  readonly transportId?: string;
}

interface RTCRtpSynchronizationSource extends RTCRtpContributingSource {}

interface RTCRtpTransceiverInit {
  readonly direction?: RTCRtpTransceiverDirection;
  readonly sendEncodings?: readonly RTCRtpEncodingParameters[];
  readonly streams?: readonly MediaStream[];
}

interface RTCSentRtpStreamStats extends RTCRtpStreamStats {
  readonly bytesSent?: number;
  readonly packetsSent?: number;
}

interface RTCSessionDescriptionInit {
  readonly sdp?: string;
  readonly type: RTCSdpType;
}

interface RTCSetParameterOptions {}

interface RTCStats {
  readonly id: string;
  readonly timestamp: DOMHighResTimeStamp;
  readonly type: RTCStatsType;
}

interface RTCTrackEventInit extends EventInit {
  readonly receiver: RTCRtpReceiver;
  readonly streams?: readonly MediaStream[];
  readonly track: MediaStreamTrack;
  readonly transceiver: RTCRtpTransceiver;
}

interface RTCTransportStats extends RTCStats {
  readonly bytesReceived?: number;
  readonly bytesSent?: number;
  readonly dtlsCipher?: string;
  readonly dtlsState: RTCDtlsTransportState;
  readonly localCertificateId?: string;
  readonly remoteCertificateId?: string;
  readonly selectedCandidatePairId?: string;
  readonly srtpCipher?: string;
  readonly tlsVersion?: string;
}

interface ReadableStreamGetReaderOptions {
  /**
   * Creates a ReadableStreamBYOBReader and locks the stream to the new
   * reader.
   *
   * This call behaves the same way as the no-argument variant, except that it
   * only works on readable byte streams, i.e. streams which were constructed
   * specifically with the ability to handle "bring your own buffer" reading.
   * The returned BYOB reader provides the ability to directly read individual
   * chunks from the stream via its read() method, into developer-supplied
   * buffers, allowing more precise control over allocation.
   */
  readonly mode?: ReadableStreamReaderMode;
}

interface ReadableStreamReadDoneResult<T> {
  readonly done: true;
  readonly value?: T;
}

interface ReadableStreamReadValueResult<T> {
  readonly done: false;
  readonly value: T;
}

interface ReadableWritablePair<R = unknown, W = unknown> {
  readonly readable: ReadableStream<R>;
  /**
   * Provides a convenient, chainable way of piping this readable stream
   * through a transform stream (or any other { writable, readable } pair). It
   * simply pipes the stream into the writable side of the supplied pair, and
   * returns the readable side for further use.
   *
   * Piping a stream will lock it for the duration of the pipe, preventing any
   * other consumer from acquiring a reader.
   */
  readonly writable: WritableStream<W>;
}

interface RegistrationOptions {
  readonly scope?: string;
  readonly type?: WorkerType;
  readonly updateViaCache?: ServiceWorkerUpdateViaCache;
}

interface ReportingObserverOptions {
  readonly buffered?: boolean;
  readonly types?: readonly string[];
}

interface RequestInit {
  /** A BodyInit object or null to set request's body. */
  readonly body?: BodyInit | null;
  /**
   * A string indicating how the request will interact with the browser's
   * cache to set request's cache.
   */
  readonly cache?: RequestCache;
  /**
   * A string indicating whether credentials will be sent with the request
   * always, never, or only when sent to a same-origin URL. Sets request's
   * credentials.
   */
  readonly credentials?: RequestCredentials;
  /**
   * A Headers object, an object literal, or an array of two-item arrays to
   * set request's headers.
   */
  readonly headers?: HeadersInit;
  /**
   * A cryptographic hash of the resource to be fetched by request. Sets
   * request's integrity.
   */
  readonly integrity?: string;
  /** A boolean to set request's keepalive. */
  readonly keepalive?: boolean;
  /** A string to set request's method. */
  readonly method?: string;
  /**
   * A string to indicate whether the request will use CORS, or will be
   * restricted to same-origin URLs. Sets request's mode.
   */
  readonly mode?: RequestMode;
  readonly priority?: RequestPriority;
  /**
   * A string indicating whether request follows redirects, results in an
   * error upon encountering a redirect, or returns the redirect (in an opaque
   * fashion). Sets request's redirect.
   */
  readonly redirect?: RequestRedirect;
  /**
   * A string whose value is a same-origin URL, "about:client", or the empty
   * string, to set request's referrer.
   */
  readonly referrer?: string;
  /** A referrer policy to set request's referrerPolicy. */
  readonly referrerPolicy?: ReferrerPolicy;
  /** An AbortSignal to set request's signal. */
  readonly signal?: AbortSignal | null;
  /** Can only be null. Used to disassociate request from any Window. */
  readonly window?: null;
}

interface ResizeObserverOptions {
  readonly box?: ResizeObserverBoxOptions;
}

interface ResponseInit {
  readonly headers?: HeadersInit;
  readonly status?: number;
  readonly statusText?: string;
}

interface RsaHashedImportParams extends Algorithm {
  readonly hash: HashAlgorithmIdentifier;
}

interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {
  readonly hash: KeyAlgorithm;
}

interface RsaHashedKeyGenParams extends RsaKeyGenParams {
  readonly hash: HashAlgorithmIdentifier;
}

interface RsaKeyAlgorithm extends KeyAlgorithm {
  readonly modulusLength: number;
  readonly publicExponent: BigInteger;
}

interface RsaKeyGenParams extends Algorithm {
  readonly modulusLength: number;
  readonly publicExponent: BigInteger;
}

interface RsaOaepParams extends Algorithm {
  readonly label?: BufferSource;
}

interface RsaOtherPrimesInfo {
  readonly d?: string;
  readonly r?: string;
  readonly t?: string;
}

interface RsaPssParams extends Algorithm {
  readonly saltLength: number;
}

interface SVGBoundingBoxOptions {
  readonly clipped?: boolean;
  readonly fill?: boolean;
  readonly markers?: boolean;
  readonly stroke?: boolean;
}

interface ScrollIntoViewOptions extends ScrollOptions {
  readonly block?: ScrollLogicalPosition;
  readonly inline?: ScrollLogicalPosition;
}

interface ScrollOptions {
  readonly behavior?: ScrollBehavior;
}

interface ScrollToOptions extends ScrollOptions {
  readonly left?: number;
  readonly top?: number;
}

interface SecurityPolicyViolationEventInit extends EventInit {
  readonly blockedURI?: string;
  readonly columnNumber?: number;
  readonly disposition: SecurityPolicyViolationEventDisposition;
  readonly documentURI: string;
  readonly effectiveDirective: string;
  readonly lineNumber?: number;
  readonly originalPolicy: string;
  readonly referrer?: string;
  readonly sample?: string;
  readonly sourceFile?: string;
  readonly statusCode: number;
  readonly violatedDirective: string;
}

interface ShadowRootInit {
  readonly delegatesFocus?: boolean;
  readonly mode: ShadowRootMode;
  readonly slotAssignment?: SlotAssignmentMode;
}

interface ShareData {
  readonly files?: readonly File[];
  readonly text?: string;
  readonly title?: string;
  readonly url?: string;
}

interface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit {
  readonly error: SpeechSynthesisErrorCode;
}

interface SpeechSynthesisEventInit extends EventInit {
  readonly charIndex?: number;
  readonly charLength?: number;
  readonly elapsedTime?: number;
  readonly name?: string;
  readonly utterance: SpeechSynthesisUtterance;
}

interface StaticRangeInit {
  readonly endContainer: Node;
  readonly endOffset: number;
  readonly startContainer: Node;
  readonly startOffset: number;
}

interface StereoPannerOptions extends AudioNodeOptions {
  readonly pan?: number;
}

interface StorageEstimate {
  readonly quota?: number;
  readonly usage?: number;
}

interface StorageEventInit extends EventInit {
  readonly key?: string | null;
  readonly newValue?: string | null;
  readonly oldValue?: string | null;
  readonly storageArea?: Storage | null;
  readonly url?: string;
}

interface StreamPipeOptions {
  readonly preventAbort?: boolean;
  readonly preventCancel?: boolean;
  /**
   * Pipes this readable stream to a given writable stream destination. The
   * way in which the piping process behaves under various error conditions
   * can be customized with a number of passed options. It returns a promise
   * that fulfills when the piping process completes successfully, or rejects
   * if any errors were encountered.
   *
   * Piping a stream will lock it for the duration of the pipe, preventing any
   * other consumer from acquiring a reader.
   *
   * Errors and closures of the source and destination streams propagate as
   * follows:
   *
   * An error in this source readable stream will abort destination, unless
   * preventAbort is truthy. The returned promise will be rejected with the
   * source's error, or with any error that occurs during aborting the
   * destination.
   *
   * An error in destination will cancel this source readable stream, unless
   * preventCancel is truthy. The returned promise will be rejected with the
   * destination's error, or with any error that occurs during canceling the
   * source.
   *
   * When this source readable stream closes, destination will be closed,
   * unless preventClose is truthy. The returned promise will be fulfilled
   * once this process completes, unless an error is encountered while closing
   * the destination, in which case it will be rejected with that error.
   *
   * If destination starts out closed or closing, this source readable stream
   * will be canceled, unless preventCancel is true. The returned promise will
   * be rejected with an error indicating piping to a closed stream failed, or
   * with any error that occurs during canceling the source.
   *
   * The signal option can be set to an AbortSignal to allow aborting an
   * ongoing pipe operation via the corresponding AbortController. In this
   * case, this source readable stream will be canceled, and destination
   * aborted, unless the respective options preventCancel or preventAbort are
   * set.
   */
  readonly preventClose?: boolean;
  readonly signal?: AbortSignal;
}

interface StructuredSerializeOptions {
  readonly transfer?: readonly Transferable[];
}

interface SubmitEventInit extends EventInit {
  readonly submitter?: HTMLElement | null;
}

interface TextDecodeOptions {
  readonly stream?: boolean;
}

interface TextDecoderOptions {
  readonly fatal?: boolean;
  readonly ignoreBOM?: boolean;
}

interface TextEncoderEncodeIntoResult {
  readonly read: number;
  readonly written: number;
}

interface ToggleEventInit extends EventInit {
  readonly newState?: string;
  readonly oldState?: string;
}

interface TouchEventInit extends EventModifierInit {
  readonly changedTouches?: readonly Touch[];
  readonly targetTouches?: readonly Touch[];
  readonly touches?: readonly Touch[];
}

interface TouchInit {
  readonly altitudeAngle?: number;
  readonly azimuthAngle?: number;
  readonly clientX?: number;
  readonly clientY?: number;
  readonly force?: number;
  readonly identifier: number;
  readonly pageX?: number;
  readonly pageY?: number;
  readonly radiusX?: number;
  readonly radiusY?: number;
  readonly rotationAngle?: number;
  readonly screenX?: number;
  readonly screenY?: number;
  readonly target: EventTarget;
  readonly touchType?: TouchType;
}

interface TrackEventInit extends EventInit {
  readonly track?: TextTrack | null;
}

interface Transformer<I = unknown, O = unknown> {
  readonly flush?: TransformerFlushCallback<O>;
  readonly readableType?: undefined;
  readonly start?: TransformerStartCallback<O>;
  readonly transform?: TransformerTransformCallback<I, O>;
  readonly writableType?: undefined;
}

interface TransitionEventInit extends EventInit {
  readonly elapsedTime?: number;
  readonly propertyName?: string;
  readonly pseudoElement?: string;
}

interface UIEventInit extends EventInit {
  readonly detail?: number;
  readonly view?: Window | null;
  /** @deprecated */
  readonly which?: number;
}

interface ULongRange {
  readonly max?: number;
  readonly min?: number;
}

interface UnderlyingByteSource {
  readonly autoAllocateChunkSize?: number;
  readonly cancel?: UnderlyingSourceCancelCallback;
  readonly pull?: (
    controller: ReadableByteStreamController,
  ) => void | PromiseLike<void>;
  readonly start?: (controller: ReadableByteStreamController) => unknown;
  readonly type: 'bytes';
}

interface UnderlyingDefaultSource<R = unknown> {
  readonly cancel?: UnderlyingSourceCancelCallback;
  readonly pull?: (
    controller: ReadableStreamDefaultController<R>,
  ) => void | PromiseLike<void>;
  readonly start?: (controller: ReadableStreamDefaultController<R>) => unknown;
  readonly type?: undefined;
}

interface UnderlyingSink<W = unknown> {
  readonly abort?: UnderlyingSinkAbortCallback;
  readonly close?: UnderlyingSinkCloseCallback;
  readonly start?: UnderlyingSinkStartCallback;
  readonly type?: undefined;
  readonly write?: UnderlyingSinkWriteCallback<W>;
}

interface UnderlyingSource<R = unknown> {
  readonly autoAllocateChunkSize?: number;
  readonly cancel?: UnderlyingSourceCancelCallback;
  readonly pull?: UnderlyingSourcePullCallback<R>;
  readonly start?: UnderlyingSourceStartCallback<R>;
  readonly type?: ReadableStreamType;
}

interface ValidityStateFlags {
  readonly badInput?: boolean;
  readonly customError?: boolean;
  readonly patternMismatch?: boolean;
  readonly rangeOverflow?: boolean;
  readonly rangeUnderflow?: boolean;
  readonly stepMismatch?: boolean;
  readonly tooLong?: boolean;
  readonly tooShort?: boolean;
  readonly typeMismatch?: boolean;
  readonly valueMissing?: boolean;
}

interface VideoColorSpaceInit {
  readonly fullRange?: boolean | null;
  readonly matrix?: VideoMatrixCoefficients | null;
  readonly primaries?: VideoColorPrimaries | null;
  readonly transfer?: VideoTransferCharacteristics | null;
}

interface VideoConfiguration {
  readonly bitrate: number;
  readonly colorGamut?: ColorGamut;
  readonly contentType: string;
  readonly framerate: number;
  readonly hdrMetadataType?: HdrMetadataType;
  readonly height: number;
  readonly scalabilityMode?: string;
  readonly transferFunction?: TransferFunction;
  readonly width: number;
}

interface VideoDecoderConfig {
  readonly codec: string;
  readonly codedHeight?: number;
  readonly codedWidth?: number;
  readonly colorSpace?: VideoColorSpaceInit;
  readonly description?: AllowSharedBufferSource;
  readonly displayAspectHeight?: number;
  readonly displayAspectWidth?: number;
  readonly hardwareAcceleration?: HardwareAcceleration;
  readonly optimizeForLatency?: boolean;
}

interface VideoDecoderInit {
  readonly error: WebCodecsErrorCallback;
  readonly output: VideoFrameOutputCallback;
}

interface VideoDecoderSupport {
  readonly config?: VideoDecoderConfig;
  readonly supported?: boolean;
}

interface VideoEncoderConfig {
  readonly alpha?: AlphaOption;
  readonly avc?: AvcEncoderConfig;
  readonly bitrate?: number;
  readonly bitrateMode?: VideoEncoderBitrateMode;
  readonly codec: string;
  readonly displayHeight?: number;
  readonly displayWidth?: number;
  readonly framerate?: number;
  readonly hardwareAcceleration?: HardwareAcceleration;
  readonly height: number;
  readonly latencyMode?: LatencyMode;
  readonly scalabilityMode?: string;
  readonly width: number;
}

interface VideoEncoderEncodeOptions {
  readonly keyFrame?: boolean;
}

interface VideoEncoderInit {
  readonly error: WebCodecsErrorCallback;
  readonly output: EncodedVideoChunkOutputCallback;
}

interface VideoEncoderSupport {
  readonly config?: VideoEncoderConfig;
  readonly supported?: boolean;
}

interface VideoFrameBufferInit {
  readonly codedHeight: number;
  readonly codedWidth: number;
  readonly colorSpace?: VideoColorSpaceInit;
  readonly displayHeight?: number;
  readonly displayWidth?: number;
  readonly duration?: number;
  readonly format: VideoPixelFormat;
  readonly layout?: readonly PlaneLayout[];
  readonly timestamp: number;
  readonly visibleRect?: DOMRectInit;
}

interface VideoFrameCallbackMetadata {
  readonly captureTime?: DOMHighResTimeStamp;
  readonly expectedDisplayTime: DOMHighResTimeStamp;
  readonly height: number;
  readonly mediaTime: number;
  readonly presentationTime: DOMHighResTimeStamp;
  readonly presentedFrames: number;
  readonly processingDuration?: number;
  readonly receiveTime?: DOMHighResTimeStamp;
  readonly rtpTimestamp?: number;
  readonly width: number;
}

interface VideoFrameCopyToOptions {
  readonly layout?: readonly PlaneLayout[];
  readonly rect?: DOMRectInit;
}

interface VideoFrameInit {
  readonly alpha?: AlphaOption;
  readonly displayHeight?: number;
  readonly displayWidth?: number;
  readonly duration?: number;
  readonly timestamp?: number;
  readonly visibleRect?: DOMRectInit;
}

interface WaveShaperOptions extends AudioNodeOptions {
  readonly curve?: readonly number[] | Float32Array;
  readonly oversample?: OverSampleType;
}

interface WebGLContextAttributes {
  readonly alpha?: boolean;
  readonly antialias?: boolean;
  readonly depth?: boolean;
  readonly desynchronized?: boolean;
  readonly failIfMajorPerformanceCaveat?: boolean;
  readonly powerPreference?: WebGLPowerPreference;
  readonly premultipliedAlpha?: boolean;
  readonly preserveDrawingBuffer?: boolean;
  readonly stencil?: boolean;
}

interface WebGLContextEventInit extends EventInit {
  readonly statusMessage?: string;
}

interface WebTransportCloseInfo {
  readonly closeCode?: number;
  readonly reason?: string;
}

interface WebTransportErrorOptions {
  readonly source?: WebTransportErrorSource;
  readonly streamErrorCode?: number | null;
}

interface WebTransportHash {
  readonly algorithm?: string;
  readonly value?: BufferSource;
}

interface WebTransportOptions {
  readonly allowPooling?: boolean;
  readonly congestionControl?: WebTransportCongestionControl;
  readonly requireUnreliable?: boolean;
  readonly serverCertificateHashes?: readonly WebTransportHash[];
}

interface WebTransportSendStreamOptions {
  readonly sendOrder?: number;
}

interface WheelEventInit extends MouseEventInit {
  readonly deltaMode?: number;
  readonly deltaX?: number;
  readonly deltaY?: number;
  readonly deltaZ?: number;
}

interface WindowPostMessageOptions extends StructuredSerializeOptions {
  readonly targetOrigin?: string;
}

interface WorkerOptions {
  readonly credentials?: RequestCredentials;
  readonly name?: string;
  readonly type?: WorkerType;
}

interface WorkletOptions {
  readonly credentials?: RequestCredentials;
}

interface WriteParams {
  readonly data?: BufferSource | Blob | string | null;
  readonly position?: number | null;
  readonly size?: number | null;
  readonly type: WriteCommandType;
}

type NodeFilter = ((node: Node) => number) | { acceptNode(node: Node): number };

declare var NodeFilter: {
  readonly FILTER_ACCEPT: 1;
  readonly FILTER_REJECT: 2;
  readonly FILTER_SKIP: 3;
  readonly SHOW_ALL: 0xffffffff;
  readonly SHOW_ELEMENT: 0x1;
  readonly SHOW_ATTRIBUTE: 0x2;
  readonly SHOW_TEXT: 0x4;
  readonly SHOW_CDATA_SECTION: 0x8;
  readonly SHOW_ENTITY_REFERENCE: 0x10;
  readonly SHOW_ENTITY: 0x20;
  readonly SHOW_PROCESSING_INSTRUCTION: 0x40;
  readonly SHOW_COMMENT: 0x80;
  readonly SHOW_DOCUMENT: 0x100;
  readonly SHOW_DOCUMENT_TYPE: 0x200;
  readonly SHOW_DOCUMENT_FRAGMENT: 0x400;
  readonly SHOW_NOTATION: 0x800;
};

type XPathNSResolver =
  | ((prefix: string | null) => string | null)
  | { lookupNamespaceURI(prefix: string | null): string | null };

/**
 * The ANGLE_instanced_arrays extension is part of the WebGL API and allows to
 * draw the same object, or groups of similar objects multiple times, if they
 * share the same vertex data, primitive count and type.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
 */
interface ANGLE_instanced_arrays {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE)
   */
  drawArraysInstancedANGLE(
    mode: GLenum,
    first: GLint,
    count: GLsizei,
    primcount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE)
   */
  drawElementsInstancedANGLE(
    mode: GLenum,
    count: GLsizei,
    type: GLenum,
    offset: GLintptr,
    primcount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE)
   */
  vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;
  readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe;
}

interface ARIAMixin {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic)
   */
  readonly ariaAtomic: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete)
   */
  readonly ariaAutoComplete: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy)
   */
  readonly ariaBusy: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked)
   */
  readonly ariaChecked: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount)
   */
  readonly ariaColCount: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex)
   */
  readonly ariaColIndex: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan)
   */
  readonly ariaColSpan: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent)
   */
  readonly ariaCurrent: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription)
   */
  readonly ariaDescription: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled)
   */
  readonly ariaDisabled: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded)
   */
  readonly ariaExpanded: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup)
   */
  readonly ariaHasPopup: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden)
   */
  readonly ariaHidden: string | null;
  readonly ariaInvalid: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts)
   */
  readonly ariaKeyShortcuts: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel)
   */
  readonly ariaLabel: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel)
   */
  readonly ariaLevel: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive)
   */
  readonly ariaLive: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal)
   */
  readonly ariaModal: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine)
   */
  readonly ariaMultiLine: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable)
   */
  readonly ariaMultiSelectable: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation)
   */
  readonly ariaOrientation: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder)
   */
  readonly ariaPlaceholder: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet)
   */
  readonly ariaPosInSet: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed)
   */
  readonly ariaPressed: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly)
   */
  readonly ariaReadOnly: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired)
   */
  readonly ariaRequired: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription)
   */
  readonly ariaRoleDescription: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount)
   */
  readonly ariaRowCount: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex)
   */
  readonly ariaRowIndex: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan)
   */
  readonly ariaRowSpan: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected)
   */
  readonly ariaSelected: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize)
   */
  readonly ariaSetSize: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort)
   */
  readonly ariaSort: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax)
   */
  readonly ariaValueMax: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin)
   */
  readonly ariaValueMin: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow)
   */
  readonly ariaValueNow: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText)
   */
  readonly ariaValueText: string | null;
  readonly role: string | null;
}

/**
 * A controller object that allows you to abort one or more DOM requests as and
 * when desired.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
 */
interface AbortController {
  /**
   * Returns the AbortSignal object associated with this object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
   */
  readonly signal: AbortSignal;
  /**
   * Invoking this method will set this object's AbortSignal's aborted flag
   * and signal to any observers that the associated activity is to be
   * aborted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortController/abort)
   */
  abort(reason?: unknown): void;
}

declare var AbortController: {
  readonly prototype: AbortController;
  new (): AbortController;
};

interface AbortSignalEventMap {
  readonly abort: Event;
}

/**
 * A signal object that allows you to communicate with a DOM request (such as a
 * Fetch) and abort it if required via an AbortController object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
 */
interface AbortSignal extends EventTarget {
  /**
   * Returns true if this AbortSignal's AbortController has signaled to abort,
   * and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
   */
  readonly aborted: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)
   */
  readonly onabort: ((this: AbortSignal, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)
   */
  readonly reason: unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/throwIfAborted)
   */
  throwIfAborted(): void;
  addEventListener<K extends keyof AbortSignalEventMap>(
    type: K,
    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AbortSignalEventMap>(
    type: K,
    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var AbortSignal: {
  readonly prototype: AbortSignal;
  new (): AbortSignal;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_static)
   */
  abort(reason?: unknown): AbortSignal;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/timeout_static)
   */
  timeout(milliseconds: number): AbortSignal;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange) */
interface AbstractRange {
  /**
   * Returns true if range is collapsed, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)
   */
  readonly collapsed: boolean;
  /**
   * Returns range's end node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)
   */
  readonly endContainer: Node;
  /**
   * Returns range's end offset.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)
   */
  readonly endOffset: number;
  /**
   * Returns range's start node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)
   */
  readonly startContainer: Node;
  /**
   * Returns range's start offset.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)
   */
  readonly startOffset: number;
}

declare var AbstractRange: {
  readonly prototype: AbstractRange;
  new (): AbstractRange;
};

interface AbstractWorkerEventMap {
  readonly error: ErrorEvent;
}

interface AbstractWorker {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)
   */
  readonly onerror: ((this: AbstractWorker, ev: ErrorEvent) => unknown) | null;
  addEventListener<K extends keyof AbstractWorkerEventMap>(
    type: K,
    listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AbstractWorkerEventMap>(
    type: K,
    listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/**
 * A node able to provide real-time frequency and time-domain analysis
 * information. It is an AudioNode that passes the audio stream unchanged from
 * the input to the output, but allows you to take the generated data, process
 * it, and create audio visualizations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode)
 */
interface AnalyserNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize)
   */
  readonly fftSize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount)
   */
  readonly frequencyBinCount: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels)
   */
  readonly maxDecibels: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels)
   */
  readonly minDecibels: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant)
   */
  readonly smoothingTimeConstant: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteFrequencyData)
   */
  getByteFrequencyData(array: Uint8Array): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteTimeDomainData)
   */
  getByteTimeDomainData(array: Uint8Array): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatFrequencyData)
   */
  getFloatFrequencyData(array: Float32Array): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatTimeDomainData)
   */
  getFloatTimeDomainData(array: Float32Array): void;
}

declare var AnalyserNode: {
  readonly prototype: AnalyserNode;
  new (context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode;
};

interface Animatable {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/animate)
   */
  animate(
    keyframes: readonly Keyframe[] | PropertyIndexedKeyframes | null,
    options?: number | KeyframeAnimationOptions,
  ): Animation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAnimations)
   */
  getAnimations(options?: GetAnimationsOptions): readonly Animation[];
}

interface AnimationEventMap {
  readonly cancel: AnimationPlaybackEvent;
  readonly finish: AnimationPlaybackEvent;
  readonly remove: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation) */
interface Animation extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/currentTime)
   */
  readonly currentTime: CSSNumberish | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/effect)
   */
  readonly effect: AnimationEffect | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/finished)
   */
  readonly finished: Promise<Animation>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/id) */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event)
   */
  readonly oncancel:
    | ((this: Animation, ev: AnimationPlaybackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish_event)
   */
  readonly onfinish:
    | ((this: Animation, ev: AnimationPlaybackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/remove_event)
   */
  readonly onremove: ((this: Animation, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/pending)
   */
  readonly pending: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/playState)
   */
  readonly playState: AnimationPlayState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate)
   */
  readonly playbackRate: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/ready)
   */
  readonly ready: Promise<Animation>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/replaceState)
   */
  readonly replaceState: AnimationReplaceState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/startTime)
   */
  readonly startTime: CSSNumberish | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/timeline)
   */
  readonly timeline: AnimationTimeline | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel)
   */
  cancel(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/commitStyles)
   */
  commitStyles(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish)
   */
  finish(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/pause)
   */
  pause(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/persist)
   */
  persist(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/play)
   */
  play(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/reverse)
   */
  reverse(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Animation/updatePlaybackRate)
   */
  updatePlaybackRate(playbackRate: number): void;
  addEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: Animation, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: Animation, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Animation: {
  readonly prototype: Animation;
  new (
    effect?: AnimationEffect | null,
    timeline?: AnimationTimeline | null,
  ): Animation;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect) */
interface AnimationEffect {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getComputedTiming)
   */
  getComputedTiming(): ComputedEffectTiming;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getTiming)
   */
  getTiming(): EffectTiming;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/updateTiming)
   */
  updateTiming(timing?: OptionalEffectTiming): void;
}

declare var AnimationEffect: {
  readonly prototype: AnimationEffect;
  new (): AnimationEffect;
};

/**
 * Events providing information related to animations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent)
 */
interface AnimationEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName)
   */
  readonly animationName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime)
   */
  readonly elapsedTime: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement)
   */
  readonly pseudoElement: string;
}

declare var AnimationEvent: {
  readonly prototype: AnimationEvent;
  new (
    type: string,
    animationEventInitDict?: AnimationEventInit,
  ): AnimationEvent;
};

interface AnimationFrameProvider {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame)
   */
  cancelAnimationFrame(handle: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame)
   */
  requestAnimationFrame(callback: FrameRequestCallback): number;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent)
 */
interface AnimationPlaybackEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime)
   */
  readonly currentTime: CSSNumberish | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime)
   */
  readonly timelineTime: CSSNumberish | null;
}

declare var AnimationPlaybackEvent: {
  readonly prototype: AnimationPlaybackEvent;
  new (
    type: string,
    eventInitDict?: AnimationPlaybackEventInit,
  ): AnimationPlaybackEvent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline) */
interface AnimationTimeline {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime)
   */
  readonly currentTime: CSSNumberish | null;
}

declare var AnimationTimeline: {
  readonly prototype: AnimationTimeline;
  new (): AnimationTimeline;
};

/**
 * A DOM element's attribute as an object. In most DOM methods, you will
 * probably directly retrieve the attribute as a string (e.g.,
 * Element.getAttribute(), but certain functions (e.g.,
 * Element.getAttributeNode()) or means of iterating give Attr types.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr)
 */
interface Attr extends Node {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Attr/localName)
   */
  readonly localName: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/name) */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI)
   */
  readonly namespaceURI: string | null;
  readonly ownerDocument: Document;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement)
   */
  readonly ownerElement: Element | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/prefix) */
  readonly prefix: string | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Attr/specified)
   */
  readonly specified: boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/value) */
  readonly value: string;
}

declare var Attr: {
  readonly prototype: Attr;
  new (): Attr;
};

/**
 * A short audio asset residing in memory, created from an audio file using the
 * AudioContext.decodeAudioData() method, or from raw data using
 * AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then
 * be played by being passed into an AudioBufferSourceNode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer)
 */
interface AudioBuffer {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration)
   */
  readonly duration: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels)
   */
  readonly numberOfChannels: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate)
   */
  readonly sampleRate: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyFromChannel)
   */
  copyFromChannel(
    destination: Float32Array,
    channelNumber: number,
    bufferOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyToChannel)
   */
  copyToChannel(
    source: Float32Array,
    channelNumber: number,
    bufferOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/getChannelData)
   */
  getChannelData(channel: number): Float32Array;
}

declare var AudioBuffer: {
  readonly prototype: AudioBuffer;
  new (options: AudioBufferOptions): AudioBuffer;
};

/**
 * An AudioScheduledSourceNode which represents an audio source consisting of
 * in-memory audio data, stored in an AudioBuffer. It's especially useful for
 * playing back audio which has particularly stringent timing accuracy
 * requirements, such as for sounds that must match a specific rhythm and can be
 * kept in memory rather than being played from disk or the network.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)
 */
interface AudioBufferSourceNode extends AudioScheduledSourceNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer)
   */
  readonly buffer: AudioBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune)
   */
  readonly detune: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop)
   */
  readonly loop: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd)
   */
  readonly loopEnd: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart)
   */
  readonly loopStart: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate)
   */
  readonly playbackRate: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/start)
   */
  start(when?: number, offset?: number, duration?: number): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: AudioBufferSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: AudioBufferSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var AudioBufferSourceNode: {
  readonly prototype: AudioBufferSourceNode;
  new (
    context: BaseAudioContext,
    options?: AudioBufferSourceOptions,
  ): AudioBufferSourceNode;
};

/**
 * An audio-processing graph built from audio modules linked together, each
 * represented by an AudioNode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext)
 */
interface AudioContext extends BaseAudioContext {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency)
   */
  readonly baseLatency: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency)
   */
  readonly outputLatency: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/close)
   */
  close(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaElementSource)
   */
  createMediaElementSource(
    mediaElement: HTMLMediaElement,
  ): MediaElementAudioSourceNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamDestination)
   */
  createMediaStreamDestination(): MediaStreamAudioDestinationNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamSource)
   */
  createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/getOutputTimestamp)
   */
  getOutputTimestamp(): AudioTimestamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/resume)
   */
  resume(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/suspend)
   */
  suspend(): Promise<void>;
  addEventListener<K extends keyof BaseAudioContextEventMap>(
    type: K,
    listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof BaseAudioContextEventMap>(
    type: K,
    listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var AudioContext: {
  readonly prototype: AudioContext;
  new (contextOptions?: AudioContextOptions): AudioContext;
};

/**
 * AudioDestinationNode has no output (as it is the output, no more AudioNode
 * can be linked after it in the audio graph) and one input. The number of
 * channels in the input must be between 0 and the maxChannelCount value or an
 * exception is raised.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)
 */
interface AudioDestinationNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount)
   */
  readonly maxChannelCount: number;
}

declare var AudioDestinationNode: {
  readonly prototype: AudioDestinationNode;
  new (): AudioDestinationNode;
};

/**
 * The position and orientation of the unique person listening to the audio
 * scene, and is used in audio spatialization. All PannerNodes spatialize in
 * relation to the AudioListener stored in the BaseAudioContext.listener
 * attribute.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener)
 */
interface AudioListener {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX)
   */
  readonly forwardX: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY)
   */
  readonly forwardY: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ)
   */
  readonly forwardZ: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX)
   */
  readonly positionX: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY)
   */
  readonly positionY: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ)
   */
  readonly positionZ: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upX)
   */
  readonly upX: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upY)
   */
  readonly upY: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ)
   */
  readonly upZ: AudioParam;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/setOrientation)
   */
  setOrientation(
    x: number,
    y: number,
    z: number,
    xUp: number,
    yUp: number,
    zUp: number,
  ): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/setPosition)
   */
  setPosition(x: number, y: number, z: number): void;
}

declare var AudioListener: {
  readonly prototype: AudioListener;
  new (): AudioListener;
};

/**
 * A generic interface for representing an audio processing module. Examples
 * include:
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode)
 */
interface AudioNode extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount)
   */
  readonly channelCount: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode)
   */
  readonly channelCountMode: ChannelCountMode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation)
   */
  readonly channelInterpretation: ChannelInterpretation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/context)
   */
  readonly context: BaseAudioContext;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs)
   */
  readonly numberOfInputs: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs)
   */
  readonly numberOfOutputs: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)
   */
  connect(
    destinationNode: AudioNode,
    output?: number,
    input?: number,
  ): AudioNode;
  connect(destinationParam: AudioParam, output?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)
   */
  disconnect(): void;
  disconnect(output: number): void;
  disconnect(destinationNode: AudioNode): void;
  disconnect(destinationNode: AudioNode, output: number): void;
  disconnect(destinationNode: AudioNode, output: number, input: number): void;
  disconnect(destinationParam: AudioParam): void;
  disconnect(destinationParam: AudioParam, output: number): void;
}

declare var AudioNode: {
  readonly prototype: AudioNode;
  new (): AudioNode;
};

/**
 * The Web Audio API's AudioParam interface represents an audio-related
 * parameter, usually a parameter of an AudioNode (such as GainNode.gain).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam)
 */
interface AudioParam {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/automationRate)
   */
  readonly automationRate: AutomationRate;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue)
   */
  readonly defaultValue: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue)
   */
  readonly maxValue: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue)
   */
  readonly minValue: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/value)
   */
  readonly value: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelAndHoldAtTime)
   */
  cancelAndHoldAtTime(cancelTime: number): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelScheduledValues)
   */
  cancelScheduledValues(cancelTime: number): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/exponentialRampToValueAtTime)
   */
  exponentialRampToValueAtTime(value: number, endTime: number): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/linearRampToValueAtTime)
   */
  linearRampToValueAtTime(value: number, endTime: number): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setTargetAtTime)
   */
  setTargetAtTime(
    target: number,
    startTime: number,
    timeConstant: number,
  ): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueAtTime)
   */
  setValueAtTime(value: number, startTime: number): AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueCurveAtTime)
   */
  setValueCurveAtTime(
    values: readonly number[] | Float32Array,
    startTime: number,
    duration: number,
  ): AudioParam;
}

declare var AudioParam: {
  readonly prototype: AudioParam;
  new (): AudioParam;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParamMap) */
interface AudioParamMap {
  forEach(
    callbackfn: (value: AudioParam, key: string, parent: AudioParamMap) => void,
    thisArg?: unknown,
  ): void;
}

declare var AudioParamMap: {
  readonly prototype: AudioParamMap;
  new (): AudioParamMap;
};

/**
 * The Web Audio API events that occur when a ScriptProcessorNode input buffer
 * is ready to be processed.
 *
 * @deprecated As of the August 29 2014 Web Audio API spec publication, this
 *   feature has been marked as deprecated, and is soon to be replaced by
 *   AudioWorklet.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent)
 */
interface AudioProcessingEvent extends Event {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/inputBuffer)
   */
  readonly inputBuffer: AudioBuffer;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/outputBuffer)
   */
  readonly outputBuffer: AudioBuffer;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/playbackTime)
   */
  readonly playbackTime: number;
}

/** @deprecated */
declare var AudioProcessingEvent: {
  readonly prototype: AudioProcessingEvent;
  new (
    type: string,
    eventInitDict: AudioProcessingEventInit,
  ): AudioProcessingEvent;
};

interface AudioScheduledSourceNodeEventMap {
  readonly ended: Event;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode)
 */
interface AudioScheduledSourceNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event)
   */
  readonly onended:
    | ((this: AudioScheduledSourceNode, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/start)
   */
  start(when?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/stop)
   */
  stop(when?: number): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: AudioScheduledSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: AudioScheduledSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var AudioScheduledSourceNode: {
  readonly prototype: AudioScheduledSourceNode;
  new (): AudioScheduledSourceNode;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorklet)
 */
interface AudioWorklet extends Worklet {}

declare var AudioWorklet: {
  readonly prototype: AudioWorklet;
  new (): AudioWorklet;
};

interface AudioWorkletNodeEventMap {
  readonly processorerror: Event;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)
 */
interface AudioWorkletNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event)
   */
  readonly onprocessorerror:
    | ((this: AudioWorkletNode, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters)
   */
  readonly parameters: AudioParamMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port)
   */
  readonly port: MessagePort;
  addEventListener<K extends keyof AudioWorkletNodeEventMap>(
    type: K,
    listener: (
      this: AudioWorkletNode,
      ev: AudioWorkletNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AudioWorkletNodeEventMap>(
    type: K,
    listener: (
      this: AudioWorkletNode,
      ev: AudioWorkletNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var AudioWorkletNode: {
  readonly prototype: AudioWorkletNode;
  new (
    context: BaseAudioContext,
    name: string,
    options?: AudioWorkletNodeOptions,
  ): AudioWorkletNode;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)
 */
interface AuthenticatorAssertionResponse extends AuthenticatorResponse {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData)
   */
  readonly authenticatorData: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature)
   */
  readonly signature: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle)
   */
  readonly userHandle: ArrayBuffer | null;
}

declare var AuthenticatorAssertionResponse: {
  readonly prototype: AuthenticatorAssertionResponse;
  new (): AuthenticatorAssertionResponse;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)
 */
interface AuthenticatorAttestationResponse extends AuthenticatorResponse {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject)
   */
  readonly attestationObject: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getAuthenticatorData)
   */
  getAuthenticatorData(): ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKey)
   */
  getPublicKey(): ArrayBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKeyAlgorithm)
   */
  getPublicKeyAlgorithm(): COSEAlgorithmIdentifier;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getTransports)
   */
  getTransports(): readonly string[];
}

declare var AuthenticatorAttestationResponse: {
  readonly prototype: AuthenticatorAttestationResponse;
  new (): AuthenticatorAttestationResponse;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)
 */
interface AuthenticatorResponse {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON)
   */
  readonly clientDataJSON: ArrayBuffer;
}

declare var AuthenticatorResponse: {
  readonly prototype: AuthenticatorResponse;
  new (): AuthenticatorResponse;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp) */
interface BarProp {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BarProp/visible)
   */
  readonly visible: boolean;
}

declare var BarProp: {
  readonly prototype: BarProp;
  new (): BarProp;
};

interface BaseAudioContextEventMap {
  readonly statechange: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext) */
interface BaseAudioContext extends EventTarget {
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)
   */
  readonly audioWorklet: AudioWorklet;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime)
   */
  readonly currentTime: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination)
   */
  readonly destination: AudioDestinationNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener)
   */
  readonly listener: AudioListener;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event)
   */
  readonly onstatechange:
    | ((this: BaseAudioContext, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate)
   */
  readonly sampleRate: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state)
   */
  readonly state: AudioContextState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createAnalyser)
   */
  createAnalyser(): AnalyserNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBiquadFilter)
   */
  createBiquadFilter(): BiquadFilterNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBuffer)
   */
  createBuffer(
    numberOfChannels: number,
    length: number,
    sampleRate: number,
  ): AudioBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBufferSource)
   */
  createBufferSource(): AudioBufferSourceNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelMerger)
   */
  createChannelMerger(numberOfInputs?: number): ChannelMergerNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelSplitter)
   */
  createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConstantSource)
   */
  createConstantSource(): ConstantSourceNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConvolver)
   */
  createConvolver(): ConvolverNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDelay)
   */
  createDelay(maxDelayTime?: number): DelayNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDynamicsCompressor)
   */
  createDynamicsCompressor(): DynamicsCompressorNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createGain)
   */
  createGain(): GainNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createIIRFilter)
   */
  createIIRFilter(
    feedforward: readonly number[],
    feedback: readonly number[],
  ): IIRFilterNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createOscillator)
   */
  createOscillator(): OscillatorNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPanner)
   */
  createPanner(): PannerNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPeriodicWave)
   */
  createPeriodicWave(
    real: readonly number[] | Float32Array,
    imag: readonly number[] | Float32Array,
    constraints?: PeriodicWaveConstraints,
  ): PeriodicWave;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createScriptProcessor)
   */
  createScriptProcessor(
    bufferSize?: number,
    numberOfInputChannels?: number,
    numberOfOutputChannels?: number,
  ): ScriptProcessorNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createStereoPanner)
   */
  createStereoPanner(): StereoPannerNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createWaveShaper)
   */
  createWaveShaper(): WaveShaperNode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/decodeAudioData)
   */
  decodeAudioData(
    audioData: ArrayBuffer,
    successCallback?: DecodeSuccessCallback | null,
    errorCallback?: DecodeErrorCallback | null,
  ): Promise<AudioBuffer>;
  addEventListener<K extends keyof BaseAudioContextEventMap>(
    type: K,
    listener: (
      this: BaseAudioContext,
      ev: BaseAudioContextEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof BaseAudioContextEventMap>(
    type: K,
    listener: (
      this: BaseAudioContext,
      ev: BaseAudioContextEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var BaseAudioContext: {
  readonly prototype: BaseAudioContext;
  new (): BaseAudioContext;
};

/**
 * The beforeunload event is fired when the window, the document and its
 * resources are about to be unloaded.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)
 */
interface BeforeUnloadEvent extends Event {
  /** @deprecated */
  readonly returnValue: unknown;
}

declare var BeforeUnloadEvent: {
  readonly prototype: BeforeUnloadEvent;
  new (): BeforeUnloadEvent;
};

/**
 * A simple low-order filter, and is created using the
 * AudioContext.createBiquadFilter() method. It is an AudioNode that can
 * represent different kinds of filters, tone control devices, and graphic
 * equalizers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)
 */
interface BiquadFilterNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q)
   */
  readonly Q: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune)
   */
  readonly detune: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency)
   */
  readonly frequency: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain)
   */
  readonly gain: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type)
   */
  readonly type: BiquadFilterType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/getFrequencyResponse)
   */
  getFrequencyResponse(
    frequencyHz: Float32Array,
    magResponse: Float32Array,
    phaseResponse: Float32Array,
  ): void;
}

declare var BiquadFilterNode: {
  readonly prototype: BiquadFilterNode;
  new (
    context: BaseAudioContext,
    options?: BiquadFilterOptions,
  ): BiquadFilterNode;
};

/**
 * A file-like object of immutable, raw data. Blobs represent data that isn't
 * necessarily in a JavaScript-native format. The File interface is based on
 * Blob, inheriting blob functionality and expanding it to support files on the
 * user's system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
 */
interface Blob {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */
  readonly size: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */
  readonly type: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)
   */
  arrayBuffer(): Promise<ArrayBuffer>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */
  slice(start?: number, end?: number, contentType?: string): Blob;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream) */
  stream(): ReadableStream<Uint8Array>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */
  text(): Promise<string>;
}

declare var Blob: {
  readonly prototype: Blob;
  new (blobParts?: readonly BlobPart[], options?: BlobPropertyBag): Blob;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent) */
interface BlobEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/data)
   */
  readonly data: Blob;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode)
   */
  readonly timecode: DOMHighResTimeStamp;
}

declare var BlobEvent: {
  readonly prototype: BlobEvent;
  new (type: string, eventInitDict: BlobEventInit): BlobEvent;
};

interface Body {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body) */
  readonly body: ReadableStream<Uint8Array> | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)
   */
  readonly bodyUsed: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/arrayBuffer)
   */
  arrayBuffer(): Promise<ArrayBuffer>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/blob) */
  blob(): Promise<Blob>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/formData)
   */
  formData(): Promise<FormData>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/json) */
  json(): Promise<unknown>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/text) */
  text(): Promise<string>;
}

interface BroadcastChannelEventMap {
  readonly message: MessageEvent;
  readonly messageerror: MessageEvent;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel) */
interface BroadcastChannel extends EventTarget {
  /**
   * Returns the channel name (as passed to the constructor).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)
   */
  readonly onmessage:
    | ((this: BroadcastChannel, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)
   */
  readonly onmessageerror:
    | ((this: BroadcastChannel, ev: MessageEvent) => unknown)
    | null;
  /**
   * Closes the BroadcastChannel object, opening it up to garbage collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/close)
   */
  close(): void;
  /**
   * Sends the given message to other BroadcastChannel objects set up for this
   * channel. Messages can be structured objects, e.g. nested objects and
   * arrays.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/postMessage)
   */
  postMessage(message: unknown): void;
  addEventListener<K extends keyof BroadcastChannelEventMap>(
    type: K,
    listener: (
      this: BroadcastChannel,
      ev: BroadcastChannelEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof BroadcastChannelEventMap>(
    type: K,
    listener: (
      this: BroadcastChannel,
      ev: BroadcastChannelEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var BroadcastChannel: {
  readonly prototype: BroadcastChannel;
  new (name: string): BroadcastChannel;
};

/**
 * This Streams API interface provides a built-in byte length queuing strategy
 * that can be used when constructing streams.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
 */
interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)
   */
  readonly highWaterMark: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)
   */
  readonly size: QueuingStrategySize<ArrayBufferView>;
}

declare var ByteLengthQueuingStrategy: {
  readonly prototype: ByteLengthQueuingStrategy;
  new (init: QueuingStrategyInit): ByteLengthQueuingStrategy;
};

/**
 * A CDATA section that can be used within XML to include extended portions of
 * unescaped text. The symbols < and & don’t need escaping as they normally do
 * when inside a CDATA section.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CDATASection)
 */
interface CDATASection extends Text {}

declare var CDATASection: {
  readonly prototype: CDATASection;
  new (): CDATASection;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation) */
interface CSSAnimation extends Animation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName)
   */
  readonly animationName: string;
  addEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var CSSAnimation: {
  readonly prototype: CSSAnimation;
  new (): CSSAnimation;
};

/**
 * A single condition CSS at-rule, which consists of a condition and a statement
 * block. It is a child of CSSGroupingRule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)
 */
interface CSSConditionRule extends CSSGroupingRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText)
   */
  readonly conditionText: string;
}

declare var CSSConditionRule: {
  readonly prototype: CSSConditionRule;
  new (): CSSConditionRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule) */
interface CSSContainerRule extends CSSConditionRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName)
   */
  readonly containerName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery)
   */
  readonly containerQuery: string;
}

declare var CSSContainerRule: {
  readonly prototype: CSSContainerRule;
  new (): CSSContainerRule;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule)
 */
interface CSSCounterStyleRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols)
   */
  readonly additiveSymbols: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback)
   */
  readonly fallback: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative)
   */
  readonly negative: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad)
   */
  readonly pad: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix)
   */
  readonly prefix: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range)
   */
  readonly range: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs)
   */
  readonly speakAs: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix)
   */
  readonly suffix: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols)
   */
  readonly symbols: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system)
   */
  readonly system: string;
}

declare var CSSCounterStyleRule: {
  readonly prototype: CSSCounterStyleRule;
  new (): CSSCounterStyleRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule) */
interface CSSFontFaceRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule/style)
   */
  readonly style: CSSStyleDeclaration;
}

declare var CSSFontFaceRule: {
  readonly prototype: CSSFontFaceRule;
  new (): CSSFontFaceRule;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule)
 */
interface CSSFontFeatureValuesRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily)
   */
  readonly fontFamily: string;
}

declare var CSSFontFeatureValuesRule: {
  readonly prototype: CSSFontFeatureValuesRule;
  new (): CSSFontFeatureValuesRule;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule)
 */
interface CSSFontPaletteValuesRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette)
   */
  readonly basePalette: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily)
   */
  readonly fontFamily: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors)
   */
  readonly overrideColors: string;
}

declare var CSSFontPaletteValuesRule: {
  readonly prototype: CSSFontPaletteValuesRule;
  new (): CSSFontPaletteValuesRule;
};

/**
 * Any CSS at-rule that contains other rules nested within it.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)
 */
interface CSSGroupingRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules)
   */
  readonly cssRules: CSSRuleList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/deleteRule)
   */
  deleteRule(index: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/insertRule)
   */
  insertRule(rule: string, index?: number): number;
}

declare var CSSGroupingRule: {
  readonly prototype: CSSGroupingRule;
  new (): CSSGroupingRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue) */
interface CSSImageValue extends CSSStyleValue {}

declare var CSSImageValue: {
  readonly prototype: CSSImageValue;
  new (): CSSImageValue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule) */
interface CSSImportRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href)
   */
  readonly href: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName)
   */
  readonly layerName: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/media)
   */
  readonly media: MediaList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet)
   */
  readonly styleSheet: CSSStyleSheet | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText)
   */
  readonly supportsText: string | null;
}

declare var CSSImportRule: {
  readonly prototype: CSSImportRule;
  new (): CSSImportRule;
};

/**
 * An object representing a set of style for a given keyframe. It corresponds to
 * the contains of a single keyframe of a @keyframes at-rule. It implements the
 * CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule)
 */
interface CSSKeyframeRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText)
   */
  readonly keyText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/style)
   */
  readonly style: CSSStyleDeclaration;
}

declare var CSSKeyframeRule: {
  readonly prototype: CSSKeyframeRule;
  new (): CSSKeyframeRule;
};

/**
 * An object representing a complete set of keyframes for a CSS animation. It
 * corresponds to the contains of a whole @keyframes at-rule. It implements the
 * CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule)
 */
interface CSSKeyframesRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules)
   */
  readonly cssRules: CSSRuleList;
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/appendRule)
   */
  appendRule(rule: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/deleteRule)
   */
  deleteRule(select: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/findRule)
   */
  findRule(select: string): CSSKeyframeRule | null;
  readonly [index: number]: CSSKeyframeRule;
}

declare var CSSKeyframesRule: {
  readonly prototype: CSSKeyframesRule;
  new (): CSSKeyframesRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue) */
interface CSSKeywordValue extends CSSStyleValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)
   */
  readonly value: string;
}

declare var CSSKeywordValue: {
  readonly prototype: CSSKeywordValue;
  new (value: string): CSSKeywordValue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule) */
interface CSSLayerBlockRule extends CSSGroupingRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name)
   */
  readonly name: string;
}

declare var CSSLayerBlockRule: {
  readonly prototype: CSSLayerBlockRule;
  new (): CSSLayerBlockRule;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule)
 */
interface CSSLayerStatementRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList)
   */
  readonly nameList: ReadonlyArray<string>;
}

declare var CSSLayerStatementRule: {
  readonly prototype: CSSLayerStatementRule;
  new (): CSSLayerStatementRule;
};

interface CSSMathClamp extends CSSMathValue {
  readonly lower: CSSNumericValue;
  readonly upper: CSSNumericValue;
  readonly value: CSSNumericValue;
}

declare var CSSMathClamp: {
  readonly prototype: CSSMathClamp;
  new (
    lower: CSSNumberish,
    value: CSSNumberish,
    upper: CSSNumberish,
  ): CSSMathClamp;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert) */
interface CSSMathInvert extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)
   */
  readonly value: CSSNumericValue;
}

declare var CSSMathInvert: {
  readonly prototype: CSSMathInvert;
  new (arg: CSSNumberish): CSSMathInvert;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax) */
interface CSSMathMax extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)
   */
  readonly values: CSSNumericArray;
}

declare var CSSMathMax: {
  readonly prototype: CSSMathMax;
  new (...args: readonly CSSNumberish[]): CSSMathMax;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin) */
interface CSSMathMin extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)
   */
  readonly values: CSSNumericArray;
}

declare var CSSMathMin: {
  readonly prototype: CSSMathMin;
  new (...args: readonly CSSNumberish[]): CSSMathMin;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate) */
interface CSSMathNegate extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)
   */
  readonly value: CSSNumericValue;
}

declare var CSSMathNegate: {
  readonly prototype: CSSMathNegate;
  new (arg: CSSNumberish): CSSMathNegate;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct) */
interface CSSMathProduct extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)
   */
  readonly values: CSSNumericArray;
}

declare var CSSMathProduct: {
  readonly prototype: CSSMathProduct;
  new (...args: readonly CSSNumberish[]): CSSMathProduct;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum) */
interface CSSMathSum extends CSSMathValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)
   */
  readonly values: CSSNumericArray;
}

declare var CSSMathSum: {
  readonly prototype: CSSMathSum;
  new (...args: readonly CSSNumberish[]): CSSMathSum;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue) */
interface CSSMathValue extends CSSNumericValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)
   */
  readonly operator: CSSMathOperator;
}

declare var CSSMathValue: {
  readonly prototype: CSSMathValue;
  new (): CSSMathValue;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)
 */
interface CSSMatrixComponent extends CSSTransformComponent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)
   */
  readonly matrix: DOMMatrix;
}

declare var CSSMatrixComponent: {
  readonly prototype: CSSMatrixComponent;
  new (
    matrix: DOMMatrixReadOnly,
    options?: CSSMatrixComponentOptions,
  ): CSSMatrixComponent;
};

/**
 * A single CSS @media rule. It implements the CSSConditionRule interface, and
 * therefore the CSSGroupingRule and the CSSRule interface with a type value of
 * 4 (CSSRule.MEDIA_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule)
 */
interface CSSMediaRule extends CSSConditionRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule/media)
   */
  readonly media: MediaList;
}

declare var CSSMediaRule: {
  readonly prototype: CSSMediaRule;
  new (): CSSMediaRule;
};

/**
 * An object representing a single CSS @namespace at-rule. It implements the
 * CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule)
 */
interface CSSNamespaceRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI)
   */
  readonly namespaceURI: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix)
   */
  readonly prefix: string;
}

declare var CSSNamespaceRule: {
  readonly prototype: CSSNamespaceRule;
  new (): CSSNamespaceRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray) */
interface CSSNumericArray {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)
   */
  readonly length: number;
  forEach(
    callbackfn: (
      value: CSSNumericValue,
      key: number,
      parent: CSSNumericArray,
    ) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: CSSNumericValue;
}

declare var CSSNumericArray: {
  readonly prototype: CSSNumericArray;
  new (): CSSNumericArray;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue) */
interface CSSNumericValue extends CSSStyleValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add)
   */
  add(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div)
   */
  div(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/equals)
   */
  equals(...value: readonly CSSNumberish[]): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/max)
   */
  max(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/min)
   */
  min(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/mul)
   */
  mul(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/sub)
   */
  sub(...values: readonly CSSNumberish[]): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/to)
   */
  to(unit: string): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/toSum)
   */
  toSum(...units: readonly string[]): CSSMathSum;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/type)
   */
  type(): CSSNumericType;
}

declare var CSSNumericValue: {
  readonly prototype: CSSNumericValue;
  new (): CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/parse_static)
   */
  parse(cssText: string): CSSNumericValue;
};

/**
 * CSSPageRule is an interface representing a single CSS @page rule. It
 * implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule)
 */
interface CSSPageRule extends CSSGroupingRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText)
   */
  readonly selectorText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/style)
   */
  readonly style: CSSStyleDeclaration;
}

declare var CSSPageRule: {
  readonly prototype: CSSPageRule;
  new (): CSSPageRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective) */
interface CSSPerspective extends CSSTransformComponent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)
   */
  readonly length: CSSPerspectiveValue;
}

declare var CSSPerspective: {
  readonly prototype: CSSPerspective;
  new (length: CSSPerspectiveValue): CSSPerspective;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule) */
interface CSSPropertyRule extends CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits)
   */
  readonly inherits: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue)
   */
  readonly initialValue: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax)
   */
  readonly syntax: string;
}

declare var CSSPropertyRule: {
  readonly prototype: CSSPropertyRule;
  new (): CSSPropertyRule;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate) */
interface CSSRotate extends CSSTransformComponent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)
   */
  readonly angle: CSSNumericValue;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x) */
  readonly x: CSSNumberish;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y) */
  readonly y: CSSNumberish;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z) */
  readonly z: CSSNumberish;
}

declare var CSSRotate: {
  readonly prototype: CSSRotate;
  new (angle: CSSNumericValue): CSSRotate;
  new (
    x: CSSNumberish,
    y: CSSNumberish,
    z: CSSNumberish,
    angle: CSSNumericValue,
  ): CSSRotate;
};

/**
 * A single CSS rule. There are several types of rules, listed in the Type
 * constants section below.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule)
 */
interface CSSRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText)
   */
  readonly cssText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule)
   */
  readonly parentRule: CSSRule | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet)
   */
  readonly parentStyleSheet: CSSStyleSheet | null;
  /**
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/type)
   */
  readonly type: number;
  readonly STYLE_RULE: 1;
  readonly CHARSET_RULE: 2;
  readonly IMPORT_RULE: 3;
  readonly MEDIA_RULE: 4;
  readonly FONT_FACE_RULE: 5;
  readonly PAGE_RULE: 6;
  readonly NAMESPACE_RULE: 10;
  readonly KEYFRAMES_RULE: 7;
  readonly KEYFRAME_RULE: 8;
  readonly SUPPORTS_RULE: 12;
  readonly COUNTER_STYLE_RULE: 11;
  readonly FONT_FEATURE_VALUES_RULE: 14;
}

declare var CSSRule: {
  readonly prototype: CSSRule;
  new (): CSSRule;
  readonly STYLE_RULE: 1;
  readonly CHARSET_RULE: 2;
  readonly IMPORT_RULE: 3;
  readonly MEDIA_RULE: 4;
  readonly FONT_FACE_RULE: 5;
  readonly PAGE_RULE: 6;
  readonly NAMESPACE_RULE: 10;
  readonly KEYFRAMES_RULE: 7;
  readonly KEYFRAME_RULE: 8;
  readonly SUPPORTS_RULE: 12;
  readonly COUNTER_STYLE_RULE: 11;
  readonly FONT_FEATURE_VALUES_RULE: 14;
};

/**
 * A CSSRuleList is an (indirect-modify only) array-like object containing an
 * ordered collection of CSSRule objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList)
 */
interface CSSRuleList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/item)
   */
  item(index: number): CSSRule | null;
  readonly [index: number]: CSSRule;
}

declare var CSSRuleList: {
  readonly prototype: CSSRuleList;
  new (): CSSRuleList;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale) */
interface CSSScale extends CSSTransformComponent {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x) */
  readonly x: CSSNumberish;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y) */
  readonly y: CSSNumberish;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z) */
  readonly z: CSSNumberish;
}

declare var CSSScale: {
  readonly prototype: CSSScale;
  new (x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew) */
interface CSSSkew extends CSSTransformComponent {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax) */
  readonly ax: CSSNumericValue;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay) */
  readonly ay: CSSNumericValue;
}

declare var CSSSkew: {
  readonly prototype: CSSSkew;
  new (ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX) */
interface CSSSkewX extends CSSTransformComponent {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax) */
  readonly ax: CSSNumericValue;
}

declare var CSSSkewX: {
  readonly prototype: CSSSkewX;
  new (ax: CSSNumericValue): CSSSkewX;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY) */
interface CSSSkewY extends CSSTransformComponent {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay) */
  readonly ay: CSSNumericValue;
}

declare var CSSSkewY: {
  readonly prototype: CSSSkewY;
  new (ay: CSSNumericValue): CSSSkewY;
};

/**
 * An object that is a CSS declaration block, and exposes style information and
 * various style-related methods and properties.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)
 */
interface CSSStyleDeclaration {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/accent-color) */
  readonly accentColor: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content) */
  readonly alignContent: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items) */
  readonly alignItems: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self) */
  readonly alignSelf: string;
  readonly alignmentBaseline: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/all) */
  readonly all: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation) */
  readonly animation: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-composition)
   */
  readonly animationComposition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
   */
  readonly animationDelay: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
   */
  readonly animationDirection: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
   */
  readonly animationDuration: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
   */
  readonly animationFillMode: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
   */
  readonly animationIterationCount: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)
   */
  readonly animationName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
   */
  readonly animationPlayState: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
   */
  readonly animationTimingFunction: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance) */
  readonly appearance: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio) */
  readonly aspectRatio: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter)
   */
  readonly backdropFilter: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
   */
  readonly backfaceVisibility: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background) */
  readonly background: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-attachment)
   */
  readonly backgroundAttachment: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode)
   */
  readonly backgroundBlendMode: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)
   */
  readonly backgroundClip: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-color)
   */
  readonly backgroundColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-image)
   */
  readonly backgroundImage: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)
   */
  readonly backgroundOrigin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-position)
   */
  readonly backgroundPosition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-x)
   */
  readonly backgroundPositionX: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-y)
   */
  readonly backgroundPositionY: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-repeat)
   */
  readonly backgroundRepeat: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)
   */
  readonly backgroundSize: string;
  readonly baselineShift: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/baseline-source)
   */
  readonly baselineSource: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/block-size) */
  readonly blockSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border) */
  readonly border: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block) */
  readonly borderBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-color)
   */
  readonly borderBlockColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end)
   */
  readonly borderBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color)
   */
  readonly borderBlockEndColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style)
   */
  readonly borderBlockEndStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)
   */
  readonly borderBlockEndWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start)
   */
  readonly borderBlockStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color)
   */
  readonly borderBlockStartColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style)
   */
  readonly borderBlockStartStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)
   */
  readonly borderBlockStartWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-style)
   */
  readonly borderBlockStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-width)
   */
  readonly borderBlockWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom) */
  readonly borderBottom: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color)
   */
  readonly borderBottomColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
   */
  readonly borderBottomLeftRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
   */
  readonly borderBottomRightRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style)
   */
  readonly borderBottomStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)
   */
  readonly borderBottomWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-collapse)
   */
  readonly borderCollapse: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-color) */
  readonly borderColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius)
   */
  readonly borderEndEndRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius)
   */
  readonly borderEndStartRadius: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image) */
  readonly borderImage: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)
   */
  readonly borderImageOutset: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat)
   */
  readonly borderImageRepeat: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-slice)
   */
  readonly borderImageSlice: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-source)
   */
  readonly borderImageSource: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-width)
   */
  readonly borderImageWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline) */
  readonly borderInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-color)
   */
  readonly borderInlineColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end)
   */
  readonly borderInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color)
   */
  readonly borderInlineEndColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style)
   */
  readonly borderInlineEndStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)
   */
  readonly borderInlineEndWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start)
   */
  readonly borderInlineStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color)
   */
  readonly borderInlineStartColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style)
   */
  readonly borderInlineStartStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)
   */
  readonly borderInlineStartWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-style)
   */
  readonly borderInlineStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)
   */
  readonly borderInlineWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left) */
  readonly borderLeft: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-color)
   */
  readonly borderLeftColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-style)
   */
  readonly borderLeftStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-width)
   */
  readonly borderLeftWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius) */
  readonly borderRadius: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right) */
  readonly borderRight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-color)
   */
  readonly borderRightColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-style)
   */
  readonly borderRightStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-width)
   */
  readonly borderRightWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-spacing)
   */
  readonly borderSpacing: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius)
   */
  readonly borderStartEndRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius)
   */
  readonly borderStartStartRadius: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-style) */
  readonly borderStyle: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top) */
  readonly borderTop: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-color)
   */
  readonly borderTopColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
   */
  readonly borderTopLeftRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
   */
  readonly borderTopRightRadius: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-style)
   */
  readonly borderTopStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-width)
   */
  readonly borderTopWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-width) */
  readonly borderWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/bottom) */
  readonly bottom: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow) */
  readonly boxShadow: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing) */
  readonly boxSizing: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-after) */
  readonly breakAfter: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-before) */
  readonly breakBefore: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-inside) */
  readonly breakInside: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caption-side) */
  readonly captionSide: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caret-color) */
  readonly caretColor: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clear) */
  readonly clear: string;
  /**
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip)
   */
  readonly clip: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-path) */
  readonly clipPath: string;
  readonly clipRule: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color) */
  readonly color: string;
  readonly colorInterpolation: string;
  readonly colorInterpolationFilters: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-scheme) */
  readonly colorScheme: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-count) */
  readonly columnCount: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-fill) */
  readonly columnFill: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-gap) */
  readonly columnGap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule) */
  readonly columnRule: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-color)
   */
  readonly columnRuleColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-style)
   */
  readonly columnRuleStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-width)
   */
  readonly columnRuleWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-span) */
  readonly columnSpan: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-width) */
  readonly columnWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/columns) */
  readonly columns: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain) */
  readonly contain: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size)
   */
  readonly containIntrinsicBlockSize: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)
   */
  readonly containIntrinsicHeight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size)
   */
  readonly containIntrinsicInlineSize: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)
   */
  readonly containIntrinsicSize: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)
   */
  readonly containIntrinsicWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container) */
  readonly container: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/container-name)
   */
  readonly containerName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/container-type)
   */
  readonly containerType: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content) */
  readonly content: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/counter-increment)
   */
  readonly counterIncrement: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-reset) */
  readonly counterReset: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-set) */
  readonly counterSet: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat)
   */
  readonly cssFloat: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText)
   */
  readonly cssText: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cursor) */
  readonly cursor: string;
  readonly cx: string;
  readonly cy: string;
  readonly d: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/direction) */
  readonly direction: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/display) */
  readonly display: string;
  readonly dominantBaseline: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/empty-cells) */
  readonly emptyCells: string;
  readonly fill: string;
  readonly fillOpacity: string;
  readonly fillRule: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter) */
  readonly filter: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex) */
  readonly flex: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis) */
  readonly flexBasis: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
   */
  readonly flexDirection: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow) */
  readonly flexFlow: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow) */
  readonly flexGrow: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink) */
  readonly flexShrink: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap) */
  readonly flexWrap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/float) */
  readonly float: string;
  readonly floodColor: string;
  readonly floodOpacity: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font) */
  readonly font: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-family) */
  readonly fontFamily: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings)
   */
  readonly fontFeatureSettings: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-kerning) */
  readonly fontKerning: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing)
   */
  readonly fontOpticalSizing: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-palette) */
  readonly fontPalette: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size) */
  readonly fontSize: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust)
   */
  readonly fontSizeAdjust: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-stretch) */
  readonly fontStretch: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-style) */
  readonly fontStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis)
   */
  readonly fontSynthesis: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps)
   */
  readonly fontSynthesisSmallCaps: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style)
   */
  readonly fontSynthesisStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight)
   */
  readonly fontSynthesisWeight: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant) */
  readonly fontVariant: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates)
   */
  readonly fontVariantAlternates: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps)
   */
  readonly fontVariantCaps: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian)
   */
  readonly fontVariantEastAsian: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures)
   */
  readonly fontVariantLigatures: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric)
   */
  readonly fontVariantNumeric: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-position)
   */
  readonly fontVariantPosition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings)
   */
  readonly fontVariationSettings: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-weight) */
  readonly fontWeight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust)
   */
  readonly forcedColorAdjust: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/gap) */
  readonly gap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid) */
  readonly grid: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-area) */
  readonly gridArea: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns)
   */
  readonly gridAutoColumns: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow)
   */
  readonly gridAutoFlow: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows)
   */
  readonly gridAutoRows: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column) */
  readonly gridColumn: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-end)
   */
  readonly gridColumnEnd: string;
  /** @deprecated This is a legacy alias of `columnGap`. */
  readonly gridColumnGap: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-start)
   */
  readonly gridColumnStart: string;
  /** @deprecated This is a legacy alias of `gap`. */
  readonly gridGap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row) */
  readonly gridRow: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-end) */
  readonly gridRowEnd: string;
  /** @deprecated This is a legacy alias of `rowGap`. */
  readonly gridRowGap: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-start)
   */
  readonly gridRowStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template) */
  readonly gridTemplate: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas)
   */
  readonly gridTemplateAreas: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns)
   */
  readonly gridTemplateColumns: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows)
   */
  readonly gridTemplateRows: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/height) */
  readonly height: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character)
   */
  readonly hyphenateCharacter: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphens) */
  readonly hyphens: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/image-orientation)
   */
  readonly imageOrientation: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/image-rendering)
   */
  readonly imageRendering: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inline-size) */
  readonly inlineSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset) */
  readonly inset: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block) */
  readonly insetBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-end)
   */
  readonly insetBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-start)
   */
  readonly insetBlockStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline) */
  readonly insetInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end)
   */
  readonly insetInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start)
   */
  readonly insetInlineStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/isolation) */
  readonly isolation: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)
   */
  readonly justifyContent: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-items) */
  readonly justifyItems: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-self) */
  readonly justifySelf: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/left) */
  readonly left: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/letter-spacing)
   */
  readonly letterSpacing: string;
  readonly lightingColor: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-break) */
  readonly lineBreak: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-height) */
  readonly lineHeight: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style) */
  readonly listStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-image)
   */
  readonly listStyleImage: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-position)
   */
  readonly listStylePosition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-type)
   */
  readonly listStyleType: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin) */
  readonly margin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block) */
  readonly marginBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)
   */
  readonly marginBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)
   */
  readonly marginBlockStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-bottom) */
  readonly marginBottom: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline) */
  readonly marginInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)
   */
  readonly marginInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)
   */
  readonly marginInlineStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-left) */
  readonly marginLeft: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-right) */
  readonly marginRight: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-top) */
  readonly marginTop: string;
  readonly marker: string;
  readonly markerEnd: string;
  readonly markerMid: string;
  readonly markerStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask) */
  readonly mask: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip) */
  readonly maskClip: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
   */
  readonly maskComposite: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image) */
  readonly maskImage: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-mode) */
  readonly maskMode: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin) */
  readonly maskOrigin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position) */
  readonly maskPosition: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat) */
  readonly maskRepeat: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size) */
  readonly maskSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-type) */
  readonly maskType: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-depth) */
  readonly mathDepth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-style) */
  readonly mathStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/max-block-size)
   */
  readonly maxBlockSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-height) */
  readonly maxHeight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)
   */
  readonly maxInlineSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-width) */
  readonly maxWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/min-block-size)
   */
  readonly minBlockSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-height) */
  readonly minHeight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)
   */
  readonly minInlineSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-width) */
  readonly minWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode)
   */
  readonly mixBlendMode: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-fit) */
  readonly objectFit: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/object-position)
   */
  readonly objectPosition: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset) */
  readonly offset: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-anchor) */
  readonly offsetAnchor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/offset-distance)
   */
  readonly offsetDistance: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-path) */
  readonly offsetPath: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/offset-position)
   */
  readonly offsetPosition: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-rotate) */
  readonly offsetRotate: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/opacity) */
  readonly opacity: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order) */
  readonly order: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/orphans) */
  readonly orphans: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline) */
  readonly outline: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-color) */
  readonly outlineColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/outline-offset)
   */
  readonly outlineOffset: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-style) */
  readonly outlineStyle: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-width) */
  readonly outlineWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow) */
  readonly overflow: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor)
   */
  readonly overflowAnchor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin)
   */
  readonly overflowClipMargin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap) */
  readonly overflowWrap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-x) */
  readonly overflowX: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-y) */
  readonly overflowY: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior)
   */
  readonly overscrollBehavior: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block)
   */
  readonly overscrollBehaviorBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline)
   */
  readonly overscrollBehaviorInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x)
   */
  readonly overscrollBehaviorX: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y)
   */
  readonly overscrollBehaviorY: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding) */
  readonly padding: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block) */
  readonly paddingBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)
   */
  readonly paddingBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)
   */
  readonly paddingBlockStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-bottom)
   */
  readonly paddingBottom: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline)
   */
  readonly paddingInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)
   */
  readonly paddingInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)
   */
  readonly paddingInlineStart: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-left) */
  readonly paddingLeft: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-right) */
  readonly paddingRight: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-top) */
  readonly paddingTop: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page) */
  readonly page: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-after)
   */
  readonly pageBreakAfter: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-before)
   */
  readonly pageBreakBefore: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)
   */
  readonly pageBreakInside: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/paint-order) */
  readonly paintOrder: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule)
   */
  readonly parentRule: CSSRule | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective) */
  readonly perspective: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
   */
  readonly perspectiveOrigin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-content) */
  readonly placeContent: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-items) */
  readonly placeItems: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-self) */
  readonly placeSelf: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/pointer-events)
   */
  readonly pointerEvents: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/position) */
  readonly position: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust)
   */
  readonly printColorAdjust: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/quotes) */
  readonly quotes: string;
  readonly r: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/resize) */
  readonly resize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/right) */
  readonly right: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rotate) */
  readonly rotate: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/row-gap) */
  readonly rowGap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-position) */
  readonly rubyPosition: string;
  readonly rx: string;
  readonly ry: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scale) */
  readonly scale: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior)
   */
  readonly scrollBehavior: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin) */
  readonly scrollMargin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)
   */
  readonly scrollMarginBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)
   */
  readonly scrollMarginBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)
   */
  readonly scrollMarginBlockStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)
   */
  readonly scrollMarginBottom: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)
   */
  readonly scrollMarginInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)
   */
  readonly scrollMarginInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)
   */
  readonly scrollMarginInlineStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)
   */
  readonly scrollMarginLeft: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)
   */
  readonly scrollMarginRight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)
   */
  readonly scrollMarginTop: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)
   */
  readonly scrollPadding: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)
   */
  readonly scrollPaddingBlock: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)
   */
  readonly scrollPaddingBlockEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)
   */
  readonly scrollPaddingBlockStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)
   */
  readonly scrollPaddingBottom: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)
   */
  readonly scrollPaddingInline: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)
   */
  readonly scrollPaddingInlineEnd: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)
   */
  readonly scrollPaddingInlineStart: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)
   */
  readonly scrollPaddingLeft: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)
   */
  readonly scrollPaddingRight: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)
   */
  readonly scrollPaddingTop: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align)
   */
  readonly scrollSnapAlign: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop)
   */
  readonly scrollSnapStop: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type)
   */
  readonly scrollSnapType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color)
   */
  readonly scrollbarColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter)
   */
  readonly scrollbarGutter: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width)
   */
  readonly scrollbarWidth: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)
   */
  readonly shapeImageThreshold: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-margin) */
  readonly shapeMargin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-outside) */
  readonly shapeOutside: string;
  readonly shapeRendering: string;
  readonly stopColor: string;
  readonly stopOpacity: string;
  readonly stroke: string;
  readonly strokeDasharray: string;
  readonly strokeDashoffset: string;
  readonly strokeLinecap: string;
  readonly strokeLinejoin: string;
  readonly strokeMiterlimit: string;
  readonly strokeOpacity: string;
  readonly strokeWidth: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/tab-size) */
  readonly tabSize: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/table-layout) */
  readonly tableLayout: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align) */
  readonly textAlign: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-align-last)
   */
  readonly textAlignLast: string;
  readonly textAnchor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright)
   */
  readonly textCombineUpright: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration)
   */
  readonly textDecoration: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color)
   */
  readonly textDecorationColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line)
   */
  readonly textDecorationLine: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink)
   */
  readonly textDecorationSkipInk: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style)
   */
  readonly textDecorationStyle: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness)
   */
  readonly textDecorationThickness: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis) */
  readonly textEmphasis: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color)
   */
  readonly textEmphasisColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position)
   */
  readonly textEmphasisPosition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style)
   */
  readonly textEmphasisStyle: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-indent) */
  readonly textIndent: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-orientation)
   */
  readonly textOrientation: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-overflow) */
  readonly textOverflow: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-rendering)
   */
  readonly textRendering: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-shadow) */
  readonly textShadow: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-transform)
   */
  readonly textTransform: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)
   */
  readonly textUnderlineOffset: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-position)
   */
  readonly textUnderlinePosition: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap) */
  readonly textWrap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/top) */
  readonly top: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/touch-action) */
  readonly touchAction: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform) */
  readonly transform: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-box) */
  readonly transformBox: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
   */
  readonly transformOrigin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)
   */
  readonly transformStyle: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition) */
  readonly transition: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
   */
  readonly transitionDelay: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
   */
  readonly transitionDuration: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)
   */
  readonly transitionProperty: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
   */
  readonly transitionTimingFunction: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/translate) */
  readonly translate: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi) */
  readonly unicodeBidi: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select) */
  readonly userSelect: string;
  readonly vectorEffect: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/vertical-align)
   */
  readonly verticalAlign: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/visibility) */
  readonly visibility: string;
  /**
   * @deprecated This is a legacy alias of `alignContent`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)
   */
  readonly webkitAlignContent: string;
  /**
   * @deprecated This is a legacy alias of `alignItems`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)
   */
  readonly webkitAlignItems: string;
  /**
   * @deprecated This is a legacy alias of `alignSelf`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)
   */
  readonly webkitAlignSelf: string;
  /**
   * @deprecated This is a legacy alias of `animation`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)
   */
  readonly webkitAnimation: string;
  /**
   * @deprecated This is a legacy alias of `animationDelay`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
   */
  readonly webkitAnimationDelay: string;
  /**
   * @deprecated This is a legacy alias of `animationDirection`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
   */
  readonly webkitAnimationDirection: string;
  /**
   * @deprecated This is a legacy alias of `animationDuration`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
   */
  readonly webkitAnimationDuration: string;
  /**
   * @deprecated This is a legacy alias of `animationFillMode`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
   */
  readonly webkitAnimationFillMode: string;
  /**
   * @deprecated This is a legacy alias of `animationIterationCount`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
   */
  readonly webkitAnimationIterationCount: string;
  /**
   * @deprecated This is a legacy alias of `animationName`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)
   */
  readonly webkitAnimationName: string;
  /**
   * @deprecated This is a legacy alias of `animationPlayState`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
   */
  readonly webkitAnimationPlayState: string;
  /**
   * @deprecated This is a legacy alias of `animationTimingFunction`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
   */
  readonly webkitAnimationTimingFunction: string;
  /**
   * @deprecated This is a legacy alias of `appearance`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)
   */
  readonly webkitAppearance: string;
  /**
   * @deprecated This is a legacy alias of `backfaceVisibility`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
   */
  readonly webkitBackfaceVisibility: string;
  /**
   * @deprecated This is a legacy alias of `backgroundClip`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)
   */
  readonly webkitBackgroundClip: string;
  /**
   * @deprecated This is a legacy alias of `backgroundOrigin`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)
   */
  readonly webkitBackgroundOrigin: string;
  /**
   * @deprecated This is a legacy alias of `backgroundSize`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)
   */
  readonly webkitBackgroundSize: string;
  /**
   * @deprecated This is a legacy alias of `borderBottomLeftRadius`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
   */
  readonly webkitBorderBottomLeftRadius: string;
  /**
   * @deprecated This is a legacy alias of `borderBottomRightRadius`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
   */
  readonly webkitBorderBottomRightRadius: string;
  /**
   * @deprecated This is a legacy alias of `borderRadius`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)
   */
  readonly webkitBorderRadius: string;
  /**
   * @deprecated This is a legacy alias of `borderTopLeftRadius`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
   */
  readonly webkitBorderTopLeftRadius: string;
  /**
   * @deprecated This is a legacy alias of `borderTopRightRadius`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
   */
  readonly webkitBorderTopRightRadius: string;
  /**
   * @deprecated This is a legacy alias of `boxAlign`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-align)
   */
  readonly webkitBoxAlign: string;
  /**
   * @deprecated This is a legacy alias of `boxFlex`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-flex)
   */
  readonly webkitBoxFlex: string;
  /**
   * @deprecated This is a legacy alias of `boxOrdinalGroup`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)
   */
  readonly webkitBoxOrdinalGroup: string;
  /**
   * @deprecated This is a legacy alias of `boxOrient`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-orient)
   */
  readonly webkitBoxOrient: string;
  /**
   * @deprecated This is a legacy alias of `boxPack`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-pack)
   */
  readonly webkitBoxPack: string;
  /**
   * @deprecated This is a legacy alias of `boxShadow`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
   */
  readonly webkitBoxShadow: string;
  /**
   * @deprecated This is a legacy alias of `boxSizing`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
   */
  readonly webkitBoxSizing: string;
  /**
   * @deprecated This is a legacy alias of `filter`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)
   */
  readonly webkitFilter: string;
  /**
   * @deprecated This is a legacy alias of `flex`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)
   */
  readonly webkitFlex: string;
  /**
   * @deprecated This is a legacy alias of `flexBasis`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
   */
  readonly webkitFlexBasis: string;
  /**
   * @deprecated This is a legacy alias of `flexDirection`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
   */
  readonly webkitFlexDirection: string;
  /**
   * @deprecated This is a legacy alias of `flexFlow`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
   */
  readonly webkitFlexFlow: string;
  /**
   * @deprecated This is a legacy alias of `flexGrow`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
   */
  readonly webkitFlexGrow: string;
  /**
   * @deprecated This is a legacy alias of `flexShrink`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
   */
  readonly webkitFlexShrink: string;
  /**
   * @deprecated This is a legacy alias of `flexWrap`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
   */
  readonly webkitFlexWrap: string;
  /**
   * @deprecated This is a legacy alias of `justifyContent`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)
   */
  readonly webkitJustifyContent: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp)
   */
  readonly webkitLineClamp: string;
  /**
   * @deprecated This is a legacy alias of `mask`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)
   */
  readonly webkitMask: string;
  /**
   * @deprecated This is a legacy alias of `maskBorder`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border)
   */
  readonly webkitMaskBoxImage: string;
  /**
   * @deprecated This is a legacy alias of `maskBorderOutset`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)
   */
  readonly webkitMaskBoxImageOutset: string;
  /**
   * @deprecated This is a legacy alias of `maskBorderRepeat`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)
   */
  readonly webkitMaskBoxImageRepeat: string;
  /**
   * @deprecated This is a legacy alias of `maskBorderSlice`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)
   */
  readonly webkitMaskBoxImageSlice: string;
  /**
   * @deprecated This is a legacy alias of `maskBorderSource`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)
   */
  readonly webkitMaskBoxImageSource: string;
  /**
   * @deprecated This is a legacy alias of `maskBorderWidth`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)
   */
  readonly webkitMaskBoxImageWidth: string;
  /**
   * @deprecated This is a legacy alias of `maskClip`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
   */
  readonly webkitMaskClip: string;
  /**
   * @deprecated This is a legacy alias of `maskComposite`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
   */
  readonly webkitMaskComposite: string;
  /**
   * @deprecated This is a legacy alias of `maskImage`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)
   */
  readonly webkitMaskImage: string;
  /**
   * @deprecated This is a legacy alias of `maskOrigin`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
   */
  readonly webkitMaskOrigin: string;
  /**
   * @deprecated This is a legacy alias of `maskPosition`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)
   */
  readonly webkitMaskPosition: string;
  /**
   * @deprecated This is a legacy alias of `maskRepeat`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
   */
  readonly webkitMaskRepeat: string;
  /**
   * @deprecated This is a legacy alias of `maskSize`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)
   */
  readonly webkitMaskSize: string;
  /**
   * @deprecated This is a legacy alias of `order`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)
   */
  readonly webkitOrder: string;
  /**
   * @deprecated This is a legacy alias of `perspective`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)
   */
  readonly webkitPerspective: string;
  /**
   * @deprecated This is a legacy alias of `perspectiveOrigin`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
   */
  readonly webkitPerspectiveOrigin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color)
   */
  readonly webkitTextFillColor: string;
  /**
   * @deprecated This is a legacy alias of `textSizeAdjust`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)
   */
  readonly webkitTextSizeAdjust: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke)
   */
  readonly webkitTextStroke: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color)
   */
  readonly webkitTextStrokeColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width)
   */
  readonly webkitTextStrokeWidth: string;
  /**
   * @deprecated This is a legacy alias of `transform`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)
   */
  readonly webkitTransform: string;
  /**
   * @deprecated This is a legacy alias of `transformOrigin`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
   */
  readonly webkitTransformOrigin: string;
  /**
   * @deprecated This is a legacy alias of `transformStyle`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)
   */
  readonly webkitTransformStyle: string;
  /**
   * @deprecated This is a legacy alias of `transition`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)
   */
  readonly webkitTransition: string;
  /**
   * @deprecated This is a legacy alias of `transitionDelay`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
   */
  readonly webkitTransitionDelay: string;
  /**
   * @deprecated This is a legacy alias of `transitionDuration`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
   */
  readonly webkitTransitionDuration: string;
  /**
   * @deprecated This is a legacy alias of `transitionProperty`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)
   */
  readonly webkitTransitionProperty: string;
  /**
   * @deprecated This is a legacy alias of `transitionTimingFunction`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
   */
  readonly webkitTransitionTimingFunction: string;
  /**
   * @deprecated This is a legacy alias of `userSelect`.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)
   */
  readonly webkitUserSelect: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space) */
  readonly whiteSpace: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/widows) */
  readonly widows: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/width) */
  readonly width: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/will-change) */
  readonly willChange: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-break) */
  readonly wordBreak: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-spacing) */
  readonly wordSpacing: string;
  /** @deprecated */
  readonly wordWrap: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/writing-mode) */
  readonly writingMode: string;
  readonly x: string;
  readonly y: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/z-index) */
  readonly zIndex: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyPriority)
   */
  getPropertyPriority(property: string): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyValue)
   */
  getPropertyValue(property: string): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/item)
   */
  item(index: number): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/removeProperty)
   */
  removeProperty(property: string): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/setProperty)
   */
  setProperty(property: string, value: string | null, priority?: string): void;
  readonly [index: number]: string;
}

declare var CSSStyleDeclaration: {
  readonly prototype: CSSStyleDeclaration;
  new (): CSSStyleDeclaration;
};

/**
 * CSSStyleRule represents a single CSS style rule. It implements the CSSRule
 * interface with a type value of 1 (CSSRule.STYLE_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)
 */
interface CSSStyleRule extends CSSGroupingRule {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText)
   */
  readonly selectorText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/style)
   */
  readonly style: CSSStyleDeclaration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap)
   */
  readonly styleMap: StylePropertyMap;
}

declare var CSSStyleRule: {
  readonly prototype: CSSStyleRule;
  new (): CSSStyleRule;
};

/**
 * A single CSS style sheet. It inherits properties and methods from its parent,
 * StyleSheet.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)
 */
interface CSSStyleSheet extends StyleSheet {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules)
   */
  readonly cssRules: CSSRuleList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule)
   */
  readonly ownerRule: CSSRule | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/rules)
   */
  readonly rules: CSSRuleList;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/addRule)
   */
  addRule(selector?: string, style?: string, index?: number): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/deleteRule)
   */
  deleteRule(index: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/insertRule)
   */
  insertRule(rule: string, index?: number): number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/removeRule)
   */
  removeRule(index?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replace)
   */
  replace(text: string): Promise<CSSStyleSheet>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replaceSync)
   */
  replaceSync(text: string): void;
}

declare var CSSStyleSheet: {
  readonly prototype: CSSStyleSheet;
  new (options?: CSSStyleSheetInit): CSSStyleSheet;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue) */
interface CSSStyleValue {
  toString(): string;
}

declare var CSSStyleValue: {
  readonly prototype: CSSStyleValue;
  new (): CSSStyleValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parse_static)
   */
  parse(property: string, cssText: string): CSSStyleValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parseAll_static)
   */
  parseAll(property: string, cssText: string): readonly CSSStyleValue[];
};

/**
 * An object representing a single CSS @supports at-rule. It implements the
 * CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule
 * interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSupportsRule)
 */
interface CSSSupportsRule extends CSSConditionRule {}

declare var CSSSupportsRule: {
  readonly prototype: CSSSupportsRule;
  new (): CSSSupportsRule;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)
 */
interface CSSTransformComponent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)
   */
  readonly is2D: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/toMatrix)
   */
  toMatrix(): DOMMatrix;
  toString(): string;
}

declare var CSSTransformComponent: {
  readonly prototype: CSSTransformComponent;
  new (): CSSTransformComponent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue) */
interface CSSTransformValue extends CSSStyleValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)
   */
  readonly is2D: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/toMatrix)
   */
  toMatrix(): DOMMatrix;
  forEach(
    callbackfn: (
      value: CSSTransformComponent,
      key: number,
      parent: CSSTransformValue,
    ) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: CSSTransformComponent;
}

declare var CSSTransformValue: {
  readonly prototype: CSSTransformValue;
  new (transforms: readonly CSSTransformComponent[]): CSSTransformValue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition) */
interface CSSTransition extends Animation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty)
   */
  readonly transitionProperty: string;
  addEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: CSSTransition, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AnimationEventMap>(
    type: K,
    listener: (this: CSSTransition, ev: AnimationEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var CSSTransition: {
  readonly prototype: CSSTransition;
  new (): CSSTransition;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate) */
interface CSSTranslate extends CSSTransformComponent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)
   */
  readonly x: CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)
   */
  readonly y: CSSNumericValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)
   */
  readonly z: CSSNumericValue;
}

declare var CSSTranslate: {
  readonly prototype: CSSTranslate;
  new (
    x: CSSNumericValue,
    y: CSSNumericValue,
    z?: CSSNumericValue,
  ): CSSTranslate;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue) */
interface CSSUnitValue extends CSSNumericValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)
   */
  readonly unit: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)
   */
  readonly value: number;
}

declare var CSSUnitValue: {
  readonly prototype: CSSUnitValue;
  new (value: number, unit: string): CSSUnitValue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue) */
interface CSSUnparsedValue extends CSSStyleValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)
   */
  readonly length: number;
  forEach(
    callbackfn: (
      value: CSSUnparsedSegment,
      key: number,
      parent: CSSUnparsedValue,
    ) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: CSSUnparsedSegment;
}

declare var CSSUnparsedValue: {
  readonly prototype: CSSUnparsedValue;
  new (members: readonly CSSUnparsedSegment[]): CSSUnparsedValue;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)
 */
interface CSSVariableReferenceValue {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)
   */
  readonly fallback: CSSUnparsedValue | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)
   */
  readonly variable: string;
}

declare var CSSVariableReferenceValue: {
  readonly prototype: CSSVariableReferenceValue;
  new (
    variable: string,
    fallback?: CSSUnparsedValue | null,
  ): CSSVariableReferenceValue;
};

/**
 * Provides a storage mechanism for Request / Response object pairs that are
 * cached, for example as part of the ServiceWorker life cycle. Note that the
 * Cache interface is exposed to windowed scopes as well as workers. You don't
 * have to use it in conjunction with service workers, even though it is defined
 * in the service worker spec. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
 */
interface Cache {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/add) */
  add(request: RequestInfo | URL): Promise<void>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll) */
  addAll(requests: readonly RequestInfo[]): Promise<void>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/delete) */
  delete(
    request: RequestInfo | URL,
    options?: CacheQueryOptions,
  ): Promise<boolean>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/keys) */
  keys(
    request?: RequestInfo | URL,
    options?: CacheQueryOptions,
  ): Promise<ReadonlyArray<Request>>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/match) */
  match(
    request: RequestInfo | URL,
    options?: CacheQueryOptions,
  ): Promise<Response | undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Cache/matchAll)
   */
  matchAll(
    request?: RequestInfo | URL,
    options?: CacheQueryOptions,
  ): Promise<ReadonlyArray<Response>>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/put) */
  put(request: RequestInfo | URL, response: Response): Promise<void>;
}

declare var Cache: {
  readonly prototype: Cache;
  new (): Cache;
};

/**
 * The storage for Cache objects. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
 */
interface CacheStorage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete)
   */
  delete(cacheName: string): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/has)
   */
  has(cacheName: string): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys)
   */
  keys(): Promise<readonly string[]>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/match)
   */
  match(
    request: RequestInfo | URL,
    options?: MultiCacheQueryOptions,
  ): Promise<Response | undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/open)
   */
  open(cacheName: string): Promise<Cache>;
}

declare var CacheStorage: {
  readonly prototype: CacheStorage;
  new (): CacheStorage;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack)
 */
interface CanvasCaptureMediaStreamTrack extends MediaStreamTrack {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas)
   */
  readonly canvas: HTMLCanvasElement;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/requestFrame)
   */
  requestFrame(): void;
  addEventListener<K extends keyof MediaStreamTrackEventMap>(
    type: K,
    listener: (
      this: CanvasCaptureMediaStreamTrack,
      ev: MediaStreamTrackEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaStreamTrackEventMap>(
    type: K,
    listener: (
      this: CanvasCaptureMediaStreamTrack,
      ev: MediaStreamTrackEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var CanvasCaptureMediaStreamTrack: {
  readonly prototype: CanvasCaptureMediaStreamTrack;
  new (): CanvasCaptureMediaStreamTrack;
};

interface CanvasCompositing {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
   */
  readonly globalAlpha: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
   */
  readonly globalCompositeOperation: GlobalCompositeOperation;
}

interface CanvasDrawImage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage)
   */
  drawImage(image: CanvasImageSource, dx: number, dy: number): void;
  drawImage(
    image: CanvasImageSource,
    dx: number,
    dy: number,
    dw: number,
    dh: number,
  ): void;
  drawImage(
    image: CanvasImageSource,
    sx: number,
    sy: number,
    sw: number,
    sh: number,
    dx: number,
    dy: number,
    dw: number,
    dh: number,
  ): void;
}

interface CanvasDrawPath {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath)
   */
  beginPath(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
   */
  clip(fillRule?: CanvasFillRule): void;
  clip(path: Path2D, fillRule?: CanvasFillRule): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
   */
  fill(fillRule?: CanvasFillRule): void;
  fill(path: Path2D, fillRule?: CanvasFillRule): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
   */
  isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;
  isPointInPath(
    path: Path2D,
    x: number,
    y: number,
    fillRule?: CanvasFillRule,
  ): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
   */
  isPointInStroke(x: number, y: number): boolean;
  isPointInStroke(path: Path2D, x: number, y: number): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
   */
  stroke(): void;
  stroke(path: Path2D): void;
}

interface CanvasFillStrokeStyles {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)
   */
  readonly fillStyle: string | CanvasGradient | CanvasPattern;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
   */
  readonly strokeStyle: string | CanvasGradient | CanvasPattern;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createConicGradient)
   */
  createConicGradient(startAngle: number, x: number, y: number): CanvasGradient;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createLinearGradient)
   */
  createLinearGradient(
    x0: number,
    y0: number,
    x1: number,
    y1: number,
  ): CanvasGradient;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createPattern)
   */
  createPattern(
    image: CanvasImageSource,
    repetition: string | null,
  ): CanvasPattern | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createRadialGradient)
   */
  createRadialGradient(
    x0: number,
    y0: number,
    r0: number,
    x1: number,
    y1: number,
    r1: number,
  ): CanvasGradient;
}

interface CanvasFilters {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)
   */
  readonly filter: string;
}

/**
 * An opaque object describing a gradient. It is returned by the methods
 * CanvasRenderingContext2D.createLinearGradient() or
 * CanvasRenderingContext2D.createRadialGradient().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
 */
interface CanvasGradient {
  /**
   * Adds a color stop with the given color to the gradient at the given
   * offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset
   * at the other end.
   *
   * Throws an "IndexSizeError" DOMException if the offset is out of range.
   * Throws a "SyntaxError" DOMException if the color cannot be parsed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient/addColorStop)
   */
  addColorStop(offset: number, color: string): void;
}

declare var CanvasGradient: {
  readonly prototype: CanvasGradient;
  new (): CanvasGradient;
};

interface CanvasImageData {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
   */
  createImageData(
    sw: number,
    sh: number,
    settings?: ImageDataSettings,
  ): ImageData;
  createImageData(imagedata: ImageData): ImageData;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData)
   */
  getImageData(
    sx: number,
    sy: number,
    sw: number,
    sh: number,
    settings?: ImageDataSettings,
  ): ImageData;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
   */
  putImageData(imagedata: ImageData, dx: number, dy: number): void;
  putImageData(
    imagedata: ImageData,
    dx: number,
    dy: number,
    dirtyX: number,
    dirtyY: number,
    dirtyWidth: number,
    dirtyHeight: number,
  ): void;
}

interface CanvasImageSmoothing {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
   */
  readonly imageSmoothingEnabled: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)
   */
  readonly imageSmoothingQuality: ImageSmoothingQuality;
}

interface CanvasPath {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arc)
   */
  arc(
    x: number,
    y: number,
    radius: number,
    startAngle: number,
    endAngle: number,
    counterclockwise?: boolean,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arcTo)
   */
  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
   */
  bezierCurveTo(
    cp1x: number,
    cp1y: number,
    cp2x: number,
    cp2y: number,
    x: number,
    y: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath)
   */
  closePath(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/ellipse)
   */
  ellipse(
    x: number,
    y: number,
    radiusX: number,
    radiusY: number,
    rotation: number,
    startAngle: number,
    endAngle: number,
    counterclockwise?: boolean,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineTo)
   */
  lineTo(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/moveTo)
   */
  moveTo(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
   */
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rect)
   */
  rect(x: number, y: number, w: number, h: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
   */
  roundRect(
    x: number,
    y: number,
    w: number,
    h: number,
    radii?: number | DOMPointInit | readonly (number | DOMPointInit)[],
  ): void;
}

interface CanvasPathDrawingStyles {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)
   */
  readonly lineCap: CanvasLineCap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
   */
  readonly lineDashOffset: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)
   */
  readonly lineJoin: CanvasLineJoin;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)
   */
  readonly lineWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)
   */
  readonly miterLimit: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash)
   */
  getLineDash(): readonly number[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
   */
  setLineDash(segments: readonly number[]): void;
}

/**
 * An opaque object describing a pattern, based on an image, a canvas, or a
 * video, created by the CanvasRenderingContext2D.createPattern() method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
 */
interface CanvasPattern {
  /**
   * Sets the transformation matrix that will be used when rendering the
   * pattern during a fill or stroke painting operation.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern/setTransform)
   */
  setTransform(transform?: DOMMatrix2DInit): void;
}

declare var CanvasPattern: {
  readonly prototype: CanvasPattern;
  new (): CanvasPattern;
};

interface CanvasRect {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect)
   */
  clearRect(x: number, y: number, w: number, h: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect)
   */
  fillRect(x: number, y: number, w: number, h: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect)
   */
  strokeRect(x: number, y: number, w: number, h: number): void;
}

/**
 * The CanvasRenderingContext2D interface, part of the Canvas API, provides the
 * 2D rendering context for the drawing surface of a <canvas> element. It is
 * used for drawing shapes, text, images, and other objects.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)
 */
interface CanvasRenderingContext2D
  extends CanvasCompositing,
    CanvasDrawImage,
    CanvasDrawPath,
    CanvasFillStrokeStyles,
    CanvasFilters,
    CanvasImageData,
    CanvasImageSmoothing,
    CanvasPath,
    CanvasPathDrawingStyles,
    CanvasRect,
    CanvasShadowStyles,
    CanvasState,
    CanvasText,
    CanvasTextDrawingStyles,
    CanvasTransform,
    CanvasUserInterface {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)
   */
  readonly canvas: HTMLCanvasElement;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getContextAttributes)
   */
  getContextAttributes(): CanvasRenderingContext2DSettings;
}

declare var CanvasRenderingContext2D: {
  readonly prototype: CanvasRenderingContext2D;
  new (): CanvasRenderingContext2D;
};

interface CanvasShadowStyles {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
   */
  readonly shadowBlur: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)
   */
  readonly shadowColor: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
   */
  readonly shadowOffsetX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
   */
  readonly shadowOffsetY: number;
}

interface CanvasState {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/reset)
   */
  reset(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore)
   */
  restore(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save)
   */
  save(): void;
}

interface CanvasText {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText)
   */
  fillText(text: string, x: number, y: number, maxWidth?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText)
   */
  measureText(text: string): TextMetrics;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText)
   */
  strokeText(text: string, x: number, y: number, maxWidth?: number): void;
}

interface CanvasTextDrawingStyles {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)
   */
  readonly direction: CanvasDirection;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)
   */
  readonly font: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)
   */
  readonly fontKerning: CanvasFontKerning;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch)
   */
  readonly fontStretch: CanvasFontStretch;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)
   */
  readonly fontVariantCaps: CanvasFontVariantCaps;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing)
   */
  readonly letterSpacing: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)
   */
  readonly textAlign: CanvasTextAlign;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)
   */
  readonly textBaseline: CanvasTextBaseline;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering)
   */
  readonly textRendering: CanvasTextRendering;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing)
   */
  readonly wordSpacing: string;
}

interface CanvasTransform {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform)
   */
  getTransform(): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform)
   */
  resetTransform(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate)
   */
  rotate(angle: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale)
   */
  scale(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
   */
  setTransform(
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
  ): void;
  setTransform(transform?: DOMMatrix2DInit): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform)
   */
  transform(
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate)
   */
  translate(x: number, y: number): void;
}

interface CanvasUserInterface {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
   */
  drawFocusIfNeeded(element: Element): void;
  drawFocusIfNeeded(path: Path2D, element: Element): void;
}

/**
 * The ChannelMergerNode interface, often used in conjunction with its opposite,
 * ChannelSplitterNode, reunites different mono inputs into a single output.
 * Each input is used to fill a channel of the output. This is useful for
 * accessing each channels separately, e.g. for performing channel mixing where
 * gain must be separately controlled on each channel.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)
 */
interface ChannelMergerNode extends AudioNode {}

declare var ChannelMergerNode: {
  readonly prototype: ChannelMergerNode;
  new (
    context: BaseAudioContext,
    options?: ChannelMergerOptions,
  ): ChannelMergerNode;
};

/**
 * The ChannelSplitterNode interface, often used in conjunction with its
 * opposite, ChannelMergerNode, separates the different channels of an audio
 * source into a set of mono outputs. This is useful for accessing each channel
 * separately, e.g. for performing channel mixing where gain must be separately
 * controlled on each channel.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)
 */
interface ChannelSplitterNode extends AudioNode {}

declare var ChannelSplitterNode: {
  readonly prototype: ChannelSplitterNode;
  new (
    context: BaseAudioContext,
    options?: ChannelSplitterOptions,
  ): ChannelSplitterNode;
};

/**
 * The CharacterData abstract interface represents a Node object that contains
 * characters. This is an abstract interface, meaning there aren't any object of
 * type CharacterData: it is implemented by other interfaces, like Text,
 * Comment, or ProcessingInstruction which aren't abstract.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData)
 */
interface CharacterData extends Node, ChildNode, NonDocumentTypeChildNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/data)
   */
  readonly data: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/length)
   */
  readonly length: number;
  readonly ownerDocument: Document;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/appendData)
   */
  appendData(data: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/deleteData)
   */
  deleteData(offset: number, count: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/insertData)
   */
  insertData(offset: number, data: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceData)
   */
  replaceData(offset: number, count: number, data: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/substringData)
   */
  substringData(offset: number, count: number): string;
}

declare var CharacterData: {
  readonly prototype: CharacterData;
  new (): CharacterData;
};

interface ChildNode extends Node {
  /**
   * Inserts nodes just after node, while replacing strings in nodes with
   * equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/after)
   */
  after(...nodes: readonly (Node | string)[]): void;
  /**
   * Inserts nodes just before node, while replacing strings in nodes with
   * equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/before)
   */
  before(...nodes: readonly (Node | string)[]): void;
  /**
   * Removes node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)
   */
  remove(): void;
  /**
   * Replaces node with nodes, while replacing strings in nodes with
   * equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceWith)
   */
  replaceWith(...nodes: readonly (Node | string)[]): void;
}

/** @deprecated */
interface ClientRect extends DOMRect {}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard)
 */
interface Clipboard extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/read)
   */
  read(): Promise<ClipboardItems>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/readText)
   */
  readText(): Promise<string>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/write)
   */
  write(data: ClipboardItems): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/writeText)
   */
  writeText(data: string): Promise<void>;
}

declare var Clipboard: {
  readonly prototype: Clipboard;
  new (): Clipboard;
};

/**
 * Events providing information related to modification of the clipboard, that
 * is cut, copy, and paste events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)
 */
interface ClipboardEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData)
   */
  readonly clipboardData: DataTransfer | null;
}

declare var ClipboardEvent: {
  readonly prototype: ClipboardEvent;
  new (type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem)
 */
interface ClipboardItem {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types)
   */
  readonly types: ReadonlyArray<string>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/getType)
   */
  getType(type: string): Promise<Blob>;
}

declare var ClipboardItem: {
  readonly prototype: ClipboardItem;
  new (
    items: Record<string, string | Blob | PromiseLike<string | Blob>>,
    options?: ClipboardItemOptions,
  ): ClipboardItem;
};

/**
 * A CloseEvent is sent to clients using WebSockets when the connection is
 * closed. This is delivered to the listener indicated by the WebSocket object's
 * onclose attribute.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
 */
interface CloseEvent extends Event {
  /**
   * Returns the WebSocket connection close code provided by the server.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
   */
  readonly code: number;
  /**
   * Returns the WebSocket connection close reason provided by the server.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
   */
  readonly reason: string;
  /**
   * Returns true if the connection closed cleanly; false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
   */
  readonly wasClean: boolean;
}

declare var CloseEvent: {
  readonly prototype: CloseEvent;
  new (type: string, eventInitDict?: CloseEventInit): CloseEvent;
};

/**
 * Textual notations within markup; although it is generally not visually shown,
 * such comments are available to be read in the source view.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Comment)
 */
interface Comment extends CharacterData {}

declare var Comment: {
  readonly prototype: Comment;
  new (data?: string): Comment;
};

/**
 * The DOM CompositionEvent represents events that occur due to the user
 * indirectly entering text.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent)
 */
interface CompositionEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data)
   */
  readonly data: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/initCompositionEvent)
   */
  initCompositionEvent(
    typeArg: string,
    bubblesArg?: boolean,
    cancelableArg?: boolean,
    viewArg?: WindowProxy | null,
    dataArg?: string,
  ): void;
}

declare var CompositionEvent: {
  readonly prototype: CompositionEvent;
  new (type: string, eventInitDict?: CompositionEventInit): CompositionEvent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream) */
interface CompressionStream extends GenericTransformStream {}

declare var CompressionStream: {
  readonly prototype: CompressionStream;
  new (format: CompressionFormat): CompressionStream;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode)
 */
interface ConstantSourceNode extends AudioScheduledSourceNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset)
   */
  readonly offset: AudioParam;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: ConstantSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: ConstantSourceNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ConstantSourceNode: {
  readonly prototype: ConstantSourceNode;
  new (
    context: BaseAudioContext,
    options?: ConstantSourceOptions,
  ): ConstantSourceNode;
};

/**
 * An AudioNode that performs a Linear Convolution on a given AudioBuffer, often
 * used to achieve a reverb effect. A ConvolverNode always has exactly one input
 * and one output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode)
 */
interface ConvolverNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer)
   */
  readonly buffer: AudioBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize)
   */
  readonly normalize: boolean;
}

declare var ConvolverNode: {
  readonly prototype: ConvolverNode;
  new (context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode;
};

/**
 * This Streams API interface provides a built-in byte length queuing strategy
 * that can be used when constructing streams.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
 */
interface CountQueuingStrategy extends QueuingStrategy {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)
   */
  readonly highWaterMark: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)
   */
  readonly size: QueuingStrategySize;
}

declare var CountQueuingStrategy: {
  readonly prototype: CountQueuingStrategy;
  new (init: QueuingStrategyInit): CountQueuingStrategy;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential)
 */
interface Credential {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/id) */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Credential/type)
   */
  readonly type: string;
}

declare var Credential: {
  readonly prototype: Credential;
  new (): Credential;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)
 */
interface CredentialsContainer {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/create)
   */
  create(options?: CredentialCreationOptions): Promise<Credential | null>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/get)
   */
  get(options?: CredentialRequestOptions): Promise<Credential | null>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/preventSilentAccess)
   */
  preventSilentAccess(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/store)
   */
  store(credential: Credential): Promise<void>;
}

declare var CredentialsContainer: {
  readonly prototype: CredentialsContainer;
  new (): CredentialsContainer;
};

/**
 * Basic cryptography features available in the current context. It allows
 * access to a cryptographically strong random number generator and to
 * cryptographic primitives.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
 */
interface Crypto {
  /**
   * Available only in secure contexts.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
   */
  readonly subtle: SubtleCrypto;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues)
   */
  getRandomValues<T extends ArrayBufferView | null>(array: T): T;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
   */
  randomUUID(): `${string}-${string}-${string}-${string}-${string}`;
}

declare var Crypto: {
  readonly prototype: Crypto;
  new (): Crypto;
};

/**
 * The CryptoKey dictionary of the Web Crypto API represents a cryptographic
 * key. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
 */
interface CryptoKey {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)
   */
  readonly algorithm: KeyAlgorithm;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)
   */
  readonly extractable: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)
   */
  readonly type: KeyType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)
   */
  readonly usages: readonly KeyUsage[];
}

declare var CryptoKey: {
  readonly prototype: CryptoKey;
  new (): CryptoKey;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry)
 */
interface CustomElementRegistry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define)
   */
  define(
    name: string,
    constructor: CustomElementConstructor,
    options?: ElementDefinitionOptions,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/get)
   */
  get(name: string): CustomElementConstructor | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/getName)
   */
  getName(constructor: CustomElementConstructor): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/upgrade)
   */
  upgrade(root: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/whenDefined)
   */
  whenDefined(name: string): Promise<CustomElementConstructor>;
}

declare var CustomElementRegistry: {
  readonly prototype: CustomElementRegistry;
  new (): CustomElementRegistry;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent) */
interface CustomEvent<T = unknown> extends Event {
  /**
   * Returns any custom data event was created with. Typically used for
   * synthetic events.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
   */
  readonly detail: T;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent)
   */
  initCustomEvent(
    type: string,
    bubbles?: boolean,
    cancelable?: boolean,
    detail?: T,
  ): void;
}

declare var CustomEvent: {
  readonly prototype: CustomEvent;
  new <T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;
};

/**
 * An abnormal event (called an exception) which occurs as a result of calling a
 * method or accessing a property of a web API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
 */
interface DOMException extends Error {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)
   */
  readonly code: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)
   */
  readonly message: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)
   */
  readonly name: string;
  readonly INDEX_SIZE_ERR: 1;
  readonly DOMSTRING_SIZE_ERR: 2;
  readonly HIERARCHY_REQUEST_ERR: 3;
  readonly WRONG_DOCUMENT_ERR: 4;
  readonly INVALID_CHARACTER_ERR: 5;
  readonly NO_DATA_ALLOWED_ERR: 6;
  readonly NO_MODIFICATION_ALLOWED_ERR: 7;
  readonly NOT_FOUND_ERR: 8;
  readonly NOT_SUPPORTED_ERR: 9;
  readonly INUSE_ATTRIBUTE_ERR: 10;
  readonly INVALID_STATE_ERR: 11;
  readonly SYNTAX_ERR: 12;
  readonly INVALID_MODIFICATION_ERR: 13;
  readonly NAMESPACE_ERR: 14;
  readonly INVALID_ACCESS_ERR: 15;
  readonly VALIDATION_ERR: 16;
  readonly TYPE_MISMATCH_ERR: 17;
  readonly SECURITY_ERR: 18;
  readonly NETWORK_ERR: 19;
  readonly ABORT_ERR: 20;
  readonly URL_MISMATCH_ERR: 21;
  readonly QUOTA_EXCEEDED_ERR: 22;
  readonly TIMEOUT_ERR: 23;
  readonly INVALID_NODE_TYPE_ERR: 24;
  readonly DATA_CLONE_ERR: 25;
}

declare var DOMException: {
  readonly prototype: DOMException;
  new (message?: string, name?: string): DOMException;
  readonly INDEX_SIZE_ERR: 1;
  readonly DOMSTRING_SIZE_ERR: 2;
  readonly HIERARCHY_REQUEST_ERR: 3;
  readonly WRONG_DOCUMENT_ERR: 4;
  readonly INVALID_CHARACTER_ERR: 5;
  readonly NO_DATA_ALLOWED_ERR: 6;
  readonly NO_MODIFICATION_ALLOWED_ERR: 7;
  readonly NOT_FOUND_ERR: 8;
  readonly NOT_SUPPORTED_ERR: 9;
  readonly INUSE_ATTRIBUTE_ERR: 10;
  readonly INVALID_STATE_ERR: 11;
  readonly SYNTAX_ERR: 12;
  readonly INVALID_MODIFICATION_ERR: 13;
  readonly NAMESPACE_ERR: 14;
  readonly INVALID_ACCESS_ERR: 15;
  readonly VALIDATION_ERR: 16;
  readonly TYPE_MISMATCH_ERR: 17;
  readonly SECURITY_ERR: 18;
  readonly NETWORK_ERR: 19;
  readonly ABORT_ERR: 20;
  readonly URL_MISMATCH_ERR: 21;
  readonly QUOTA_EXCEEDED_ERR: 22;
  readonly TIMEOUT_ERR: 23;
  readonly INVALID_NODE_TYPE_ERR: 24;
  readonly DATA_CLONE_ERR: 25;
};

/**
 * An object providing methods which are not dependent on any particular
 * document. Such an object is returned by the Document.implementation
 * property.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation)
 */
interface DOMImplementation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocument)
   */
  createDocument(
    namespace: string | null,
    qualifiedName: string | null,
    doctype?: DocumentType | null,
  ): XMLDocument;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocumentType)
   */
  createDocumentType(
    qualifiedName: string,
    publicId: string,
    systemId: string,
  ): DocumentType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument)
   */
  createHTMLDocument(title?: string): Document;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/hasFeature)
   */
  hasFeature(...args: readonly any[]): true;
}

declare var DOMImplementation: {
  readonly prototype: DOMImplementation;
  new (): DOMImplementation;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix) */
interface DOMMatrix extends DOMMatrixReadOnly {
  readonly a: number;
  readonly b: number;
  readonly c: number;
  readonly d: number;
  readonly e: number;
  readonly f: number;
  readonly m11: number;
  readonly m12: number;
  readonly m13: number;
  readonly m14: number;
  readonly m21: number;
  readonly m22: number;
  readonly m23: number;
  readonly m24: number;
  readonly m31: number;
  readonly m32: number;
  readonly m33: number;
  readonly m34: number;
  readonly m41: number;
  readonly m42: number;
  readonly m43: number;
  readonly m44: number;
  invertSelf(): DOMMatrix;
  multiplySelf(other?: DOMMatrixInit): DOMMatrix;
  preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;
  rotateAxisAngleSelf(
    x?: number,
    y?: number,
    z?: number,
    angle?: number,
  ): DOMMatrix;
  rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;
  rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scale3dSelf)
   */
  scale3dSelf(
    scale?: number,
    originX?: number,
    originY?: number,
    originZ?: number,
  ): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scaleSelf)
   */
  scaleSelf(
    scaleX?: number,
    scaleY?: number,
    scaleZ?: number,
    originX?: number,
    originY?: number,
    originZ?: number,
  ): DOMMatrix;
  setMatrixValue(transformList: string): DOMMatrix;
  skewXSelf(sx?: number): DOMMatrix;
  skewYSelf(sy?: number): DOMMatrix;
  translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;
}

declare var DOMMatrix: {
  readonly prototype: DOMMatrix;
  new (init?: string | readonly number[]): DOMMatrix;
  fromFloat32Array(array32: Float32Array): DOMMatrix;
  fromFloat64Array(array64: Float64Array): DOMMatrix;
  fromMatrix(other?: DOMMatrixInit): DOMMatrix;
};

type SVGMatrix = DOMMatrix;
declare var SVGMatrix: typeof DOMMatrix;

type WebKitCSSMatrix = DOMMatrix;
declare var WebKitCSSMatrix: typeof DOMMatrix;

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly) */
interface DOMMatrixReadOnly {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a)
   */
  readonly a: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b)
   */
  readonly b: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c)
   */
  readonly c: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d)
   */
  readonly d: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e)
   */
  readonly e: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f)
   */
  readonly f: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)
   */
  readonly is2D: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)
   */
  readonly isIdentity: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11)
   */
  readonly m11: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12)
   */
  readonly m12: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13)
   */
  readonly m13: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14)
   */
  readonly m14: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21)
   */
  readonly m21: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22)
   */
  readonly m22: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23)
   */
  readonly m23: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24)
   */
  readonly m24: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31)
   */
  readonly m31: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32)
   */
  readonly m32: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33)
   */
  readonly m33: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34)
   */
  readonly m34: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41)
   */
  readonly m41: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42)
   */
  readonly m42: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43)
   */
  readonly m43: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44)
   */
  readonly m44: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipX)
   */
  flipX(): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipY)
   */
  flipY(): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/inverse)
   */
  inverse(): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/multiply)
   */
  multiply(other?: DOMMatrixInit): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotate)
   */
  rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle)
   */
  rotateAxisAngle(
    x?: number,
    y?: number,
    z?: number,
    angle?: number,
  ): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateFromVector)
   */
  rotateFromVector(x?: number, y?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale)
   */
  scale(
    scaleX?: number,
    scaleY?: number,
    scaleZ?: number,
    originX?: number,
    originY?: number,
    originZ?: number,
  ): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale3d)
   */
  scale3d(
    scale?: number,
    originX?: number,
    originY?: number,
    originZ?: number,
  ): DOMMatrix;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scaleNonUniform)
   */
  scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewX)
   */
  skewX(sx?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewY)
   */
  skewY(sy?: number): DOMMatrix;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat32Array)
   */
  toFloat32Array(): Float32Array;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat64Array)
   */
  toFloat64Array(): Float64Array;
  toJSON(): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/transformPoint)
   */
  transformPoint(point?: DOMPointInit): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/translate)
   */
  translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
  toString(): string;
}

declare var DOMMatrixReadOnly: {
  readonly prototype: DOMMatrixReadOnly;
  new (init?: string | readonly number[]): DOMMatrixReadOnly;
  fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly;
  fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly;
  fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;
};

/**
 * Provides the ability to parse XML or HTML source code from a string into a
 * DOM Document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser)
 */
interface DOMParser {
  /**
   * Parses string using either the HTML or XML parser, according to type, and
   * returns the resulting Document. type can be "text/html" (which will
   * invoke the HTML parser), or any of "text/xml", "application/xml",
   * "application/xhtml+xml", or "image/svg+xml" (which will invoke the XML
   * parser).
   *
   * For the XML parser, if string cannot be parsed, then the returned
   * Document will contain elements describing the resulting error.
   *
   * Note that script elements are not evaluated during parsing, and the
   * resulting document's encoding will always be UTF-8.
   *
   * Values other than the above for type will cause a TypeError exception to
   * be thrown.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMParser/parseFromString)
   */
  parseFromString(string: string, type: DOMParserSupportedType): Document;
}

declare var DOMParser: {
  readonly prototype: DOMParser;
  new (): DOMParser;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint) */
interface DOMPoint extends DOMPointReadOnly {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) */
  readonly w: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) */
  readonly x: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) */
  readonly y: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) */
  readonly z: number;
}

declare var DOMPoint: {
  readonly prototype: DOMPoint;
  new (x?: number, y?: number, z?: number, w?: number): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint_static)
   */
  fromPoint(other?: DOMPointInit): DOMPoint;
};

type SVGPoint = DOMPoint;
declare var SVGPoint: typeof DOMPoint;

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly) */
interface DOMPointReadOnly {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)
   */
  readonly w: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)
   */
  readonly x: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)
   */
  readonly y: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)
   */
  readonly z: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform)
   */
  matrixTransform(matrix?: DOMMatrixInit): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON)
   */
  toJSON(): unknown;
}

declare var DOMPointReadOnly: {
  readonly prototype: DOMPointReadOnly;
  new (x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint_static)
   */
  fromPoint(other?: DOMPointInit): DOMPointReadOnly;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad) */
interface DOMQuad {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1) */
  readonly p1: DOMPoint;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2) */
  readonly p2: DOMPoint;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3) */
  readonly p3: DOMPoint;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4) */
  readonly p4: DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/getBounds)
   */
  getBounds(): DOMRect;
  toJSON(): unknown;
}

declare var DOMQuad: {
  readonly prototype: DOMQuad;
  new (
    p1?: DOMPointInit,
    p2?: DOMPointInit,
    p3?: DOMPointInit,
    p4?: DOMPointInit,
  ): DOMQuad;
  fromQuad(other?: DOMQuadInit): DOMQuad;
  fromRect(other?: DOMRectInit): DOMQuad;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect) */
interface DOMRect extends DOMRectReadOnly {
  readonly height: number;
  readonly width: number;
  readonly x: number;
  readonly y: number;
}

declare var DOMRect: {
  readonly prototype: DOMRect;
  new (x?: number, y?: number, width?: number, height?: number): DOMRect;
  fromRect(other?: DOMRectInit): DOMRect;
};

type SVGRect = DOMRect;
declare var SVGRect: typeof DOMRect;

interface DOMRectList {
  readonly length: number;
  item(index: number): DOMRect | null;
  readonly [index: number]: DOMRect;
}

declare var DOMRectList: {
  readonly prototype: DOMRectList;
  new (): DOMRectList;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly) */
interface DOMRectReadOnly {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)
   */
  readonly bottom: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)
   */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)
   */
  readonly left: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)
   */
  readonly right: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)
   */
  readonly top: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)
   */
  readonly width: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)
   */
  readonly x: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)
   */
  readonly y: number;
  toJSON(): unknown;
}

declare var DOMRectReadOnly: {
  readonly prototype: DOMRectReadOnly;
  new (
    x?: number,
    y?: number,
    width?: number,
    height?: number,
  ): DOMRectReadOnly;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect_static)
   */
  fromRect(other?: DOMRectInit): DOMRectReadOnly;
};

/**
 * A type returned by some APIs which contains a list of DOMString (strings).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
 */
interface DOMStringList {
  /**
   * Returns the number of strings in strings.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
   */
  readonly length: number;
  /**
   * Returns true if strings contains string, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/contains)
   */
  contains(string: string): boolean;
  /**
   * Returns the string with index index from strings.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/item)
   */
  item(index: number): string | null;
  readonly [index: number]: string;
}

declare var DOMStringList: {
  readonly prototype: DOMStringList;
  new (): DOMStringList;
};

/**
 * Used by the dataset HTML attribute to represent data for custom attributes
 * added to elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringMap)
 */
interface DOMStringMap {
  readonly [name: string]: string | undefined;
}

declare var DOMStringMap: {
  readonly prototype: DOMStringMap;
  new (): DOMStringMap;
};

/**
 * A set of space-separated tokens. Such a set is returned by Element.classList,
 * HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList,
 * HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed
 * beginning with 0 as with JavaScript Array objects. DOMTokenList is always
 * case-sensitive.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList)
 */
interface DOMTokenList {
  /**
   * Returns the number of tokens.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)
   */
  readonly length: number;
  /**
   * Returns the associated set as string.
   *
   * Can be set, to change the associated attribute.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)
   */
  readonly value: string;
  toString(): string;
  /**
   * Adds all arguments passed, except those already present.
   *
   * Throws a "SyntaxError" DOMException if one of the arguments is the empty
   * string.
   *
   * Throws an "InvalidCharacterError" DOMException if one of the arguments
   * contains any ASCII whitespace.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)
   */
  add(...tokens: readonly string[]): void;
  /**
   * Returns true if token is present, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)
   */
  contains(token: string): boolean;
  /**
   * Returns the token with index index.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/item)
   */
  item(index: number): string | null;
  /**
   * Removes arguments passed, if they are present.
   *
   * Throws a "SyntaxError" DOMException if one of the arguments is the empty
   * string.
   *
   * Throws an "InvalidCharacterError" DOMException if one of the arguments
   * contains any ASCII whitespace.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)
   */
  remove(...tokens: readonly string[]): void;
  /**
   * Replaces token with newToken.
   *
   * Returns true if token was replaced with newToken, and false otherwise.
   *
   * Throws a "SyntaxError" DOMException if one of the arguments is the empty
   * string.
   *
   * Throws an "InvalidCharacterError" DOMException if one of the arguments
   * contains any ASCII whitespace.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/replace)
   */
  replace(token: string, newToken: string): boolean;
  /**
   * Returns true if token is in the associated attribute's supported tokens.
   * Returns false otherwise.
   *
   * Throws a TypeError if the associated attribute has no supported tokens
   * defined.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/supports)
   */
  supports(token: string): boolean;
  /**
   * If force is not given, "toggles" token, removing it if it's present and
   * adding it if it's not present. If force is true, adds token (same as
   * add()). If force is false, removes token (same as remove()).
   *
   * Returns true if token is now present, and false otherwise.
   *
   * Throws a "SyntaxError" DOMException if token is empty.
   *
   * Throws an "InvalidCharacterError" DOMException if token contains any
   * spaces.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/toggle)
   */
  toggle(token: string, force?: boolean): boolean;
  forEach(
    callbackfn: (value: string, key: number, parent: DOMTokenList) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: string;
}

declare var DOMTokenList: {
  readonly prototype: DOMTokenList;
  new (): DOMTokenList;
};

/**
 * Used to hold the data that is being dragged during a drag and drop operation.
 * It may hold one or more data items, each of one or more data types. For more
 * information about drag and drop, see HTML Drag and Drop API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer)
 */
interface DataTransfer {
  /**
   * Returns the kind of operation that is currently selected. If the kind of
   * operation isn't one of those that is allowed by the effectAllowed
   * attribute, then the operation will fail.
   *
   * Can be set, to change the selected operation.
   *
   * The possible values are "none", "copy", "link", and "move".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
   */
  readonly dropEffect: 'none' | 'copy' | 'link' | 'move';
  /**
   * Returns the kinds of operations that are to be allowed.
   *
   * Can be set (during the dragstart event), to change the allowed
   * operations.
   *
   * The possible values are "none", "copy", "copyLink", "copyMove", "link",
   * "linkMove", "move", "all", and "uninitialized",
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
   */
  readonly effectAllowed:
    | 'none'
    | 'copy'
    | 'copyLink'
    | 'copyMove'
    | 'link'
    | 'linkMove'
    | 'move'
    | 'all'
    | 'uninitialized';
  /**
   * Returns a FileList of the files being dragged, if any.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)
   */
  readonly files: FileList;
  /**
   * Returns a DataTransferItemList object, with the drag data.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)
   */
  readonly items: DataTransferItemList;
  /**
   * Returns a frozen array listing the formats that were set in the dragstart
   * event. In addition, if any files are being dragged, then one of the types
   * will be the string "Files".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)
   */
  readonly types: ReadonlyArray<string>;
  /**
   * Removes the data of the specified formats. Removes all data if the
   * argument is omitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)
   */
  clearData(format?: string): void;
  /**
   * Returns the specified data. If there is no such data, returns the empty
   * string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)
   */
  getData(format: string): string;
  /**
   * Adds the specified data.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)
   */
  setData(format: string, data: string): void;
  /**
   * Uses the given element to update the drag feedback, replacing any
   * previously specified feedback.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)
   */
  setDragImage(image: Element, x: number, y: number): void;
}

declare var DataTransfer: {
  readonly prototype: DataTransfer;
  new (): DataTransfer;
};

/**
 * One drag data item. During a drag operation, each drag event has a
 * dataTransfer property which contains a list of drag data items. Each item in
 * the list is a DataTransferItem object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem)
 */
interface DataTransferItem {
  /**
   * Returns the drag data item kind, one of: "string", "file".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)
   */
  readonly kind: string;
  /**
   * Returns the drag data item type string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)
   */
  readonly type: string;
  /**
   * Returns a File object, if the drag data item kind is File.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)
   */
  getAsFile(): File | null;
  /**
   * Invokes the callback with the string data as the argument, if the drag
   * data item kind is text.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)
   */
  getAsString(callback: FunctionStringCallback | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry)
   */
  webkitGetAsEntry(): FileSystemEntry | null;
}

declare var DataTransferItem: {
  readonly prototype: DataTransferItem;
  new (): DataTransferItem;
};

/**
 * A list of DataTransferItem objects representing items being dragged. During a
 * drag operation, each DragEvent has a dataTransfer property and that property
 * is a DataTransferItemList.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)
 */
interface DataTransferItemList {
  /**
   * Returns the number of items in the drag data store.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)
   */
  readonly length: number;
  /**
   * Adds a new entry for the given data to the drag data store. If the data
   * is plain text then a type string has to be provided also.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/add)
   */
  add(data: string, type: string): DataTransferItem | null;
  add(data: File): DataTransferItem | null;
  /**
   * Removes all the entries in the drag data store.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/clear)
   */
  clear(): void;
  /**
   * Removes the indexth entry in the drag data store.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/remove)
   */
  remove(index: number): void;
  readonly [index: number]: DataTransferItem;
}

declare var DataTransferItemList: {
  readonly prototype: DataTransferItemList;
  new (): DataTransferItemList;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)
 */
interface DecompressionStream extends GenericTransformStream {}

declare var DecompressionStream: {
  readonly prototype: DecompressionStream;
  new (format: CompressionFormat): DecompressionStream;
};

/**
 * A delay-line; an AudioNode audio-processing module that causes a delay
 * between the arrival of an input data and its propagation to the output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode)
 */
interface DelayNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime)
   */
  readonly delayTime: AudioParam;
}

declare var DelayNode: {
  readonly prototype: DelayNode;
  new (context: BaseAudioContext, options?: DelayOptions): DelayNode;
};

/**
 * The DeviceMotionEvent provides web developers with information about the
 * speed of changes for the device's position and orientation. Available only in
 * secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)
 */
interface DeviceMotionEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration)
   */
  readonly acceleration: DeviceMotionEventAcceleration | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity)
   */
  readonly accelerationIncludingGravity: DeviceMotionEventAcceleration | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval)
   */
  readonly interval: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate)
   */
  readonly rotationRate: DeviceMotionEventRotationRate | null;
}

declare var DeviceMotionEvent: {
  readonly prototype: DeviceMotionEvent;
  new (type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration)
 */
interface DeviceMotionEventAcceleration {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x)
   */
  readonly x: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y)
   */
  readonly y: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z)
   */
  readonly z: number | null;
}

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate)
 */
interface DeviceMotionEventRotationRate {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha)
   */
  readonly alpha: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta)
   */
  readonly beta: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma)
   */
  readonly gamma: number | null;
}

/**
 * The DeviceOrientationEvent provides web developers with information from the
 * physical orientation of the device running the web page. Available only in
 * secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)
 */
interface DeviceOrientationEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute)
   */
  readonly absolute: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha)
   */
  readonly alpha: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta)
   */
  readonly beta: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma)
   */
  readonly gamma: number | null;
}

declare var DeviceOrientationEvent: {
  readonly prototype: DeviceOrientationEvent;
  new (
    type: string,
    eventInitDict?: DeviceOrientationEventInit,
  ): DeviceOrientationEvent;
};

interface DocumentEventMap extends GlobalEventHandlersEventMap {
  readonly DOMContentLoaded: Event;
  readonly fullscreenchange: Event;
  readonly fullscreenerror: Event;
  readonly pointerlockchange: Event;
  readonly pointerlockerror: Event;
  readonly readystatechange: Event;
  readonly visibilitychange: Event;
}

/**
 * Any web page loaded in the browser and serves as an entry point into the web
 * page's content, which is the DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document)
 */
interface Document
  extends Node,
    DocumentOrShadowRoot,
    FontFaceSource,
    GlobalEventHandlers,
    NonElementParentNode,
    ParentNode,
    XPathEvaluatorBase {
  /**
   * Sets or gets the URL for the current document.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/URL)
   */
  readonly URL: string;
  /**
   * Sets or gets the color of all active links in the document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)
   */
  readonly alinkColor: string;
  /**
   * Returns a reference to the collection of elements contained by the
   * object.
   *
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/all)
   */
  readonly all: HTMLAllCollection;
  /**
   * Retrieves a collection of all a objects that have a name and/or id
   * property. Objects in this collection are in HTML source order.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/anchors)
   */
  readonly anchors: HTMLCollectionOf<HTMLAnchorElement>;
  /**
   * Retrieves a collection of all applet objects in the document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/applets)
   */
  readonly applets: HTMLCollection;
  /**
   * Deprecated. Sets or retrieves a value that indicates the background color
   * behind the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/bgColor)
   */
  readonly bgColor: string;
  /**
   * Specifies the beginning and end of the document body.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/body)
   */
  readonly body: HTMLElement;
  /**
   * Returns document's encoding.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
   */
  readonly characterSet: string;
  /**
   * Gets or sets the character set used to encode the object.
   *
   * @deprecated This is a legacy alias of `characterSet`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
   */
  readonly charset: string;
  /**
   * Gets a value that indicates whether standards-compliant mode is switched
   * on for the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/compatMode)
   */
  readonly compatMode: string;
  /**
   * Returns document's content type.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/contentType)
   */
  readonly contentType: string;
  /**
   * Returns the HTTP cookies that apply to the Document. If there are no
   * cookies or cookies can't be applied to this resource, the empty string
   * will be returned.
   *
   * Can be set, to add a new cookie to the element's set of HTTP cookies.
   *
   * If the contents are sandboxed into a unique origin (e.g. in an iframe
   * with the sandbox attribute), a "SecurityError" DOMException will be
   * thrown on getting and setting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/cookie)
   */
  readonly cookie: string;
  /**
   * Returns the script element, or the SVG script element, that is currently
   * executing, as long as the element represents a classic script. In the
   * case of reentrant script execution, returns the one that most recently
   * started executing amongst those that have not yet finished executing.
   *
   * Returns null if the Document is not currently executing a script or SVG
   * script element (e.g., because the running script is an event handler, or
   * a timeout), or if the currently executing script or SVG script element
   * represents a module script.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/currentScript)
   */
  readonly currentScript: HTMLOrSVGScriptElement | null;
  /**
   * Returns the Window object of the active document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/defaultView)
   */
  readonly defaultView: (WindowProxy & typeof globalThis) | null;
  /**
   * Sets or gets a value that indicates whether the document can be edited.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/designMode)
   */
  readonly designMode: string;
  /**
   * Sets or retrieves a value that indicates the reading order of the object.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/dir)
   */
  readonly dir: string;
  /**
   * Gets an object representing the document type declaration associated with
   * the current document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/doctype)
   */
  readonly doctype: DocumentType | null;
  /**
   * Gets a reference to the root node of the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/documentElement)
   */
  readonly documentElement: HTMLElement;
  /**
   * Returns document's URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/documentURI)
   */
  readonly documentURI: string;
  /**
   * Sets or gets the security domain of the document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/domain)
   */
  readonly domain: string;
  /**
   * Retrieves a collection of all embed objects in the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/embeds)
   */
  readonly embeds: HTMLCollectionOf<HTMLEmbedElement>;
  /**
   * Sets or gets the foreground (text) color of the document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/fgColor)
   */
  readonly fgColor: string;
  /**
   * Retrieves a collection, in source order, of all form objects in the
   * document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/forms)
   */
  readonly forms: HTMLCollectionOf<HTMLFormElement>;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreen)
   */
  readonly fullscreen: boolean;
  /**
   * Returns true if document has the ability to display elements fullscreen
   * and fullscreen is supported, or false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)
   */
  readonly fullscreenEnabled: boolean;
  /**
   * Returns the head element.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/head)
   */
  readonly head: HTMLHeadElement;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/hidden)
   */
  readonly hidden: boolean;
  /**
   * Retrieves a collection, in source order, of img objects in the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/images)
   */
  readonly images: HTMLCollectionOf<HTMLImageElement>;
  /**
   * Gets the implementation object of the current document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/implementation)
   */
  readonly implementation: DOMImplementation;
  /**
   * Returns the character encoding used to create the webpage that is loaded
   * into the document object.
   *
   * @deprecated This is a legacy alias of `characterSet`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
   */
  readonly inputEncoding: string;
  /**
   * Gets the date that the page was last modified, if the page supplies one.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/lastModified)
   */
  readonly lastModified: string;
  /**
   * Sets or gets the color of the document links.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/linkColor)
   */
  readonly linkColor: string;
  /**
   * Retrieves a collection of all a objects that specify the href property
   * and all area objects in the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/links)
   */
  readonly links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
  /**
   * Contains information about the current URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/location)
   */
  get location(): Location;
  set location(href: string | Location);
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event)
   */
  readonly onfullscreenchange: ((this: Document, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event)
   */
  readonly onfullscreenerror: ((this: Document, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event)
   */
  readonly onpointerlockchange: ((this: Document, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event)
   */
  readonly onpointerlockerror: ((this: Document, ev: Event) => unknown) | null;
  /**
   * Fires when the state of the object has changed.
   *
   * @param ev The event
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
   */
  readonly onreadystatechange: ((this: Document, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event)
   */
  readonly onvisibilitychange: ((this: Document, ev: Event) => unknown) | null;
  readonly ownerDocument: null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled)
   */
  readonly pictureInPictureEnabled: boolean;
  /**
   * Return an HTMLCollection of the embed elements in the Document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/plugins)
   */
  readonly plugins: HTMLCollectionOf<HTMLEmbedElement>;
  /**
   * Retrieves a value that indicates the current state of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/readyState)
   */
  readonly readyState: DocumentReadyState;
  /**
   * Gets the URL of the location that referred the user to the current page.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/referrer)
   */
  readonly referrer: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/rootElement)
   */
  readonly rootElement: SVGSVGElement | null;
  /**
   * Retrieves a collection of all script objects in the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/scripts)
   */
  readonly scripts: HTMLCollectionOf<HTMLScriptElement>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement)
   */
  readonly scrollingElement: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/timeline)
   */
  readonly timeline: DocumentTimeline;
  /**
   * Contains the title of the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/title)
   */
  readonly title: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilityState)
   */
  readonly visibilityState: DocumentVisibilityState;
  /**
   * Sets or gets the color of the links that the user has visited.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)
   */
  readonly vlinkColor: string;
  /**
   * Moves node from another document and returns it.
   *
   * If node is a document, throws a "NotSupportedError" DOMException or, if
   * node is a shadow root, throws a "HierarchyRequestError" DOMException.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptNode)
   */
  adoptNode<T extends Node>(node: T): T;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/captureEvents)
   */
  captureEvents(): void;
  /** @deprecated */
  caretRangeFromPoint(x: number, y: number): Range | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/clear)
   */
  clear(): void;
  /**
   * Closes an output stream and forces the sent data to display.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/close)
   */
  close(): void;
  /**
   * Creates an attribute object with a specified name.
   *
   * @param name String that sets the attribute object's name.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttribute)
   */
  createAttribute(localName: string): Attr;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttributeNS)
   */
  createAttributeNS(namespace: string | null, qualifiedName: string): Attr;
  /**
   * Returns a CDATASection node whose data is data.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createCDATASection)
   */
  createCDATASection(data: string): CDATASection;
  /**
   * Creates a comment object with the specified data.
   *
   * @param data Sets the comment object's data.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createComment)
   */
  createComment(data: string): Comment;
  /**
   * Creates a new document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createDocumentFragment)
   */
  createDocumentFragment(): DocumentFragment;
  /**
   * Creates an instance of the element for the specified tag.
   *
   * @param tagName The name of an element.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createElement)
   */
  createElement<K extends keyof HTMLElementTagNameMap>(
    tagName: K,
    options?: ElementCreationOptions,
  ): HTMLElementTagNameMap[K];
  /** @deprecated */
  createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(
    tagName: K,
    options?: ElementCreationOptions,
  ): HTMLElementDeprecatedTagNameMap[K];
  createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
  /**
   * Returns an element with namespace namespace. Its namespace prefix will be
   * everything before ":" (U+003E) in qualifiedName or null. Its local name
   * will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
   *
   * If localName does not match the Name production an
   * "InvalidCharacterError" DOMException will be thrown.
   *
   * If one of the following conditions is true a "NamespaceError"
   * DOMException will be thrown:
   *
   * LocalName does not match the QName production. Namespace prefix is not
   * null and namespace is the empty string. Namespace prefix is "xml" and
   * namespace is not the XML namespace. qualifiedName or namespace prefix is
   * "xmlns" and namespace is not the XMLNS namespace. namespace is the XMLNS
   * namespace and neither qualifiedName nor namespace prefix is "xmlns".
   *
   * When supplied, options's is can be used to create a customized built-in
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
   */
  createElementNS(
    namespaceURI: 'http://www.w3.org/1999/xhtml',
    qualifiedName: string,
  ): HTMLElement;
  createElementNS<K extends keyof SVGElementTagNameMap>(
    namespaceURI: 'http://www.w3.org/2000/svg',
    qualifiedName: K,
  ): SVGElementTagNameMap[K];
  createElementNS(
    namespaceURI: 'http://www.w3.org/2000/svg',
    qualifiedName: string,
  ): SVGElement;
  createElementNS<K extends keyof MathMLElementTagNameMap>(
    namespaceURI: 'http://www.w3.org/1998/Math/MathML',
    qualifiedName: K,
  ): MathMLElementTagNameMap[K];
  createElementNS(
    namespaceURI: 'http://www.w3.org/1998/Math/MathML',
    qualifiedName: string,
  ): MathMLElement;
  createElementNS(
    namespaceURI: string | null,
    qualifiedName: string,
    options?: ElementCreationOptions,
  ): Element;
  createElementNS(
    namespace: string | null,
    qualifiedName: string,
    options?: string | ElementCreationOptions,
  ): Element;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createEvent)
   */
  createEvent(eventInterface: 'AnimationEvent'): AnimationEvent;
  createEvent(eventInterface: 'AnimationPlaybackEvent'): AnimationPlaybackEvent;
  createEvent(eventInterface: 'AudioProcessingEvent'): AudioProcessingEvent;
  createEvent(eventInterface: 'BeforeUnloadEvent'): BeforeUnloadEvent;
  createEvent(eventInterface: 'BlobEvent'): BlobEvent;
  createEvent(eventInterface: 'ClipboardEvent'): ClipboardEvent;
  createEvent(eventInterface: 'CloseEvent'): CloseEvent;
  createEvent(eventInterface: 'CompositionEvent'): CompositionEvent;
  createEvent(eventInterface: 'CustomEvent'): CustomEvent;
  createEvent(eventInterface: 'DeviceMotionEvent'): DeviceMotionEvent;
  createEvent(eventInterface: 'DeviceOrientationEvent'): DeviceOrientationEvent;
  createEvent(eventInterface: 'DragEvent'): DragEvent;
  createEvent(eventInterface: 'ErrorEvent'): ErrorEvent;
  createEvent(eventInterface: 'Event'): Event;
  createEvent(eventInterface: 'Events'): Event;
  createEvent(eventInterface: 'FocusEvent'): FocusEvent;
  createEvent(eventInterface: 'FontFaceSetLoadEvent'): FontFaceSetLoadEvent;
  createEvent(eventInterface: 'FormDataEvent'): FormDataEvent;
  createEvent(eventInterface: 'GamepadEvent'): GamepadEvent;
  createEvent(eventInterface: 'HashChangeEvent'): HashChangeEvent;
  createEvent(eventInterface: 'IDBVersionChangeEvent'): IDBVersionChangeEvent;
  createEvent(eventInterface: 'InputEvent'): InputEvent;
  createEvent(eventInterface: 'KeyboardEvent'): KeyboardEvent;
  createEvent(eventInterface: 'MIDIConnectionEvent'): MIDIConnectionEvent;
  createEvent(eventInterface: 'MIDIMessageEvent'): MIDIMessageEvent;
  createEvent(eventInterface: 'MediaEncryptedEvent'): MediaEncryptedEvent;
  createEvent(eventInterface: 'MediaKeyMessageEvent'): MediaKeyMessageEvent;
  createEvent(eventInterface: 'MediaQueryListEvent'): MediaQueryListEvent;
  createEvent(eventInterface: 'MediaStreamTrackEvent'): MediaStreamTrackEvent;
  createEvent(eventInterface: 'MessageEvent'): MessageEvent;
  createEvent(eventInterface: 'MouseEvent'): MouseEvent;
  createEvent(eventInterface: 'MouseEvents'): MouseEvent;
  createEvent(eventInterface: 'MutationEvent'): MutationEvent;
  createEvent(eventInterface: 'MutationEvents'): MutationEvent;
  createEvent(
    eventInterface: 'OfflineAudioCompletionEvent',
  ): OfflineAudioCompletionEvent;
  createEvent(eventInterface: 'PageTransitionEvent'): PageTransitionEvent;
  createEvent(
    eventInterface: 'PaymentMethodChangeEvent',
  ): PaymentMethodChangeEvent;
  createEvent(
    eventInterface: 'PaymentRequestUpdateEvent',
  ): PaymentRequestUpdateEvent;
  createEvent(eventInterface: 'PictureInPictureEvent'): PictureInPictureEvent;
  createEvent(eventInterface: 'PointerEvent'): PointerEvent;
  createEvent(eventInterface: 'PopStateEvent'): PopStateEvent;
  createEvent(eventInterface: 'ProgressEvent'): ProgressEvent;
  createEvent(eventInterface: 'PromiseRejectionEvent'): PromiseRejectionEvent;
  createEvent(eventInterface: 'RTCDTMFToneChangeEvent'): RTCDTMFToneChangeEvent;
  createEvent(eventInterface: 'RTCDataChannelEvent'): RTCDataChannelEvent;
  createEvent(eventInterface: 'RTCErrorEvent'): RTCErrorEvent;
  createEvent(
    eventInterface: 'RTCPeerConnectionIceErrorEvent',
  ): RTCPeerConnectionIceErrorEvent;
  createEvent(
    eventInterface: 'RTCPeerConnectionIceEvent',
  ): RTCPeerConnectionIceEvent;
  createEvent(eventInterface: 'RTCTrackEvent'): RTCTrackEvent;
  createEvent(
    eventInterface: 'SecurityPolicyViolationEvent',
  ): SecurityPolicyViolationEvent;
  createEvent(
    eventInterface: 'SpeechSynthesisErrorEvent',
  ): SpeechSynthesisErrorEvent;
  createEvent(eventInterface: 'SpeechSynthesisEvent'): SpeechSynthesisEvent;
  createEvent(eventInterface: 'StorageEvent'): StorageEvent;
  createEvent(eventInterface: 'SubmitEvent'): SubmitEvent;
  createEvent(eventInterface: 'ToggleEvent'): ToggleEvent;
  createEvent(eventInterface: 'TouchEvent'): TouchEvent;
  createEvent(eventInterface: 'TrackEvent'): TrackEvent;
  createEvent(eventInterface: 'TransitionEvent'): TransitionEvent;
  createEvent(eventInterface: 'UIEvent'): UIEvent;
  createEvent(eventInterface: 'UIEvents'): UIEvent;
  createEvent(eventInterface: 'WebGLContextEvent'): WebGLContextEvent;
  createEvent(eventInterface: 'WheelEvent'): WheelEvent;
  createEvent(eventInterface: string): Event;
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists
   * of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @param whatToShow The type of nodes or elements to appear in the node
   *   list
   * @param filter A custom NodeFilter function to use. For more information,
   *   see filter. Use null for no filter.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createNodeIterator)
   */
  createNodeIterator(
    root: Node,
    whatToShow?: number,
    filter?: NodeFilter | null,
  ): NodeIterator;
  /**
   * Returns a ProcessingInstruction node whose target is target and data is
   * data. If target does not match the Name production an
   * "InvalidCharacterError" DOMException will be thrown. If data contains
   * "?>" an "InvalidCharacterError" DOMException will be thrown.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createProcessingInstruction)
   */
  createProcessingInstruction(
    target: string,
    data: string,
  ): ProcessingInstruction;
  /**
   * Returns an empty range object that has both of its boundary points
   * positioned at the beginning of the document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createRange)
   */
  createRange(): Range;
  /**
   * Creates a text string from the specified value.
   *
   * @param data String that specifies the nodeValue property of the text
   *   node.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createTextNode)
   */
  createTextNode(data: string): Text;
  /**
   * Creates a TreeWalker object that you can use to traverse filtered lists
   * of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @param whatToShow The type of nodes or elements to appear in the node
   *   list. For more information, see whatToShow.
   * @param filter A custom NodeFilter function to use.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker)
   */
  createTreeWalker(
    root: Node,
    whatToShow?: number,
    filter?: NodeFilter | null,
  ): TreeWalker;
  /**
   * Executes a command on the current document, current selection, or the
   * given range.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/execCommand)
   * @param commandId String that specifies the command to execute. This
   *   command can be any of the command identifiers that can be executed in
   *   script.
   * @param showUI Display the user interface, defaults to false.
   * @param value Value to assign.
   */
  execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
  /**
   * Stops document's fullscreen element from being displayed fullscreen and
   * resolves promise when done.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/exitFullscreen)
   */
  exitFullscreen(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPictureInPicture)
   */
  exitPictureInPicture(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPointerLock)
   */
  exitPointerLock(): void;
  /**
   * Returns a reference to the first object with the specified value of the
   * ID attribute.
   *
   * @param elementId String that specifies the ID value.
   */
  getElementById(elementId: string): HTMLElement | null;
  /**
   * Returns a HTMLCollection of the elements in the object on which the
   * method was invoked (a document or an element) that have all the classes
   * given by classNames. The classNames argument is interpreted as a
   * space-separated list of classes.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName)
   */
  getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
  /**
   * Gets a collection of objects based on the value of the NAME or ID
   * attribute.
   *
   * @param elementName Gets a collection of objects based on the value of the
   *   NAME or ID attribute.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByName)
   */
  getElementsByName(elementName: string): NodeListOf<HTMLElement>;
  /**
   * Retrieves a collection of objects based on the specified element name.
   *
   * @param name Specifies the name of an element.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagName)
   */
  getElementsByTagName<K extends keyof HTMLElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof SVGElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<SVGElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof MathMLElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
  /** @deprecated */
  getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
  getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
  /**
   * If namespace and localName are "*" returns a HTMLCollection of all
   * descendant elements.
   *
   * If only namespace is "*" returns a HTMLCollection of all descendant
   * elements whose local name is localName.
   *
   * If only localName is "*" returns a HTMLCollection of all descendant
   * elements whose namespace is namespace.
   *
   * Otherwise, returns a HTMLCollection of all descendant elements whose
   * namespace is namespace and local name is localName.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
   */
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/1999/xhtml',
    localName: string,
  ): HTMLCollectionOf<HTMLElement>;
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/2000/svg',
    localName: string,
  ): HTMLCollectionOf<SVGElement>;
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/1998/Math/MathML',
    localName: string,
  ): HTMLCollectionOf<MathMLElement>;
  getElementsByTagNameNS(
    namespace: string | null,
    localName: string,
  ): HTMLCollectionOf<Element>;
  /**
   * Returns an object representing the current selection of the document that
   * is loaded into the object displaying a webpage.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/getSelection)
   */
  getSelection(): Selection | null;
  /**
   * Gets a value indicating whether the object currently has focus.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/hasFocus)
   */
  hasFocus(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/hasStorageAccess)
   */
  hasStorageAccess(): Promise<boolean>;
  /**
   * Returns a copy of node. If deep is true, the copy also includes the
   * node's descendants.
   *
   * If node is a document or a shadow root, throws a "NotSupportedError"
   * DOMException.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/importNode)
   */
  importNode<T extends Node>(node: T, deep?: boolean): T;
  /**
   * Opens a new window and loads a document specified by a given URL. Also,
   * opens a new window that uses the url parameter and the name parameter to
   * collect the output of the write method and the writeln method.
   *
   * @param url Specifies a MIME type for the document.
   * @param name Specifies the name of the window. This name is used as the
   *   value for the TARGET attribute on a form or an anchor element.
   * @param features Contains a list of items separated by commas. Each item
   *   consists of an option and a value, separated by an equals sign (for
   *   example, "fullscreen=yes, toolbar=yes"). The following values are
   *   supported.
   * @param replace Specifies whether the existing entry for the document is
   *   replaced in the history list.
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/open)
   */
  open(unused1?: string, unused2?: string): Document;
  open(url: string | URL, name: string, features: string): WindowProxy | null;
  /**
   * Returns a Boolean value that indicates whether a specified command can be
   * successfully executed using execCommand, given the current state of the
   * document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandEnabled)
   * @param commandId Specifies a command identifier.
   */
  queryCommandEnabled(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates whether the specified command is
   * in the indeterminate state.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandIndeterm)
   * @param commandId String that specifies a command identifier.
   */
  queryCommandIndeterm(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates the current state of the command.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandState)
   * @param commandId String that specifies a command identifier.
   */
  queryCommandState(commandId: string): boolean;
  /**
   * Returns a Boolean value that indicates whether the current command is
   * supported on the current range.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandSupported)
   * @param commandId Specifies a command identifier.
   */
  queryCommandSupported(commandId: string): boolean;
  /**
   * Returns the current value of the document, range, or current selection
   * for the given command.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandValue)
   * @param commandId String that specifies a command identifier.
   */
  queryCommandValue(commandId: string): string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/releaseEvents)
   */
  releaseEvents(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/requestStorageAccess)
   */
  requestStorageAccess(): Promise<void>;
  /**
   * Writes one or more HTML expressions to a document in the specified
   * window.
   *
   * @param content Specifies the text and HTML tags to write.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/write)
   */
  write(...text: readonly string[]): void;
  /**
   * Writes one or more HTML expressions, followed by a carriage return, to a
   * document in the specified window.
   *
   * @param content The text and HTML tags to write.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/writeln)
   */
  writeln(...text: readonly string[]): void;
  addEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: Document, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: Document, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Document: {
  readonly prototype: Document;
  new (): Document;
};

/**
 * A minimal document object that has no parent. It is used as a lightweight
 * version of Document that stores a segment of a document structure comprised
 * of nodes just like a standard document. The key difference is that because
 * the document fragment isn't part of the active document tree structure,
 * changes made to the fragment don't affect the document, cause reflow, or
 * incur any performance impact that can occur when changes are made.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentFragment)
 */
interface DocumentFragment extends Node, NonElementParentNode, ParentNode {
  readonly ownerDocument: Document;
  getElementById(elementId: string): HTMLElement | null;
}

declare var DocumentFragment: {
  readonly prototype: DocumentFragment;
  new (): DocumentFragment;
};

interface DocumentOrShadowRoot {
  /**
   * Returns the deepest element in the document through which or to which key
   * events are being routed. This is, roughly speaking, the focused element
   * in the document.
   *
   * For the purposes of this API, when a child browsing context is focused,
   * its container is focused in the parent browsing context. For example, if
   * the user moves the focus to a text control in an iframe, the iframe is
   * the element returned by the activeElement API in the iframe's node
   * document.
   *
   * Similarly, when the focused element is in a different node tree than
   * documentOrShadowRoot, the element returned will be the host that's
   * located in the same node tree as documentOrShadowRoot if
   * documentOrShadowRoot is a shadow-including inclusive ancestor of the
   * focused element, and null if not.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/activeElement)
   */
  readonly activeElement: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets)
   */
  readonly adoptedStyleSheets: readonly CSSStyleSheet[];
  /**
   * Returns document's fullscreen element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)
   */
  readonly fullscreenElement: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement)
   */
  readonly pictureInPictureElement: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement)
   */
  readonly pointerLockElement: Element | null;
  /**
   * Retrieves a collection of styleSheet objects representing the style
   * sheets that correspond to each instance of a link or style object in the
   * document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)
   */
  readonly styleSheets: StyleSheetList;
  /**
   * Returns the element for the specified x coordinate and the specified y
   * coordinate.
   *
   * @param x The x-offset
   * @param y The y-offset
   */
  elementFromPoint(x: number, y: number): Element | null;
  elementsFromPoint(x: number, y: number): readonly Element[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/getAnimations)
   */
  getAnimations(): readonly Animation[];
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentTimeline) */
interface DocumentTimeline extends AnimationTimeline {}

declare var DocumentTimeline: {
  readonly prototype: DocumentTimeline;
  new (options?: DocumentTimelineOptions): DocumentTimeline;
};

/**
 * A Node containing a doctype.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType)
 */
interface DocumentType extends Node, ChildNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/name)
   */
  readonly name: string;
  readonly ownerDocument: Document;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId)
   */
  readonly publicId: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId)
   */
  readonly systemId: string;
}

declare var DocumentType: {
  readonly prototype: DocumentType;
  new (): DocumentType;
};

/**
 * A DOM event that represents a drag and drop interaction. The user initiates a
 * drag by placing a pointer device (such as a mouse) on the touch surface and
 * then dragging the pointer to a new location (such as another DOM element).
 * Applications are free to interpret a drag and drop interaction in an
 * application-specific way.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent)
 */
interface DragEvent extends MouseEvent {
  /**
   * Returns the DataTransfer object for the event.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)
   */
  readonly dataTransfer: DataTransfer | null;
}

declare var DragEvent: {
  readonly prototype: DragEvent;
  new (type: string, eventInitDict?: DragEventInit): DragEvent;
};

/**
 * Inherits properties from its parent, AudioNode.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)
 */
interface DynamicsCompressorNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack)
   */
  readonly attack: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee)
   */
  readonly knee: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio)
   */
  readonly ratio: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction)
   */
  readonly reduction: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release)
   */
  readonly release: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold)
   */
  readonly threshold: AudioParam;
}

declare var DynamicsCompressorNode: {
  readonly prototype: DynamicsCompressorNode;
  new (
    context: BaseAudioContext,
    options?: DynamicsCompressorOptions,
  ): DynamicsCompressorNode;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax) */
interface EXT_blend_minmax {
  readonly MIN_EXT: 0x8007;
  readonly MAX_EXT: 0x8008;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float)
 */
interface EXT_color_buffer_float {}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float)
 */
interface EXT_color_buffer_half_float {
  readonly RGBA16F_EXT: 0x881a;
  readonly RGB16F_EXT: 0x881b;
  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211;
  readonly UNSIGNED_NORMALIZED_EXT: 0x8c17;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_float_blend) */
interface EXT_float_blend {}

/**
 * The EXT_frag_depth extension is part of the WebGL API and enables to set a
 * depth value of a fragment from within the fragment shader.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
 */
interface EXT_frag_depth {}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_sRGB) */
interface EXT_sRGB {
  readonly SRGB_EXT: 0x8c40;
  readonly SRGB_ALPHA_EXT: 0x8c42;
  readonly SRGB8_ALPHA8_EXT: 0x8c43;
  readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod)
 */
interface EXT_shader_texture_lod {}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc)
 */
interface EXT_texture_compression_bptc {
  readonly COMPRESSED_RGBA_BPTC_UNORM_EXT: 0x8e8c;
  readonly COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: 0x8e8d;
  readonly COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: 0x8e8e;
  readonly COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: 0x8e8f;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc)
 */
interface EXT_texture_compression_rgtc {
  readonly COMPRESSED_RED_RGTC1_EXT: 0x8dbb;
  readonly COMPRESSED_SIGNED_RED_RGTC1_EXT: 0x8dbc;
  readonly COMPRESSED_RED_GREEN_RGTC2_EXT: 0x8dbd;
  readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 0x8dbe;
}

/**
 * The EXT_texture_filter_anisotropic extension is part of the WebGL API and
 * exposes two constants for anisotropic filtering (AF).
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
 */
interface EXT_texture_filter_anisotropic {
  readonly TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe;
  readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16)
 */
interface EXT_texture_norm16 {
  readonly R16_EXT: 0x822a;
  readonly RG16_EXT: 0x822c;
  readonly RGB16_EXT: 0x8054;
  readonly RGBA16_EXT: 0x805b;
  readonly R16_SNORM_EXT: 0x8f98;
  readonly RG16_SNORM_EXT: 0x8f99;
  readonly RGB16_SNORM_EXT: 0x8f9a;
  readonly RGBA16_SNORM_EXT: 0x8f9b;
}

interface ElementEventMap {
  readonly fullscreenchange: Event;
  readonly fullscreenerror: Event;
}

/**
 * Element is the most general base class from which all objects in a Document
 * inherit. It only has methods and properties common to all kinds of elements.
 * More specific classes inherit from Element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)
 */
interface Element
  extends Node,
    ARIAMixin,
    Animatable,
    ChildNode,
    InnerHTML,
    NonDocumentTypeChildNode,
    ParentNode,
    Slottable {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)
   */
  readonly attributes: NamedNodeMap;
  /**
   * Allows for manipulation of element's class content attribute as a set of
   * whitespace-separated tokens through a DOMTokenList object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)
   */
  readonly classList: DOMTokenList;
  /**
   * Returns the value of element's class content attribute. Can be set to
   * change it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/className)
   */
  readonly className: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)
   */
  readonly clientHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)
   */
  readonly clientLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)
   */
  readonly clientTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)
   */
  readonly clientWidth: number;
  /**
   * Returns the value of element's id content attribute. Can be set to change
   * it.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)
   */
  readonly id: string;
  /**
   * Returns the local name.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)
   */
  readonly localName: string;
  /**
   * Returns the namespace.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)
   */
  readonly namespaceURI: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)
   */
  readonly onfullscreenchange: ((this: Element, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)
   */
  readonly onfullscreenerror: ((this: Element, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)
   */
  readonly outerHTML: string;
  readonly ownerDocument: Document;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/part) */
  readonly part: DOMTokenList;
  /**
   * Returns the namespace prefix.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)
   */
  readonly prefix: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)
   */
  readonly scrollHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)
   */
  readonly scrollLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)
   */
  readonly scrollTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)
   */
  readonly scrollWidth: number;
  /**
   * Returns element's shadow root, if any, and if shadow root's mode is
   * "open", and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)
   */
  readonly shadowRoot: ShadowRoot | null;
  /**
   * Returns the value of element's slot content attribute. Can be set to
   * change it.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)
   */
  readonly slot: string;
  /**
   * Returns the HTML-uppercased qualified name.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)
   */
  readonly tagName: string;
  /**
   * Creates a shadow root for element and returns it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/attachShadow)
   */
  attachShadow(init: ShadowRootInit): ShadowRoot;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/checkVisibility)
   */
  checkVisibility(options?: CheckVisibilityOptions): boolean;
  /**
   * Returns the first (starting at element) inclusive ancestor that matches
   * selectors, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/closest)
   */
  closest<K extends keyof HTMLElementTagNameMap>(
    selector: K,
  ): HTMLElementTagNameMap[K] | null;
  closest<K extends keyof SVGElementTagNameMap>(
    selector: K,
  ): SVGElementTagNameMap[K] | null;
  closest<K extends keyof MathMLElementTagNameMap>(
    selector: K,
  ): MathMLElementTagNameMap[K] | null;
  closest<E extends Element = Element>(selectors: string): E | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/computedStyleMap)
   */
  computedStyleMap(): StylePropertyMapReadOnly;
  /**
   * Returns element's first attribute whose qualified name is qualifiedName,
   * and null if there is no such attribute otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttribute)
   */
  getAttribute(qualifiedName: string): string | null;
  /**
   * Returns element's attribute whose namespace is namespace and local name
   * is localName, and null if there is no such attribute otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS)
   */
  getAttributeNS(namespace: string | null, localName: string): string | null;
  /**
   * Returns the qualified names of all element's attributes. Can contain
   * duplicates.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNames)
   */
  getAttributeNames(): readonly string[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNode)
   */
  getAttributeNode(qualifiedName: string): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNodeNS)
   */
  getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getBoundingClientRect)
   */
  getBoundingClientRect(): DOMRect;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getClientRects)
   */
  getClientRects(): DOMRectList;
  /**
   * Returns a HTMLCollection of the elements in the object on which the
   * method was invoked (a document or an element) that have all the classes
   * given by classNames. The classNames argument is interpreted as a
   * space-separated list of classes.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByClassName)
   */
  getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName)
   */
  getElementsByTagName<K extends keyof HTMLElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof SVGElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<SVGElementTagNameMap[K]>;
  getElementsByTagName<K extends keyof MathMLElementTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
  /** @deprecated */
  getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(
    qualifiedName: K,
  ): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
  getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS)
   */
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/1999/xhtml',
    localName: string,
  ): HTMLCollectionOf<HTMLElement>;
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/2000/svg',
    localName: string,
  ): HTMLCollectionOf<SVGElement>;
  getElementsByTagNameNS(
    namespaceURI: 'http://www.w3.org/1998/Math/MathML',
    localName: string,
  ): HTMLCollectionOf<MathMLElement>;
  getElementsByTagNameNS(
    namespace: string | null,
    localName: string,
  ): HTMLCollectionOf<Element>;
  /**
   * Returns true if element has an attribute whose qualified name is
   * qualifiedName, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttribute)
   */
  hasAttribute(qualifiedName: string): boolean;
  /**
   * Returns true if element has an attribute whose namespace is namespace and
   * local name is localName.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributeNS)
   */
  hasAttributeNS(namespace: string | null, localName: string): boolean;
  /**
   * Returns true if element has attributes, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributes)
   */
  hasAttributes(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/hasPointerCapture)
   */
  hasPointerCapture(pointerId: number): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentElement)
   */
  insertAdjacentElement(
    where: InsertPosition,
    element: Element,
  ): Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentHTML)
   */
  insertAdjacentHTML(position: InsertPosition, text: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentText)
   */
  insertAdjacentText(where: InsertPosition, data: string): void;
  /**
   * Returns true if matching selectors against element's root yields element,
   * and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)
   */
  matches(selectors: string): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/releasePointerCapture)
   */
  releasePointerCapture(pointerId: number): void;
  /**
   * Removes element's first attribute whose qualified name is qualifiedName.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)
   */
  removeAttribute(qualifiedName: string): void;
  /**
   * Removes element's attribute whose namespace is namespace and local name
   * is localName.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNS)
   */
  removeAttributeNS(namespace: string | null, localName: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNode)
   */
  removeAttributeNode(attr: Attr): Attr;
  /**
   * Displays element fullscreen and resolves promise when done.
   *
   * When supplied, options's navigationUI member indicates whether showing
   * navigation UI while in fullscreen is preferred or not. If set to "show",
   * navigation simplicity is preferred over screen space, and if set to
   * "hide", more screen space is preferred. User agents are always free to
   * honor user preference over the application's. The default value "auto"
   * indicates no application preference.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/requestFullscreen)
   */
  requestFullscreen(options?: FullscreenOptions): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/requestPointerLock)
   */
  requestPointerLock(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scroll)
   */
  scroll(options?: ScrollToOptions): void;
  scroll(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollBy)
   */
  scrollBy(options?: ScrollToOptions): void;
  scrollBy(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView)
   */
  scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTo)
   */
  scrollTo(options?: ScrollToOptions): void;
  scrollTo(x: number, y: number): void;
  /**
   * Sets the value of element's first attribute whose qualified name is
   * qualifiedName to value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)
   */
  setAttribute(qualifiedName: string, value: string): void;
  /**
   * Sets the value of element's attribute whose namespace is namespace and
   * local name is localName to value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNS)
   */
  setAttributeNS(
    namespace: string | null,
    qualifiedName: string,
    value: string,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNode)
   */
  setAttributeNode(attr: Attr): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNodeNS)
   */
  setAttributeNodeNS(attr: Attr): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/setPointerCapture)
   */
  setPointerCapture(pointerId: number): void;
  /**
   * If force is not given, "toggles" qualifiedName, removing it if it is
   * present and adding it if it is not present. If force is true, adds
   * qualifiedName. If force is false, removes qualifiedName.
   *
   * Returns true if qualifiedName is now present, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/toggleAttribute)
   */
  toggleAttribute(qualifiedName: string, force?: boolean): boolean;
  /**
   * @deprecated This is a legacy alias of `matches`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)
   */
  webkitMatchesSelector(selectors: string): boolean;
  addEventListener<K extends keyof ElementEventMap>(
    type: K,
    listener: (this: Element, ev: ElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ElementEventMap>(
    type: K,
    listener: (this: Element, ev: ElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Element: {
  readonly prototype: Element;
  new (): Element;
};

interface ElementCSSInlineStyle {
  readonly attributeStyleMap: StylePropertyMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/style)
   */
  readonly style: CSSStyleDeclaration;
}

interface ElementContentEditable {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)
   */
  readonly contentEditable: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)
   */
  readonly enterKeyHint: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)
   */
  readonly inputMode: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)
   */
  readonly isContentEditable: boolean;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals) */
interface ElementInternals extends ARIAMixin {
  /**
   * Returns the form owner of internals's target element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * Returns a NodeList of all the label elements that internals's target
   * element is associated with.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)
   */
  readonly labels: NodeList;
  /**
   * Returns the ShadowRoot for internals's target element, if the target
   * element is a shadow host, or null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)
   */
  readonly shadowRoot: ShadowRoot | null;
  /**
   * Returns the error message that would be shown to the user if internals's
   * target element was to be checked for validity.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns the ValidityState object for internals's target element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)
   */
  readonly validity: ValidityState;
  /**
   * Returns true if internals's target element will be validated when the
   * form is submitted; false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Returns true if internals's target element has no validity problems;
   * false otherwise. Fires an invalid event at the element in the latter
   * case.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * Returns true if internals's target element has no validity problems;
   * otherwise, returns false, fires an invalid event at the element, and (if
   * the event isn't canceled) reports the problem to the user.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Sets both the state and submission value of internals's target element to
   * value.
   *
   * If value is null, the element won't participate in form submission.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setFormValue)
   */
  setFormValue(
    value: File | string | FormData | null,
    state?: File | string | FormData | null,
  ): void;
  /**
   * Marks internals's target element as suffering from the constraints
   * indicated by the flags argument, and sets the element's validation
   * message to message. If anchor is specified, the user agent might use it
   * to indicate problems with the constraints of internals's target element
   * when the form owner is validated interactively or reportValidity() is
   * called.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setValidity)
   */
  setValidity(
    flags?: ValidityStateFlags,
    message?: string,
    anchor?: HTMLElement,
  ): void;
}

declare var ElementInternals: {
  readonly prototype: ElementInternals;
  new (): ElementInternals;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk) */
interface EncodedVideoChunk {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)
   */
  readonly byteLength: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)
   */
  readonly duration: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)
   */
  readonly timestamp: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)
   */
  readonly type: EncodedVideoChunkType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/copyTo)
   */
  copyTo(destination: AllowSharedBufferSource): void;
}

declare var EncodedVideoChunk: {
  readonly prototype: EncodedVideoChunk;
  new (init: EncodedVideoChunkInit): EncodedVideoChunk;
};

/**
 * Events providing information related to errors in scripts or in files.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
 */
interface ErrorEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)
   */
  readonly colno: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)
   */
  readonly error: unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)
   */
  readonly filename: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)
   */
  readonly lineno: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)
   */
  readonly message: string;
}

declare var ErrorEvent: {
  readonly prototype: ErrorEvent;
  new (type: string, eventInitDict?: ErrorEventInit): ErrorEvent;
};

/**
 * An event which takes place in the DOM.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
 */
interface Event {
  /**
   * Returns true or false depending on how event was initialized. True if
   * event goes through its target's ancestors in reverse tree order, and
   * false otherwise.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
   */
  readonly bubbles: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble)
   */
  readonly cancelBubble: boolean;
  /**
   * Returns true or false depending on how event was initialized. Its return
   * value does not always carry meaning, but true can indicate that part of
   * the operation during which event was dispatched, can be canceled by
   * invoking the preventDefault() method.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
   */
  readonly cancelable: boolean;
  /**
   * Returns true or false depending on how event was initialized. True if
   * event invokes listeners past a ShadowRoot node that is the root of its
   * target, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)
   */
  readonly composed: boolean;
  /**
   * Returns the object whose event listener's callback is currently being
   * invoked.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
   */
  readonly currentTarget: EventTarget | null;
  /**
   * Returns true if preventDefault() was invoked successfully to indicate
   * cancelation, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
   */
  readonly defaultPrevented: boolean;
  /**
   * Returns the event's phase, which is one of NONE, CAPTURING_PHASE,
   * AT_TARGET, and BUBBLING_PHASE.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
   */
  readonly eventPhase: number;
  /**
   * Returns true if event was dispatched by the user agent, and false
   * otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
   */
  readonly isTrusted: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Event/returnValue)
   */
  readonly returnValue: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Event/srcElement)
   */
  readonly srcElement: EventTarget | null;
  /**
   * Returns the object to which event is dispatched (its target).
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
   */
  readonly target: EventTarget | null;
  /**
   * Returns the event's timestamp as the number of milliseconds measured
   * relative to the time origin.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
   */
  readonly timeStamp: DOMHighResTimeStamp;
  /**
   * Returns the type of event, e.g. "click", "hashchange", or "submit".
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)
   */
  readonly type: string;
  /**
   * Returns the invocation target objects of event's path (objects on which
   * listeners will be invoked), except for any nodes in shadow trees of which
   * the shadow root's mode is "closed" that are not reachable from event's
   * currentTarget.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
   */
  composedPath(): readonly EventTarget[];
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Event/initEvent)
   */
  initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;
  /**
   * If invoked when the cancelable attribute value is true, and while
   * executing a listener for the event with passive set to false, signals to
   * the operation that caused event to be dispatched that it needs to be
   * canceled.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
   */
  preventDefault(): void;
  /**
   * Invoking this method prevents event from reaching any registered event
   * listeners after the current one finishes running and, when dispatched in
   * a tree, also prevents event from reaching any other objects.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
   */
  stopImmediatePropagation(): void;
  /**
   * When dispatched in a tree, invoking this method prevents event from
   * reaching any objects other than the current object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
   */
  stopPropagation(): void;
  readonly NONE: 0;
  readonly CAPTURING_PHASE: 1;
  readonly AT_TARGET: 2;
  readonly BUBBLING_PHASE: 3;
}

declare var Event: {
  readonly prototype: Event;
  new (type: string, eventInitDict?: EventInit): Event;
  readonly NONE: 0;
  readonly CAPTURING_PHASE: 1;
  readonly AT_TARGET: 2;
  readonly BUBBLING_PHASE: 3;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventCounts) */
interface EventCounts {
  forEach(
    callbackfn: (value: number, key: string, parent: EventCounts) => void,
    thisArg?: unknown,
  ): void;
}

declare var EventCounts: {
  readonly prototype: EventCounts;
  new (): EventCounts;
};

interface EventListener {
  (evt: Event): void;
}

interface EventListenerObject {
  handleEvent(object: Event): void;
}

interface EventSourceEventMap {
  readonly error: Event;
  readonly message: MessageEvent;
  readonly open: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource) */
interface EventSource extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)
   */
  readonly onerror: ((this: EventSource, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)
   */
  readonly onmessage: ((this: EventSource, ev: MessageEvent) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)
   */
  readonly onopen: ((this: EventSource, ev: Event) => unknown) | null;
  /**
   * Returns the state of this EventSource object's connection. It can have
   * the values described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
   */
  readonly readyState: number;
  /**
   * Returns the URL providing the event stream.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)
   */
  readonly url: string;
  /**
   * Returns true if the credentials mode for connection requests to the URL
   * providing the event stream is set to "include", and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
   */
  readonly withCredentials: boolean;
  /**
   * Aborts any instances of the fetch algorithm started for this EventSource
   * object, and sets the readyState attribute to CLOSED.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventSource/close)
   */
  close(): void;
  readonly CONNECTING: 0;
  readonly OPEN: 1;
  readonly CLOSED: 2;
  addEventListener<K extends keyof EventSourceEventMap>(
    type: K,
    listener: (this: EventSource, ev: EventSourceEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: (this: EventSource, event: MessageEvent) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof EventSourceEventMap>(
    type: K,
    listener: (this: EventSource, ev: EventSourceEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: (this: EventSource, event: MessageEvent) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var EventSource: {
  readonly prototype: EventSource;
  new (url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource;
  readonly CONNECTING: 0;
  readonly OPEN: 1;
  readonly CLOSED: 2;
};

/**
 * EventTarget is a DOM interface implemented by objects that can receive events
 * and may have listeners for them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
 */
interface EventTarget {
  /**
   * Appends an event listener for events whose type attribute value is type.
   * The callback argument sets the callback that will be invoked when the
   * event is dispatched.
   *
   * The options argument sets listener-specific options. For compatibility
   * this can be a boolean, in which case the method behaves exactly as if the
   * value was specified as options's capture.
   *
   * When set to true, options's capture prevents callback from being invoked
   * when the event's eventPhase attribute value is BUBBLING_PHASE. When false
   * (or not present), callback will not be invoked when event's eventPhase
   * attribute value is CAPTURING_PHASE. Either way, callback will be invoked
   * if event's eventPhase attribute value is AT_TARGET.
   *
   * When set to true, options's passive indicates that the callback will not
   * cancel the event by invoking preventDefault(). This is used to enable
   * performance optimizations described in § 2.8 Observing event listeners.
   *
   * When set to true, options's once indicates that the callback will only be
   * invoked once after which the event listener will be removed.
   *
   * If an AbortSignal is passed for options's signal, then the event listener
   * will be removed when signal is aborted.
   *
   * The event listener is appended to target's event listener list and is not
   * appended if it has the same type, callback, and capture.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
   */
  addEventListener(
    type: string,
    callback: EventListenerOrEventListenerObject | null,
    options?: AddEventListenerOptions | boolean,
  ): void;
  /**
   * Dispatches a synthetic event event to target and returns true if either
   * event's cancelable attribute value is false or its preventDefault()
   * method was not invoked, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
   */
  dispatchEvent(event: Event): boolean;
  /**
   * Removes the event listener in target's event listener list with the same
   * type, callback, and options.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
   */
  removeEventListener(
    type: string,
    callback: EventListenerOrEventListenerObject | null,
    options?: EventListenerOptions | boolean,
  ): void;
}

declare var EventTarget: {
  readonly prototype: EventTarget;
  new (): EventTarget;
};

/**
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/External)
 */
interface External {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/External/AddSearchProvider)
   */
  AddSearchProvider(): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/External/IsSearchProviderInstalled)
   */
  IsSearchProviderInstalled(): void;
}

/** @deprecated */
declare var External: {
  readonly prototype: External;
  new (): External;
};

/**
 * Provides information about files and allows JavaScript in a web page to
 * access their content.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
 */
interface File extends Blob {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)
   */
  readonly lastModified: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)
   */
  readonly webkitRelativePath: string;
}

declare var File: {
  readonly prototype: File;
  new (
    fileBits: readonly BlobPart[],
    fileName: string,
    options?: FilePropertyBag,
  ): File;
};

/**
 * An object of this type is returned by the files property of the HTML <input>
 * element; this lets you access the list of files selected with the <input
 * type="file"> element. It's also used for a list of files dropped into web
 * content when using the drag and drop API; see the DataTransfer object for
 * details on this usage.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
 */
interface FileList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)
   */
  readonly length: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/item) */
  item(index: number): File | null;
  readonly [index: number]: File;
}

declare var FileList: {
  readonly prototype: FileList;
  new (): FileList;
};

interface FileReaderEventMap {
  readonly abort: ProgressEvent<FileReader>;
  readonly error: ProgressEvent<FileReader>;
  readonly load: ProgressEvent<FileReader>;
  readonly loadend: ProgressEvent<FileReader>;
  readonly loadstart: ProgressEvent<FileReader>;
  readonly progress: ProgressEvent<FileReader>;
}

/**
 * Lets web applications asynchronously read the contents of files (or raw data
 * buffers) stored on the user's computer, using File or Blob objects to specify
 * the file or data to read.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
 */
interface FileReader extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)
   */
  readonly error: DOMException | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)
   */
  readonly onabort:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)
   */
  readonly onerror:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)
   */
  readonly onload:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)
   */
  readonly onloadend:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)
   */
  readonly onloadstart:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)
   */
  readonly onprogress:
    | ((this: FileReader, ev: ProgressEvent<FileReader>) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)
   */
  readonly readyState:
    | typeof FileReader.EMPTY
    | typeof FileReader.LOADING
    | typeof FileReader.DONE;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)
   */
  readonly result: string | ArrayBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort)
   */
  abort(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer)
   */
  readAsArrayBuffer(blob: Blob): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsBinaryString)
   */
  readAsBinaryString(blob: Blob): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL)
   */
  readAsDataURL(blob: Blob): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText)
   */
  readAsText(blob: Blob, encoding?: string): void;
  readonly EMPTY: 0;
  readonly LOADING: 1;
  readonly DONE: 2;
  addEventListener<K extends keyof FileReaderEventMap>(
    type: K,
    listener: (this: FileReader, ev: FileReaderEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof FileReaderEventMap>(
    type: K,
    listener: (this: FileReader, ev: FileReaderEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var FileReader: {
  readonly prototype: FileReader;
  new (): FileReader;
  readonly EMPTY: 0;
  readonly LOADING: 1;
  readonly DONE: 2;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem) */
interface FileSystem {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/root)
   */
  readonly root: FileSystemDirectoryEntry;
}

declare var FileSystem: {
  readonly prototype: FileSystem;
  new (): FileSystem;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry)
 */
interface FileSystemDirectoryEntry extends FileSystemEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/createReader)
   */
  createReader(): FileSystemDirectoryReader;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getDirectory)
   */
  getDirectory(
    path?: string | null,
    options?: FileSystemFlags,
    successCallback?: FileSystemEntryCallback,
    errorCallback?: ErrorCallback,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getFile)
   */
  getFile(
    path?: string | null,
    options?: FileSystemFlags,
    successCallback?: FileSystemEntryCallback,
    errorCallback?: ErrorCallback,
  ): void;
}

declare var FileSystemDirectoryEntry: {
  readonly prototype: FileSystemDirectoryEntry;
  new (): FileSystemDirectoryEntry;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
 */
interface FileSystemDirectoryHandle extends FileSystemHandle {
  readonly kind: 'directory';
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle)
   */
  getDirectoryHandle(
    name: string,
    options?: FileSystemGetDirectoryOptions,
  ): Promise<FileSystemDirectoryHandle>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getFileHandle)
   */
  getFileHandle(
    name: string,
    options?: FileSystemGetFileOptions,
  ): Promise<FileSystemFileHandle>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/removeEntry)
   */
  removeEntry(name: string, options?: FileSystemRemoveOptions): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/resolve)
   */
  resolve(
    possibleDescendant: FileSystemHandle,
  ): Promise<readonly string[] | null>;
}

declare var FileSystemDirectoryHandle: {
  readonly prototype: FileSystemDirectoryHandle;
  new (): FileSystemDirectoryHandle;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader)
 */
interface FileSystemDirectoryReader {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader/readEntries)
   */
  readEntries(
    successCallback: FileSystemEntriesCallback,
    errorCallback?: ErrorCallback,
  ): void;
}

declare var FileSystemDirectoryReader: {
  readonly prototype: FileSystemDirectoryReader;
  new (): FileSystemDirectoryReader;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry) */
interface FileSystemEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem)
   */
  readonly filesystem: FileSystem;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath)
   */
  readonly fullPath: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory)
   */
  readonly isDirectory: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile)
   */
  readonly isFile: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/getParent)
   */
  getParent(
    successCallback?: FileSystemEntryCallback,
    errorCallback?: ErrorCallback,
  ): void;
}

declare var FileSystemEntry: {
  readonly prototype: FileSystemEntry;
  new (): FileSystemEntry;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry)
 */
interface FileSystemFileEntry extends FileSystemEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry/file)
   */
  file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;
}

declare var FileSystemFileEntry: {
  readonly prototype: FileSystemFileEntry;
  new (): FileSystemFileEntry;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
 */
interface FileSystemFileHandle extends FileSystemHandle {
  readonly kind: 'file';
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createWritable)
   */
  createWritable(
    options?: FileSystemCreateWritableOptions,
  ): Promise<FileSystemWritableFileStream>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/getFile)
   */
  getFile(): Promise<File>;
}

declare var FileSystemFileHandle: {
  readonly prototype: FileSystemFileHandle;
  new (): FileSystemFileHandle;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
 */
interface FileSystemHandle {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
   */
  readonly kind: FileSystemHandleKind;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/isSameEntry)
   */
  isSameEntry(other: FileSystemHandle): Promise<boolean>;
}

declare var FileSystemHandle: {
  readonly prototype: FileSystemHandle;
  new (): FileSystemHandle;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
 */
interface FileSystemWritableFileStream extends WritableStream {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/seek)
   */
  seek(position: number): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/truncate)
   */
  truncate(size: number): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/write)
   */
  write(data: FileSystemWriteChunkType): Promise<void>;
}

declare var FileSystemWritableFileStream: {
  readonly prototype: FileSystemWritableFileStream;
  new (): FileSystemWritableFileStream;
};

/**
 * Focus-related events like focus, blur, focusin, or focusout.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent)
 */
interface FocusEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget)
   */
  readonly relatedTarget: EventTarget | null;
}

declare var FocusEvent: {
  readonly prototype: FocusEvent;
  new (type: string, eventInitDict?: FocusEventInit): FocusEvent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace) */
interface FontFace {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)
   */
  readonly ascentOverride: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)
   */
  readonly descentOverride: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)
   */
  readonly display: FontDisplay;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)
   */
  readonly family: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)
   */
  readonly featureSettings: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)
   */
  readonly lineGapOverride: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)
   */
  readonly loaded: Promise<FontFace>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)
   */
  readonly status: FontFaceLoadStatus;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)
   */
  readonly stretch: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)
   */
  readonly style: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)
   */
  readonly unicodeRange: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)
   */
  readonly weight: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/load) */
  load(): Promise<FontFace>;
}

declare var FontFace: {
  readonly prototype: FontFace;
  new (
    family: string,
    source: string | BinaryData,
    descriptors?: FontFaceDescriptors,
  ): FontFace;
};

interface FontFaceSetEventMap {
  readonly loading: Event;
  readonly loadingdone: Event;
  readonly loadingerror: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet) */
interface FontFaceSet extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)
   */
  readonly onloading: ((this: FontFaceSet, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)
   */
  readonly onloadingdone: ((this: FontFaceSet, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)
   */
  readonly onloadingerror: ((this: FontFaceSet, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)
   */
  readonly ready: Promise<FontFaceSet>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)
   */
  readonly status: FontFaceSetLoadStatus;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check)
   */
  check(font: string, text?: string): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load)
   */
  load(font: string, text?: string): Promise<readonly FontFace[]>;
  forEach(
    callbackfn: (value: FontFace, key: FontFace, parent: FontFaceSet) => void,
    thisArg?: unknown,
  ): void;
  addEventListener<K extends keyof FontFaceSetEventMap>(
    type: K,
    listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof FontFaceSetEventMap>(
    type: K,
    listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var FontFaceSet: {
  readonly prototype: FontFaceSet;
  new (initialFaces: readonly FontFace[]): FontFaceSet;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)
 */
interface FontFaceSetLoadEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)
   */
  readonly fontfaces: ReadonlyArray<FontFace>;
}

declare var FontFaceSetLoadEvent: {
  readonly prototype: FontFaceSetLoadEvent;
  new (
    type: string,
    eventInitDict?: FontFaceSetLoadEventInit,
  ): FontFaceSetLoadEvent;
};

interface FontFaceSource {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)
   */
  readonly fonts: FontFaceSet;
}

/**
 * Provides a way to easily construct a set of key/value pairs representing form
 * fields and their values, which can then be easily sent using the
 * XMLHttpRequest.send() method. It uses the same format a form would use if the
 * encoding type were set to "multipart/form-data".
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
 */
interface FormData {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
   */
  append(name: string, value: string | Blob): void;
  append(name: string, value: string): void;
  append(name: string, blobValue: Blob, filename?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FormData/delete)
   */
  delete(name: string): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/get) */
  get(name: string): FormDataEntryValue | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FormData/getAll)
   */
  getAll(name: string): readonly FormDataEntryValue[];
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/has) */
  has(name: string): boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set) */
  set(name: string, value: string | Blob): void;
  set(name: string, value: string): void;
  set(name: string, blobValue: Blob, filename?: string): void;
  forEach(
    callbackfn: (
      value: FormDataEntryValue,
      key: string,
      parent: FormData,
    ) => void,
    thisArg?: unknown,
  ): void;
}

declare var FormData: {
  readonly prototype: FormData;
  new (form?: HTMLFormElement, submitter?: HTMLElement | null): FormData;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent) */
interface FormDataEvent extends Event {
  /**
   * Returns a FormData object representing names and values of elements
   * associated to the target form. Operations on the FormData object will
   * affect form data to be submitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)
   */
  readonly formData: FormData;
}

declare var FormDataEvent: {
  readonly prototype: FormDataEvent;
  new (type: string, eventInitDict: FormDataEventInit): FormDataEvent;
};

/**
 * A change in volume. It is an AudioNode audio-processing module that causes a
 * given gain to be applied to the input data before its propagation to the
 * output. A GainNode always has exactly one input and one output, both with the
 * same number of channels.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode)
 */
interface GainNode extends AudioNode {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode/gain) */
  readonly gain: AudioParam;
}

declare var GainNode: {
  readonly prototype: GainNode;
  new (context: BaseAudioContext, options?: GainOptions): GainNode;
};

/**
 * This Gamepad API interface defines an individual gamepad or other controller,
 * allowing access to information such as button presses, axis positions, and
 * id. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad)
 */
interface Gamepad {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/axes) */
  readonly axes: ReadonlyArray<number>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons)
   */
  readonly buttons: ReadonlyArray<GamepadButton>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/connected)
   */
  readonly connected: boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/id) */
  readonly id: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/index) */
  readonly index: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping)
   */
  readonly mapping: GamepadMappingType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp)
   */
  readonly timestamp: DOMHighResTimeStamp;
  readonly vibrationActuator: GamepadHapticActuator | null;
}

declare var Gamepad: {
  readonly prototype: Gamepad;
  new (): Gamepad;
};

/**
 * An individual button of a gamepad or other controller, allowing access to the
 * current state of different types of buttons available on the control device.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton)
 */
interface GamepadButton {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed)
   */
  readonly pressed: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched)
   */
  readonly touched: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/value)
   */
  readonly value: number;
}

declare var GamepadButton: {
  readonly prototype: GamepadButton;
  new (): GamepadButton;
};

/**
 * This Gamepad API interface contains references to gamepads connected to the
 * system, which is what the gamepad events Window.gamepadconnected and
 * Window.gamepaddisconnected are fired in response to. Available only in secure
 * contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent)
 */
interface GamepadEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad)
   */
  readonly gamepad: Gamepad;
}

declare var GamepadEvent: {
  readonly prototype: GamepadEvent;
  new (type: string, eventInitDict: GamepadEventInit): GamepadEvent;
};

/**
 * This Gamepad API interface represents hardware in the controller designed to
 * provide haptic feedback to the user (if available), most commonly vibration
 * hardware.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)
 */
interface GamepadHapticActuator {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator/type)
   */
  readonly type: GamepadHapticActuatorType;
  playEffect(
    type: GamepadHapticEffectType,
    params?: GamepadEffectParameters,
  ): Promise<GamepadHapticsResult>;
  reset(): Promise<GamepadHapticsResult>;
}

declare var GamepadHapticActuator: {
  readonly prototype: GamepadHapticActuator;
  new (): GamepadHapticActuator;
};

interface GenericTransformStream {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
   */
  readonly readable: ReadableStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
   */
  readonly writable: WritableStream;
}

/**
 * An object able to programmatically obtain the position of the device. It
 * gives Web content access to the location of the device. This allows a Web
 * site or app to offer customized results based on the user's location.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation)
 */
interface Geolocation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch)
   */
  clearWatch(watchId: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/getCurrentPosition)
   */
  getCurrentPosition(
    successCallback: PositionCallback,
    errorCallback?: PositionErrorCallback | null,
    options?: PositionOptions,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/watchPosition)
   */
  watchPosition(
    successCallback: PositionCallback,
    errorCallback?: PositionErrorCallback | null,
    options?: PositionOptions,
  ): number;
}

declare var Geolocation: {
  readonly prototype: Geolocation;
  new (): Geolocation;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)
 */
interface GeolocationCoordinates {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy)
   */
  readonly accuracy: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude)
   */
  readonly altitude: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy)
   */
  readonly altitudeAccuracy: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading)
   */
  readonly heading: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude)
   */
  readonly latitude: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude)
   */
  readonly longitude: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed)
   */
  readonly speed: number | null;
}

declare var GeolocationCoordinates: {
  readonly prototype: GeolocationCoordinates;
  new (): GeolocationCoordinates;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)
 */
interface GeolocationPosition {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords)
   */
  readonly coords: GeolocationCoordinates;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp)
   */
  readonly timestamp: EpochTimeStamp;
}

declare var GeolocationPosition: {
  readonly prototype: GeolocationPosition;
  new (): GeolocationPosition;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError)
 */
interface GeolocationPositionError {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code)
   */
  readonly code: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message)
   */
  readonly message: string;
  readonly PERMISSION_DENIED: 1;
  readonly POSITION_UNAVAILABLE: 2;
  readonly TIMEOUT: 3;
}

declare var GeolocationPositionError: {
  readonly prototype: GeolocationPositionError;
  new (): GeolocationPositionError;
  readonly PERMISSION_DENIED: 1;
  readonly POSITION_UNAVAILABLE: 2;
  readonly TIMEOUT: 3;
};

interface GlobalEventHandlersEventMap {
  readonly abort: UIEvent;
  readonly animationcancel: AnimationEvent;
  readonly animationend: AnimationEvent;
  readonly animationiteration: AnimationEvent;
  readonly animationstart: AnimationEvent;
  readonly auxclick: MouseEvent;
  readonly beforeinput: InputEvent;
  readonly beforetoggle: Event;
  readonly blur: FocusEvent;
  readonly cancel: Event;
  readonly canplay: Event;
  readonly canplaythrough: Event;
  readonly change: Event;
  readonly click: MouseEvent;
  readonly close: Event;
  readonly compositionend: CompositionEvent;
  readonly compositionstart: CompositionEvent;
  readonly compositionupdate: CompositionEvent;
  readonly contextmenu: MouseEvent;
  readonly copy: ClipboardEvent;
  readonly cuechange: Event;
  readonly cut: ClipboardEvent;
  readonly dblclick: MouseEvent;
  readonly drag: DragEvent;
  readonly dragend: DragEvent;
  readonly dragenter: DragEvent;
  readonly dragleave: DragEvent;
  readonly dragover: DragEvent;
  readonly dragstart: DragEvent;
  readonly drop: DragEvent;
  readonly durationchange: Event;
  readonly emptied: Event;
  readonly ended: Event;
  readonly error: ErrorEvent;
  readonly focus: FocusEvent;
  readonly focusin: FocusEvent;
  readonly focusout: FocusEvent;
  readonly formdata: FormDataEvent;
  readonly gotpointercapture: PointerEvent;
  readonly input: Event;
  readonly invalid: Event;
  readonly keydown: KeyboardEvent;
  readonly keypress: KeyboardEvent;
  readonly keyup: KeyboardEvent;
  readonly load: Event;
  readonly loadeddata: Event;
  readonly loadedmetadata: Event;
  readonly loadstart: Event;
  readonly lostpointercapture: PointerEvent;
  readonly mousedown: MouseEvent;
  readonly mouseenter: MouseEvent;
  readonly mouseleave: MouseEvent;
  readonly mousemove: MouseEvent;
  readonly mouseout: MouseEvent;
  readonly mouseover: MouseEvent;
  readonly mouseup: MouseEvent;
  readonly paste: ClipboardEvent;
  readonly pause: Event;
  readonly play: Event;
  readonly playing: Event;
  readonly pointercancel: PointerEvent;
  readonly pointerdown: PointerEvent;
  readonly pointerenter: PointerEvent;
  readonly pointerleave: PointerEvent;
  readonly pointermove: PointerEvent;
  readonly pointerout: PointerEvent;
  readonly pointerover: PointerEvent;
  readonly pointerup: PointerEvent;
  readonly progress: ProgressEvent;
  readonly ratechange: Event;
  readonly reset: Event;
  readonly resize: UIEvent;
  readonly scroll: Event;
  readonly scrollend: Event;
  readonly securitypolicyviolation: SecurityPolicyViolationEvent;
  readonly seeked: Event;
  readonly seeking: Event;
  readonly select: Event;
  readonly selectionchange: Event;
  readonly selectstart: Event;
  readonly slotchange: Event;
  readonly stalled: Event;
  readonly submit: SubmitEvent;
  readonly suspend: Event;
  readonly timeupdate: Event;
  readonly toggle: Event;
  readonly touchcancel: TouchEvent;
  readonly touchend: TouchEvent;
  readonly touchmove: TouchEvent;
  readonly touchstart: TouchEvent;
  readonly transitioncancel: TransitionEvent;
  readonly transitionend: TransitionEvent;
  readonly transitionrun: TransitionEvent;
  readonly transitionstart: TransitionEvent;
  readonly volumechange: Event;
  readonly waiting: Event;
  readonly webkitanimationend: Event;
  readonly webkitanimationiteration: Event;
  readonly webkitanimationstart: Event;
  readonly webkittransitionend: Event;
  readonly wheel: WheelEvent;
}

interface GlobalEventHandlers {
  /**
   * Fires when the user aborts the download.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
   */
  readonly onabort:
    | ((this: GlobalEventHandlers, ev: UIEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
   */
  readonly onanimationcancel:
    | ((this: GlobalEventHandlers, ev: AnimationEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
   */
  readonly onanimationend:
    | ((this: GlobalEventHandlers, ev: AnimationEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
   */
  readonly onanimationiteration:
    | ((this: GlobalEventHandlers, ev: AnimationEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
   */
  readonly onanimationstart:
    | ((this: GlobalEventHandlers, ev: AnimationEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
   */
  readonly onauxclick:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
   */
  readonly onbeforeinput:
    | ((this: GlobalEventHandlers, ev: InputEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
   */
  readonly onbeforetoggle:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Fires when the object loses the input focus.
   *
   * @param ev The focus event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
   */
  readonly onblur:
    | ((this: GlobalEventHandlers, ev: FocusEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
   */
  readonly oncancel: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Occurs when playback is possible, but would require further buffering.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
   */
  readonly oncanplay:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
   */
  readonly oncanplaythrough:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Fires when the contents of the object or selection have changed.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
   */
  readonly onchange: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Fires when the user clicks the left mouse button on the object
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
   */
  readonly onclick:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
   */
  readonly onclose: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Fires when the user clicks the right mouse button in the client area,
   * opening the context menu.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
   */
  readonly oncontextmenu:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
   */
  readonly oncopy:
    | ((this: GlobalEventHandlers, ev: ClipboardEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
   */
  readonly oncuechange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)
   */
  readonly oncut:
    | ((this: GlobalEventHandlers, ev: ClipboardEvent) => unknown)
    | null;
  /**
   * Fires when the user double-clicks the object.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
   */
  readonly ondblclick:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * Fires on the source object continuously during a drag operation.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
   */
  readonly ondrag:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Fires on the source object when the user releases the mouse at the close
   * of a drag operation.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
   */
  readonly ondragend:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Fires on the target element when the user drags the object to a valid
   * drop target.
   *
   * @param ev The drag event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
   */
  readonly ondragenter:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Fires on the target object when the user moves the mouse out of a valid
   * drop target during a drag operation.
   *
   * @param ev The drag event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
   */
  readonly ondragleave:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Fires on the target element continuously while the user drags the object
   * over a valid drop target.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
   */
  readonly ondragover:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Fires on the source object when the user starts to drag a text selection
   * or selected object.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
   */
  readonly ondragstart:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
   */
  readonly ondrop:
    | ((this: GlobalEventHandlers, ev: DragEvent) => unknown)
    | null;
  /**
   * Occurs when the duration attribute is updated.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
   */
  readonly ondurationchange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when the media element is reset to its initial state.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
   */
  readonly onemptied:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when the end of playback is reached.
   *
   * @param ev The event
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
   */
  readonly onended: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Fires when an error occurs during object loading.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
   */
  readonly onerror: OnErrorEventHandler;
  /**
   * Fires when the object receives focus.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
   */
  readonly onfocus:
    | ((this: GlobalEventHandlers, ev: FocusEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
   */
  readonly onformdata:
    | ((this: GlobalEventHandlers, ev: FormDataEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
   */
  readonly ongotpointercapture:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
   */
  readonly oninput: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
   */
  readonly oninvalid:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Fires when the user presses a key.
   *
   * @param ev The keyboard event
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
   */
  readonly onkeydown:
    | ((this: GlobalEventHandlers, ev: KeyboardEvent) => unknown)
    | null;
  /**
   * Fires when the user presses an alphanumeric key.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
   * @param ev The event.
   */
  readonly onkeypress:
    | ((this: GlobalEventHandlers, ev: KeyboardEvent) => unknown)
    | null;
  /**
   * Fires when the user releases a key.
   *
   * @param ev The keyboard event
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
   */
  readonly onkeyup:
    | ((this: GlobalEventHandlers, ev: KeyboardEvent) => unknown)
    | null;
  /**
   * Fires immediately after the browser loads the object.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
   */
  readonly onload: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Occurs when media data is loaded at the current playback position.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
   */
  readonly onloadeddata:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when the duration and dimensions of the media have been
   * determined.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
   */
  readonly onloadedmetadata:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when Internet Explorer begins looking for media data.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
   */
  readonly onloadstart:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event)
   */
  readonly onlostpointercapture:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * Fires when the user clicks the object with either mouse button.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
   */
  readonly onmousedown:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
   */
  readonly onmouseenter:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
   */
  readonly onmouseleave:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * Fires when the user moves the mouse over the object.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
   */
  readonly onmousemove:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * Fires when the user moves the mouse pointer outside the boundaries of the
   * object.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
   */
  readonly onmouseout:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * Fires when the user moves the mouse pointer into the object.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
   */
  readonly onmouseover:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * Fires when the user releases a mouse button while the mouse is over the
   * object.
   *
   * @param ev The mouse event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
   */
  readonly onmouseup:
    | ((this: GlobalEventHandlers, ev: MouseEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
   */
  readonly onpaste:
    | ((this: GlobalEventHandlers, ev: ClipboardEvent) => unknown)
    | null;
  /**
   * Occurs when playback is paused.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
   */
  readonly onpause: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Occurs when the play method is requested.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
   */
  readonly onplay: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Occurs when the audio or video has started playing.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
   */
  readonly onplaying:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
   */
  readonly onpointercancel:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
   */
  readonly onpointerdown:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
   */
  readonly onpointerenter:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
   */
  readonly onpointerleave:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
   */
  readonly onpointermove:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
   */
  readonly onpointerout:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
   */
  readonly onpointerover:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
   */
  readonly onpointerup:
    | ((this: GlobalEventHandlers, ev: PointerEvent) => unknown)
    | null;
  /**
   * Occurs to indicate progress while downloading media data.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
   */
  readonly onprogress:
    | ((this: GlobalEventHandlers, ev: ProgressEvent) => unknown)
    | null;
  /**
   * Occurs when the playback rate is increased or decreased.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
   */
  readonly onratechange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Fires when the user resets a form.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
   */
  readonly onreset: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
   */
  readonly onresize:
    | ((this: GlobalEventHandlers, ev: UIEvent) => unknown)
    | null;
  /**
   * Fires when the user repositions the scroll box in the scroll bar on the
   * object.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
   */
  readonly onscroll: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
   */
  readonly onscrollend:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
   */
  readonly onsecuritypolicyviolation:
    | ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => unknown)
    | null;
  /**
   * Occurs when the seek operation ends.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
   */
  readonly onseeked: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * Occurs when the current playback position is moved.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
   */
  readonly onseeking:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Fires when the current selection changes.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
   */
  readonly onselect: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
   */
  readonly onselectionchange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
   */
  readonly onselectstart:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
   */
  readonly onslotchange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when the download has stopped.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
   */
  readonly onstalled:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
   */
  readonly onsubmit:
    | ((this: GlobalEventHandlers, ev: SubmitEvent) => unknown)
    | null;
  /**
   * Occurs if the load operation has been intentionally halted.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
   */
  readonly onsuspend:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs to indicate the current playback position.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
   */
  readonly ontimeupdate:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event)
   */
  readonly ontoggle: ((this: GlobalEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
   */
  readonly ontouchcancel?:
    | ((this: GlobalEventHandlers, ev: TouchEvent) => unknown)
    | null
    | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
   */
  readonly ontouchend?:
    | ((this: GlobalEventHandlers, ev: TouchEvent) => unknown)
    | null
    | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
   */
  readonly ontouchmove?:
    | ((this: GlobalEventHandlers, ev: TouchEvent) => unknown)
    | null
    | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
   */
  readonly ontouchstart?:
    | ((this: GlobalEventHandlers, ev: TouchEvent) => unknown)
    | null
    | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
   */
  readonly ontransitioncancel:
    | ((this: GlobalEventHandlers, ev: TransitionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
   */
  readonly ontransitionend:
    | ((this: GlobalEventHandlers, ev: TransitionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
   */
  readonly ontransitionrun:
    | ((this: GlobalEventHandlers, ev: TransitionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
   */
  readonly ontransitionstart:
    | ((this: GlobalEventHandlers, ev: TransitionEvent) => unknown)
    | null;
  /**
   * Occurs when the volume is changed, or playback is muted or unmuted.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
   */
  readonly onvolumechange:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * Occurs when playback stops because the next frame of a video resource is
   * not available.
   *
   * @param ev The event.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
   */
  readonly onwaiting:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * @deprecated This is a legacy alias of `onanimationend`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
   */
  readonly onwebkitanimationend:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * @deprecated This is a legacy alias of `onanimationiteration`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
   */
  readonly onwebkitanimationiteration:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * @deprecated This is a legacy alias of `onanimationstart`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
   */
  readonly onwebkitanimationstart:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * @deprecated This is a legacy alias of `ontransitionend`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
   */
  readonly onwebkittransitionend:
    | ((this: GlobalEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
   */
  readonly onwheel:
    | ((this: GlobalEventHandlers, ev: WheelEvent) => unknown)
    | null;
  addEventListener<K extends keyof GlobalEventHandlersEventMap>(
    type: K,
    listener: (
      this: GlobalEventHandlers,
      ev: GlobalEventHandlersEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof GlobalEventHandlersEventMap>(
    type: K,
    listener: (
      this: GlobalEventHandlers,
      ev: GlobalEventHandlersEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection) */
interface HTMLAllCollection {
  /**
   * Returns the number of elements in the collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)
   */
  readonly length: number;
  /**
   * Returns the item with index index from the collection (determined by tree
   * order).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/item)
   */
  item(nameOrIndex?: string): HTMLCollection | Element | null;
  /**
   * Returns the item with ID or name name from the collection.
   *
   * If there are multiple matching items, then an HTMLCollection object
   * containing all those elements is returned.
   *
   * Only button, form, iframe, input, map, meta, object, select, and textarea
   * elements can have a name for the purpose of this method; their name is
   * given by the value of their name attribute.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/namedItem)
   */
  namedItem(name: string): HTMLCollection | Element | null;
  readonly [index: number]: Element;
}

declare var HTMLAllCollection: {
  readonly prototype: HTMLAllCollection;
  new (): HTMLAllCollection;
};

/**
 * Hyperlink elements and provides special properties and methods (beyond those
 * of the regular HTMLElement object interface that they inherit from) for
 * manipulating the layout and presentation of such elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)
 */
interface HTMLAnchorElement extends HTMLElement, HTMLHyperlinkElementUtils {
  /**
   * Sets or retrieves the character set used to encode the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/charset)
   */
  readonly charset: string;
  /**
   * Sets or retrieves the coordinates of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/coords)
   */
  readonly coords: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download)
   */
  readonly download: string;
  /**
   * Sets or retrieves the language code of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
   */
  readonly hreflang: string;
  /**
   * Sets or retrieves the shape of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/name)
   */
  readonly name: string;
  readonly ping: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy)
   */
  readonly referrerPolicy: string;
  /**
   * Sets or retrieves the relationship between the object and the destination
   * of the link.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
   */
  readonly rel: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/relList)
   */
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the relationship between the object and the destination
   * of the link.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rev)
   */
  readonly rev: string;
  /**
   * Sets or retrieves the shape of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/shape)
   */
  readonly shape: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
   */
  readonly target: string;
  /**
   * Retrieves or sets the text of the object as a string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)
   */
  readonly text: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type)
   */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLAnchorElement: {
  readonly prototype: HTMLAnchorElement;
  new (): HTMLAnchorElement;
};

/**
 * Provides special properties and methods (beyond those of the regular object
 * HTMLElement interface it also has available to it by inheritance) for
 * manipulating the layout and presentation of <area> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)
 */
interface HTMLAreaElement extends HTMLElement, HTMLHyperlinkElementUtils {
  /**
   * Sets or retrieves a text alternative to the graphic.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
   */
  readonly alt: string;
  /**
   * Sets or retrieves the coordinates of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
   */
  readonly coords: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download)
   */
  readonly download: string;
  /**
   * Sets or gets whether clicks in this region cause action.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/noHref)
   */
  readonly noHref: boolean;
  readonly ping: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy)
   */
  readonly referrerPolicy: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel)
   */
  readonly rel: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/relList)
   */
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the shape of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
   */
  readonly shape: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
   */
  readonly target: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLAreaElement: {
  readonly prototype: HTMLAreaElement;
  new (): HTMLAreaElement;
};

/**
 * Provides access to the properties of <audio> elements, as well as methods to
 * manipulate them. It derives from the HTMLMediaElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)
 */
interface HTMLAudioElement extends HTMLMediaElement {
  addEventListener<K extends keyof HTMLMediaElementEventMap>(
    type: K,
    listener: (
      this: HTMLAudioElement,
      ev: HTMLMediaElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLMediaElementEventMap>(
    type: K,
    listener: (
      this: HTMLAudioElement,
      ev: HTMLMediaElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLAudioElement: {
  readonly prototype: HTMLAudioElement;
  new (): HTMLAudioElement;
};

/**
 * A HTML line break element (<br>). It inherits from HTMLElement.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)
 */
interface HTMLBRElement extends HTMLElement {
  /**
   * Sets or retrieves the side on which floating objects are not to be
   * positioned when any IHTMLBlockElement is inserted into the document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement/clear)
   */
  readonly clear: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLBRElement: {
  readonly prototype: HTMLBRElement;
  new (): HTMLBRElement;
};

/**
 * Contains the base URI for a document. This object inherits all of the
 * properties and methods as described in the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)
 */
interface HTMLBaseElement extends HTMLElement {
  /**
   * Gets or sets the baseline URL on which relative links are based.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
   */
  readonly href: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
   */
  readonly target: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLBaseElement: {
  readonly prototype: HTMLBaseElement;
  new (): HTMLBaseElement;
};

interface HTMLBodyElementEventMap
  extends HTMLElementEventMap,
    WindowEventHandlersEventMap {}

/**
 * Provides special properties (beyond those inherited from the regular
 * HTMLElement interface) for manipulating <body> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)
 */
interface HTMLBodyElement extends HTMLElement, WindowEventHandlers {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/aLink)
   */
  readonly aLink: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/background)
   */
  readonly background: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/bgColor)
   */
  readonly bgColor: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/link)
   */
  readonly link: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/text)
   */
  readonly text: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/vLink)
   */
  readonly vLink: string;
  addEventListener<K extends keyof HTMLBodyElementEventMap>(
    type: K,
    listener: (
      this: HTMLBodyElement,
      ev: HTMLBodyElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLBodyElementEventMap>(
    type: K,
    listener: (
      this: HTMLBodyElement,
      ev: HTMLBodyElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLBodyElement: {
  readonly prototype: HTMLBodyElement;
  new (): HTMLBodyElement;
};

/**
 * Provides properties and methods (beyond the regular HTMLElement interface it
 * also has available to it by inheritance) for manipulating <button> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)
 */
interface HTMLButtonElement extends HTMLElement, PopoverInvokerElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the
   * parent form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
   */
  readonly formAction: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the
   * form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
   */
  readonly formEnctype: string;
  /**
   * Overrides the submit method attribute previously specified on a form
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
   */
  readonly formMethod: string;
  /**
   * Overrides any validation or required attributes on a form or form
   * elements to allow it to be submitted without validation. This can be used
   * to create a "save draft"-type submit option.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
   */
  readonly formNoValidate: boolean;
  /**
   * Overrides the target attribute on a form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
   */
  readonly formTarget: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the name of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
   */
  readonly name: string;
  /**
   * Gets the classification and default behavior of the button.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
   */
  readonly type: 'submit' | 'reset' | 'button';
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)
   */
  readonly validity: ValidityState;
  /**
   * Sets or retrieves the default or selected value of the control.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
   */
  readonly value: string;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLButtonElement: {
  readonly prototype: HTMLButtonElement;
  new (): HTMLButtonElement;
};

/**
 * Provides properties and methods for manipulating the layout and presentation
 * of <canvas> elements. The HTMLCanvasElement interface also inherits the
 * properties and methods of the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
 */
interface HTMLCanvasElement extends HTMLElement {
  /**
   * Gets or sets the height of a canvas element on a document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
   */
  readonly height: number;
  /**
   * Gets or sets the width of a canvas element on a document.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
   */
  readonly width: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/captureStream)
   */
  captureStream(frameRequestRate?: number): MediaStream;
  /**
   * Returns an object that provides methods and properties for drawing and
   * manipulating images and graphics on a canvas element in a document. A
   * context object includes information about colors, line widths, fonts, and
   * other graphic parameters that can be drawn on a canvas.
   *
   * @param contextId The identifier (ID) of the type of canvas to create.
   *   Internet Explorer 9 and Internet Explorer 10 support only a 2-D context
   *   using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL
   *   context using canvas.getContext("experimental-webgl");
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/getContext)
   */
  getContext(
    contextId: '2d',
    options?: CanvasRenderingContext2DSettings,
  ): CanvasRenderingContext2D | null;
  getContext(
    contextId: 'bitmaprenderer',
    options?: ImageBitmapRenderingContextSettings,
  ): ImageBitmapRenderingContext | null;
  getContext(
    contextId: 'webgl',
    options?: WebGLContextAttributes,
  ): WebGLRenderingContext | null;
  getContext(
    contextId: 'webgl2',
    options?: WebGLContextAttributes,
  ): WebGL2RenderingContext | null;
  getContext(contextId: string, options?: unknown): RenderingContext | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob)
   */
  toBlob(callback: BlobCallback, type?: string, quality?: unknown): void;
  /**
   * Returns the content of the current canvas as an image that you can use as
   * a source for another canvas or an HTML element.
   *
   * @param type The standard MIME type for the image format to return. If you
   *   do not specify this parameter, the default value is a PNG format
   *   image.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toDataURL)
   */
  toDataURL(type?: string, quality?: unknown): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen)
   */
  transferControlToOffscreen(): OffscreenCanvas;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLCanvasElement: {
  readonly prototype: HTMLCanvasElement;
  new (): HTMLCanvasElement;
};

/**
 * A generic collection (array-like object similar to arguments) of elements (in
 * document order) and offers methods and properties for selecting from the
 * list.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection)
 */
interface HTMLCollectionBase {
  /**
   * Sets or retrieves the number of objects in a collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)
   */
  readonly length: number;
  /**
   * Retrieves an object from various collections.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
   */
  item(index: number): Element | null;
  readonly [index: number]: Element;
}

interface HTMLCollection extends HTMLCollectionBase {
  /**
   * Retrieves a select object or an object from an options collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/namedItem)
   */
  namedItem(name: string): Element | null;
}

declare var HTMLCollection: {
  readonly prototype: HTMLCollection;
  new (): HTMLCollection;
};

interface HTMLCollectionOf<T extends Element> extends HTMLCollectionBase {
  item(index: number): T | null;
  namedItem(name: string): T | null;
  readonly [index: number]: T;
}

/**
 * Provides special properties (beyond those of the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating
 * definition list (<dl>) elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)
 */
interface HTMLDListElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement/compact)
   */
  readonly compact: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDListElement: {
  readonly prototype: HTMLDListElement;
  new (): HTMLDListElement;
};

/**
 * Provides special properties (beyond the regular HTMLElement interface it also
 * has available to it by inheritance) for manipulating <data> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)
 */
interface HTMLDataElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value)
   */
  readonly value: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDataElement: {
  readonly prototype: HTMLDataElement;
  new (): HTMLDataElement;
};

/**
 * Provides special properties (beyond the HTMLElement object interface it also
 * has available to it by inheritance) to manipulate <datalist> elements and
 * their content.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)
 */
interface HTMLDataListElement extends HTMLElement {
  /**
   * Returns an HTMLCollection of the option elements of the datalist element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)
   */
  readonly options: HTMLCollectionOf<HTMLOptionElement>;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLDataListElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLDataListElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDataListElement: {
  readonly prototype: HTMLDataListElement;
  new (): HTMLDataListElement;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement)
 */
interface HTMLDetailsElement extends HTMLElement {
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open)
   */
  readonly open: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDetailsElement: {
  readonly prototype: HTMLDetailsElement;
  new (): HTMLDetailsElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement) */
interface HTMLDialogElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open)
   */
  readonly open: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue)
   */
  readonly returnValue: string;
  /**
   * Closes the dialog element.
   *
   * The argument, if provided, provides a return value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close)
   */
  close(returnValue?: string): void;
  /**
   * Displays the dialog element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/show)
   */
  show(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/showModal)
   */
  showModal(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDialogElement: {
  readonly prototype: HTMLDialogElement;
  new (): HTMLDialogElement;
};

/** @deprecated */
interface HTMLDirectoryElement extends HTMLElement {
  /** @deprecated */
  readonly compact: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLDirectoryElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLDirectoryElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLDirectoryElement: {
  readonly prototype: HTMLDirectoryElement;
  new (): HTMLDirectoryElement;
};

/**
 * Provides special properties (beyond the regular HTMLElement interface it also
 * has available to it by inheritance) for manipulating <div> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)
 */
interface HTMLDivElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement/align)
   */
  readonly align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLDivElement: {
  readonly prototype: HTMLDivElement;
  new (): HTMLDivElement;
};

/** @deprecated Use Document */
interface HTMLDocument extends Document {
  addEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLDocument: {
  readonly prototype: HTMLDocument;
  new (): HTMLDocument;
};

interface HTMLElementEventMap
  extends ElementEventMap,
    GlobalEventHandlersEventMap {}

/**
 * Any HTML element. Some elements directly implement this interface, while
 * others implement it via an interface that inherits it.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)
 */
interface HTMLElement
  extends Element,
    ElementCSSInlineStyle,
    ElementContentEditable,
    GlobalEventHandlers,
    HTMLOrSVGElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)
   */
  readonly accessKey: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)
   */
  readonly accessKeyLabel: string;
  readonly autocapitalize: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)
   */
  readonly dir: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)
   */
  readonly draggable: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)
   */
  readonly hidden: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)
   */
  readonly inert: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)
   */
  readonly innerText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)
   */
  readonly lang: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)
   */
  readonly offsetHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)
   */
  readonly offsetLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)
   */
  readonly offsetParent: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)
   */
  readonly offsetTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)
   */
  readonly offsetWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)
   */
  readonly outerText: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)
   */
  readonly popover: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)
   */
  readonly spellcheck: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)
   */
  readonly title: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate)
   */
  readonly translate: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attachInternals)
   */
  attachInternals(): ElementInternals;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/click)
   */
  click(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidePopover)
   */
  hidePopover(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/showPopover)
   */
  showPopover(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/togglePopover)
   */
  togglePopover(force?: boolean): boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLElement: {
  readonly prototype: HTMLElement;
  new (): HTMLElement;
};

/**
 * Provides special properties (beyond the regular HTMLElement interface it also
 * has available to it by inheritance) for manipulating <embed> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)
 */
interface HTMLEmbedElement extends HTMLElement {
  /** @deprecated */
  readonly align: string;
  /** Sets or retrieves the height of the object. */
  readonly height: string;
  /**
   * Sets or retrieves the name of the object.
   *
   * @deprecated
   */
  readonly name: string;
  /** Sets or retrieves a URL to be loaded by the object. */
  readonly src: string;
  readonly type: string;
  /** Sets or retrieves the width of the object. */
  readonly width: string;
  getSVGDocument(): Document | null;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLEmbedElement: {
  readonly prototype: HTMLEmbedElement;
  new (): HTMLEmbedElement;
};

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating the
 * layout and presentation of <fieldset> elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)
 */
interface HTMLFieldSetElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Returns an HTMLCollection of the form controls in the element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)
   */
  readonly elements: HTMLCollection;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name)
   */
  readonly name: string;
  /**
   * Returns the string "fieldset".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)
   */
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)
   */
  readonly validity: ValidityState;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLFieldSetElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLFieldSetElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLFieldSetElement: {
  readonly prototype: HTMLFieldSetElement;
  new (): HTMLFieldSetElement;
};

/**
 * Implements the document object model (DOM) representation of the font
 * element. The HTML Font Element <font> defines the font size, font face and
 * color of text.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement)
 */
interface HTMLFontElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color)
   */
  readonly color: string;
  /**
   * Sets or retrieves the current typeface family.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)
   */
  readonly face: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size)
   */
  readonly size: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLFontElement: {
  readonly prototype: HTMLFontElement;
  new (): HTMLFontElement;
};

/**
 * A collection of HTML form control elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)
 */
interface HTMLFormControlsCollection extends HTMLCollectionBase {
  /**
   * Returns the item with ID or name name from the collection.
   *
   * If there are multiple matching items, then a RadioNodeList object
   * containing all those elements is returned.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection/namedItem)
   */
  namedItem(name: string): RadioNodeList | Element | null;
}

declare var HTMLFormControlsCollection: {
  readonly prototype: HTMLFormControlsCollection;
  new (): HTMLFormControlsCollection;
};

/**
 * A <form> element in the DOM; it allows access to and in some cases
 * modification of aspects of the form, as well as access to its component
 * elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)
 */
interface HTMLFormElement extends HTMLElement {
  /**
   * Sets or retrieves a list of character encodings for input data that must
   * be accepted by the server processing the form.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
   */
  readonly acceptCharset: string;
  /**
   * Sets or retrieves the URL to which the form content is sent for
   * processing.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
   */
  readonly action: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
   */
  readonly autocomplete: AutoFillBase;
  /**
   * Retrieves a collection, in source order, of all controls in a given form.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)
   */
  readonly elements: HTMLFormControlsCollection;
  /**
   * Sets or retrieves the MIME encoding for the form.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
   */
  readonly encoding: string;
  /**
   * Sets or retrieves the encoding type for the form.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
   */
  readonly enctype: string;
  /**
   * Sets or retrieves the number of objects in a collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)
   */
  readonly length: number;
  /**
   * Sets or retrieves how to send the form data to the server.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
   */
  readonly method: string;
  /**
   * Sets or retrieves the name of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
   */
  readonly name: string;
  /**
   * Designates a form that is not validated when submitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
   */
  readonly noValidate: boolean;
  readonly rel: string;
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the window or frame at which to target content.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
   */
  readonly target: string;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/requestSubmit)
   */
  requestSubmit(submitter?: HTMLElement | null): void;
  /**
   * Fires when the user resets a form.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset)
   */
  reset(): void;
  /**
   * Fires when a FORM is about to be submitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit)
   */
  submit(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
  readonly [index: number]: Element;
  readonly [name: string]: unknown;
}

declare var HTMLFormElement: {
  readonly prototype: HTMLFormElement;
  new (): HTMLFormElement;
};

/**
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement)
 */
interface HTMLFrameElement extends HTMLElement {
  /**
   * Retrieves the document object of the page or frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/contentDocument)
   */
  readonly contentDocument: Document | null;
  /**
   * Retrieves the object of the specified.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/contentWindow)
   */
  readonly contentWindow: WindowProxy | null;
  /**
   * Sets or retrieves whether to display a border for the frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/frameBorder)
   */
  readonly frameBorder: string;
  /**
   * Sets or retrieves a URI to a long description of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/longDesc)
   */
  readonly longDesc: string;
  /**
   * Sets or retrieves the top and bottom margin heights before displaying the
   * text in a frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginHeight)
   */
  readonly marginHeight: string;
  /**
   * Sets or retrieves the left and right margin widths before displaying the
   * text in a frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginWidth)
   */
  readonly marginWidth: string;
  /**
   * Sets or retrieves the frame name.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/name)
   */
  readonly name: string;
  /**
   * Sets or retrieves whether the user can resize the frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/noResize)
   */
  readonly noResize: boolean;
  /**
   * Sets or retrieves whether the frame can be scrolled.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/scrolling)
   */
  readonly scrolling: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/src)
   */
  readonly src: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLFrameElement: {
  readonly prototype: HTMLFrameElement;
  new (): HTMLFrameElement;
};

interface HTMLFrameSetElementEventMap
  extends HTMLElementEventMap,
    WindowEventHandlersEventMap {}

/**
 * Provides special properties (beyond those of the regular HTMLElement
 * interface they also inherit) for manipulating <frameset> elements.
 *
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameSetElement)
 */
interface HTMLFrameSetElement extends HTMLElement, WindowEventHandlers {
  /**
   * Sets or retrieves the frame widths of the object.
   *
   * @deprecated
   */
  readonly cols: string;
  /**
   * Sets or retrieves the frame heights of the object.
   *
   * @deprecated
   */
  readonly rows: string;
  addEventListener<K extends keyof HTMLFrameSetElementEventMap>(
    type: K,
    listener: (
      this: HTMLFrameSetElement,
      ev: HTMLFrameSetElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLFrameSetElementEventMap>(
    type: K,
    listener: (
      this: HTMLFrameSetElement,
      ev: HTMLFrameSetElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLFrameSetElement: {
  readonly prototype: HTMLFrameSetElement;
  new (): HTMLFrameSetElement;
};

/**
 * Provides special properties (beyond those of the HTMLElement interface it
 * also has available to it by inheritance) for manipulating <hr> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)
 */
interface HTMLHRElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   */
  readonly align: string;
  /** @deprecated */
  readonly color: string;
  /**
   * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
   *
   * @deprecated
   */
  readonly noShade: boolean;
  /** @deprecated */
  readonly size: string;
  /**
   * Sets or retrieves the width of the object.
   *
   * @deprecated
   */
  readonly width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLHRElement: {
  readonly prototype: HTMLHRElement;
  new (): HTMLHRElement;
};

/**
 * Contains the descriptive information, or metadata, for a document. This
 * object inherits all of the properties and methods described in the
 * HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)
 */
interface HTMLHeadElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLHeadElement: {
  readonly prototype: HTMLHeadElement;
  new (): HTMLHeadElement;
};

/**
 * The different heading elements. It inherits methods and properties from the
 * HTMLElement interface.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)
 */
interface HTMLHeadingElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement/align)
   */
  readonly align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLHeadingElement: {
  readonly prototype: HTMLHeadingElement;
  new (): HTMLHeadingElement;
};

/**
 * Serves as the root node for a given HTML document. This object inherits the
 * properties and methods described in the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)
 */
interface HTMLHtmlElement extends HTMLElement {
  /**
   * Sets or retrieves the DTD version that governs the current document.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)
   */
  readonly version: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLHtmlElement: {
  readonly prototype: HTMLHtmlElement;
  new (): HTMLHtmlElement;
};

interface HTMLHyperlinkElementUtils {
  /**
   * Returns the hyperlink's URL's fragment (includes leading "#" if
   * non-empty).
   *
   * Can be set, to change the URL's fragment (ignores leading "#").
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)
   */
  readonly hash: string;
  /**
   * Returns the hyperlink's URL's host and port (if different from the
   * default port for the scheme).
   *
   * Can be set, to change the URL's host and port.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)
   */
  readonly host: string;
  /**
   * Returns the hyperlink's URL's host.
   *
   * Can be set, to change the URL's host.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)
   */
  readonly hostname: string;
  /**
   * Returns the hyperlink's URL.
   *
   * Can be set, to change the URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
   */
  readonly href: string;
  toString(): string;
  /**
   * Returns the hyperlink's URL's origin.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)
   */
  readonly origin: string;
  /**
   * Returns the hyperlink's URL's password.
   *
   * Can be set, to change the URL's password.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)
   */
  readonly password: string;
  /**
   * Returns the hyperlink's URL's path.
   *
   * Can be set, to change the URL's path.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)
   */
  readonly pathname: string;
  /**
   * Returns the hyperlink's URL's port.
   *
   * Can be set, to change the URL's port.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)
   */
  readonly port: string;
  /**
   * Returns the hyperlink's URL's scheme.
   *
   * Can be set, to change the URL's scheme.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)
   */
  readonly protocol: string;
  /**
   * Returns the hyperlink's URL's query (includes leading "?" if non-empty).
   *
   * Can be set, to change the URL's query (ignores leading "?").
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)
   */
  readonly search: string;
  /**
   * Returns the hyperlink's URL's username.
   *
   * Can be set, to change the URL's username.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)
   */
  readonly username: string;
}

/**
 * Provides special properties and methods (beyond those of the HTMLElement
 * interface it also has available to it by inheritance) for manipulating the
 * layout and presentation of inline frame elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)
 */
interface HTMLIFrameElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/align)
   */
  readonly align: string;
  readonly allow: string;
  readonly allowFullscreen: boolean;
  /**
   * Retrieves the document object of the page or frame.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)
   */
  readonly contentDocument: Document | null;
  /**
   * Retrieves the object of the specified.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)
   */
  readonly contentWindow: WindowProxy | null;
  /**
   * Sets or retrieves whether to display a border for the frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/frameBorder)
   */
  readonly frameBorder: string;
  /**
   * Sets or retrieves the height of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
   */
  readonly height: string;
  readonly loading: string;
  /**
   * Sets or retrieves a URI to a long description of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/longDesc)
   */
  readonly longDesc: string;
  /**
   * Sets or retrieves the top and bottom margin heights before displaying the
   * text in a frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginHeight)
   */
  readonly marginHeight: string;
  /**
   * Sets or retrieves the left and right margin widths before displaying the
   * text in a frame.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginWidth)
   */
  readonly marginWidth: string;
  /**
   * Sets or retrieves the frame name.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy)
   */
  readonly referrerPolicy: ReferrerPolicy;
  readonly sandbox: DOMTokenList;
  /**
   * Sets or retrieves whether the frame can be scrolled.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/scrolling)
   */
  readonly scrolling: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
   */
  readonly src: string;
  /**
   * Sets or retrives the content of the page that is to contain.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
   */
  readonly srcdoc: string;
  /**
   * Sets or retrieves the width of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
   */
  readonly width: string;
  getSVGDocument(): Document | null;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLIFrameElement: {
  readonly prototype: HTMLIFrameElement;
  new (): HTMLIFrameElement;
};

/**
 * Provides special properties and methods for manipulating <img> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
 */
interface HTMLImageElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)
   */
  readonly align: string;
  /**
   * Sets or retrieves a text alternative to the graphic.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
   */
  readonly alt: string;
  /**
   * Specifies the properties of a border drawn around an object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)
   */
  readonly border: string;
  /**
   * Retrieves whether the object is fully loaded.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)
   */
  readonly complete: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin)
   */
  readonly crossOrigin: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc)
   */
  readonly currentSrc: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding)
   */
  readonly decoding: 'async' | 'sync' | 'auto';
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority)
   */
  readonly fetchPriority: string;
  /**
   * Sets or retrieves the height of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
   */
  readonly height: number;
  /**
   * Sets or retrieves the width of the border to draw around the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)
   */
  readonly hspace: number;
  /**
   * Sets or retrieves whether the image is a server-side image map.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
   */
  readonly isMap: boolean;
  /**
   * Sets or retrieves the policy for loading image elements that are outside
   * the viewport.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
   */
  readonly loading: 'eager' | 'lazy';
  /**
   * Sets or retrieves a Uniform Resource Identifier (URI) to a long
   * description of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)
   */
  readonly longDesc: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/lowsrc)
   */
  readonly lowsrc: string;
  /**
   * Sets or retrieves the name of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)
   */
  readonly name: string;
  /**
   * The original height of the image resource before sizing.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)
   */
  readonly naturalHeight: number;
  /**
   * The original width of the image resource before sizing.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)
   */
  readonly naturalWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy)
   */
  readonly referrerPolicy: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes)
   */
  readonly sizes: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
   */
  readonly src: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)
   */
  readonly srcset: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to
   * use as a client-side image map.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
   */
  readonly useMap: string;
  /**
   * Sets or retrieves the vertical margin for the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)
   */
  readonly vspace: number;
  /**
   * Sets or retrieves the width of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
   */
  readonly width: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x)
   */
  readonly x: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y)
   */
  readonly y: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decode)
   */
  decode(): Promise<void>;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLImageElement: {
  readonly prototype: HTMLImageElement;
  new (): HTMLImageElement;
};

/**
 * Provides special properties and methods for manipulating the options, layout,
 * and presentation of <input> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)
 */
interface HTMLInputElement extends HTMLElement, PopoverInvokerElement {
  /** Sets or retrieves a comma-separated list of content types. */
  readonly accept: string;
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   */
  readonly align: string;
  /** Sets or retrieves a text alternative to the graphic. */
  readonly alt: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
   */
  readonly autocomplete: AutoFill;
  readonly capture: string;
  /** Sets or retrieves the state of the check box or radio button. */
  readonly checked: boolean;
  /** Sets or retrieves the state of the check box or radio button. */
  readonly defaultChecked: boolean;
  /** Sets or retrieves the initial contents of the object. */
  readonly defaultValue: string;
  readonly dirName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Returns a FileList object on a file type input object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
   */
  readonly files: FileList | null;
  /** Retrieves a reference to the form that the object is embedded in. */
  readonly form: HTMLFormElement | null;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the
   * parent form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
   */
  readonly formAction: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the
   * form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
   */
  readonly formEnctype: string;
  /**
   * Overrides the submit method attribute previously specified on a form
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
   */
  readonly formMethod: string;
  /**
   * Overrides any validation or required attributes on a form or form
   * elements to allow it to be submitted without validation. This can be used
   * to create a "save draft"-type submit option.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
   */
  readonly formNoValidate: boolean;
  /**
   * Overrides the target attribute on a form element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
   */
  readonly formTarget: string;
  /**
   * Sets or retrieves the height of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
   */
  readonly height: number;
  /**
   * When set, overrides the rendering of checkbox controls so that the
   * current value is not visible.
   */
  readonly indeterminate: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement> | null;
  /**
   * Specifies the ID of a pre-defined datalist of options for an input
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)
   */
  readonly list: HTMLDataListElement | null;
  /**
   * Defines the maximum acceptable value for an input element with
   * type="number".When used with the min and step attributes, lets you
   * control the range and increment (such as only even numbers) that the user
   * can enter into an input field.
   */
  readonly max: string;
  /**
   * Sets or retrieves the maximum number of characters that the user can
   * enter in a text control.
   */
  readonly maxLength: number;
  /**
   * Defines the minimum acceptable value for an input element with
   * type="number". When used with the max and step attributes, lets you
   * control the range and increment (such as even numbers only) that the user
   * can enter into an input field.
   */
  readonly min: string;
  readonly minLength: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can
   * be selected from a list.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
   */
  readonly multiple: boolean;
  /** Sets or retrieves the name of the object. */
  readonly name: string;
  /**
   * Gets or sets a string containing a regular expression that the user's
   * input must match.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
   */
  readonly pattern: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint
   * or prompt to users as the format or type of information they need to
   * enter.The text appears in an input field until the user puts focus on the
   * field.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
   */
  readonly placeholder: string;
  readonly readOnly: boolean;
  /**
   * When present, marks an element that can't be submitted without a value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
   */
  readonly required: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)
   */
  readonly selectionDirection: 'forward' | 'backward' | 'none' | null;
  /** Gets or sets the end position or offset of a text selection. */
  readonly selectionEnd: number | null;
  /** Gets or sets the starting position or offset of a text selection. */
  readonly selectionStart: number | null;
  readonly size: number;
  /** The address or URL of the a media resource that is to be considered. */
  readonly src: string;
  /**
   * Defines an increment or jump between values that you want to allow the
   * user to enter. When used with the max and min attributes, lets you
   * control the range and increment (for example, allow only even numbers)
   * that the user can enter into an input field.
   */
  readonly step: string;
  /** Returns the content type of the object. */
  readonly type: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to
   * use as a client-side image map.
   *
   * @deprecated
   */
  readonly useMap: string;
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)
   */
  readonly validity: ValidityState;
  /** Returns the value of the data at the cursor's current position. */
  readonly value: string;
  /**
   * Returns a Date object representing the form control's value, if
   * applicable; otherwise, returns null. Can be set, to change the value.
   * Throws an "InvalidStateError" DOMException if the control isn't date- or
   * time-based.
   */
  readonly valueAsDate: Date | null;
  /** Returns the input field value as a number. */
  readonly valueAsNumber: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries)
   */
  readonly webkitEntries: ReadonlyArray<FileSystemEntry>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory)
   */
  readonly webkitdirectory: boolean;
  /**
   * Sets or retrieves the width of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
   */
  readonly width: number;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Makes the selection equal to the current object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select)
   */
  select(): void;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setCustomValidity)
   */
  setCustomValidity(error: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText)
   */
  setRangeText(replacement: string): void;
  setRangeText(
    replacement: string,
    start: number,
    end: number,
    selectionMode?: SelectionMode,
  ): void;
  /**
   * Sets the start and end positions of a selection in a text field.
   *
   * @param start The offset into the text field for the start of the
   *   selection.
   * @param end The offset into the text field for the end of the selection.
   * @param direction The direction in which the selection is performed.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setSelectionRange)
   */
  setSelectionRange(
    start: number | null,
    end: number | null,
    direction?: 'forward' | 'backward' | 'none',
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/showPicker)
   */
  showPicker(): void;
  /**
   * Decrements a range input control's value by the value given by the Step
   * attribute. If the optional parameter is used, it will decrement the input
   * control's step value multiplied by the parameter's value.
   *
   * @param n Value to decrement the value by.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepDown)
   */
  stepDown(n?: number): void;
  /**
   * Increments a range input control's value by the value given by the Step
   * attribute. If the optional parameter is used, will increment the input
   * control's value by that value.
   *
   * @param n Value to increment the value by.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepUp)
   */
  stepUp(n?: number): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLInputElement: {
  readonly prototype: HTMLInputElement;
  new (): HTMLInputElement;
};

/**
 * Exposes specific properties and methods (beyond those defined by regular
 * HTMLElement interface it also has available to it by inheritance) for
 * manipulating list elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)
 */
interface HTMLLIElement extends HTMLElement {
  /** @deprecated */
  readonly type: string;
  /** Sets or retrieves the value of a list item. */
  readonly value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLLIElement: {
  readonly prototype: HTMLLIElement;
  new (): HTMLLIElement;
};

/**
 * Gives access to properties specific to <label> elements. It inherits methods
 * and properties from the base HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)
 */
interface HTMLLabelElement extends HTMLElement {
  /**
   * Returns the form control that is associated with this element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)
   */
  readonly control: HTMLElement | null;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the object to which the given label object is assigned.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
   */
  readonly htmlFor: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLLabelElement: {
  readonly prototype: HTMLLabelElement;
  new (): HTMLLabelElement;
};

/**
 * The HTMLLegendElement is an interface allowing to access properties of the
 * <legend> elements. It inherits properties and methods from the HTMLElement
 * interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)
 */
interface HTMLLegendElement extends HTMLElement {
  /** @deprecated */
  readonly align: string;
  /** Retrieves a reference to the form that the object is embedded in. */
  readonly form: HTMLFormElement | null;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLLegendElement: {
  readonly prototype: HTMLLegendElement;
  new (): HTMLLegendElement;
};

/**
 * Reference information for external resources and the relationship of those
 * resources to a document and vice-versa. This object inherits all of the
 * properties and methods of the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)
 */
interface HTMLLinkElement extends HTMLElement, LinkStyle {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as)
   */
  readonly as: string;
  /**
   * Sets or retrieves the character set used to encode the object.
   *
   * @deprecated
   */
  readonly charset: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin)
   */
  readonly crossOrigin: string | null;
  readonly disabled: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority)
   */
  readonly fetchPriority: string;
  /**
   * Sets or retrieves a destination URL or an anchor point.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
   */
  readonly href: string;
  /**
   * Sets or retrieves the language code of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
   */
  readonly hreflang: string;
  readonly imageSizes: string;
  readonly imageSrcset: string;
  readonly integrity: string;
  /** Sets or retrieves the media type. */
  readonly media: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy)
   */
  readonly referrerPolicy: string;
  /**
   * Sets or retrieves the relationship between the object and the destination
   * of the link.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
   */
  readonly rel: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/relList)
   */
  readonly relList: DOMTokenList;
  /**
   * Sets or retrieves the relationship between the object and the destination
   * of the link.
   *
   * @deprecated
   */
  readonly rev: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sizes)
   */
  readonly sizes: DOMTokenList;
  /**
   * Sets or retrieves the window or frame at which to target content.
   *
   * @deprecated
   */
  readonly target: string;
  /** Sets or retrieves the MIME type of the object. */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLLinkElement: {
  readonly prototype: HTMLLinkElement;
  new (): HTMLLinkElement;
};

/**
 * Provides special properties and methods (beyond those of the regular object
 * HTMLElement interface it also has available to it by inheritance) for
 * manipulating the layout and presentation of map elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)
 */
interface HTMLMapElement extends HTMLElement {
  /**
   * Retrieves a collection of the area objects defined for the given map
   * object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)
   */
  readonly areas: HTMLCollection;
  /**
   * Sets or retrieves the name of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
   */
  readonly name: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLMapElement: {
  readonly prototype: HTMLMapElement;
  new (): HTMLMapElement;
};

/**
 * Provides methods to manipulate <marquee> elements.
 *
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMarqueeElement)
 */
interface HTMLMarqueeElement extends HTMLElement {
  /** @deprecated */
  readonly behavior: string;
  /** @deprecated */
  readonly bgColor: string;
  /** @deprecated */
  readonly direction: string;
  /** @deprecated */
  readonly height: string;
  /** @deprecated */
  readonly hspace: number;
  /** @deprecated */
  readonly loop: number;
  /** @deprecated */
  readonly scrollAmount: number;
  /** @deprecated */
  readonly scrollDelay: number;
  /** @deprecated */
  readonly trueSpeed: boolean;
  /** @deprecated */
  readonly vspace: number;
  /** @deprecated */
  readonly width: string;
  /** @deprecated */
  start(): void;
  /** @deprecated */
  stop(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLMarqueeElement: {
  readonly prototype: HTMLMarqueeElement;
  new (): HTMLMarqueeElement;
};

interface HTMLMediaElementEventMap extends HTMLElementEventMap {
  readonly encrypted: MediaEncryptedEvent;
  readonly waitingforkey: Event;
}

/**
 * Adds to HTMLElement the properties and methods needed to support basic
 * media-related capabilities that are common to audio and video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)
 */
interface HTMLMediaElement extends HTMLElement {
  /**
   * Gets or sets a value that indicates whether to start playing the media
   * automatically.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
   */
  readonly autoplay: boolean;
  /**
   * Gets a collection of buffered time ranges.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)
   */
  readonly buffered: TimeRanges;
  /**
   * Gets or sets a flag that indicates whether the client provides a set of
   * controls for the media (in case the developer does not include controls
   * for the player).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
   */
  readonly controls: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin)
   */
  readonly crossOrigin: string | null;
  /**
   * Gets the address or URL of the current media resource that is selected by
   * IHTMLMediaElement.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)
   */
  readonly currentSrc: string;
  /**
   * Gets or sets the current playback position, in seconds.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
   */
  readonly currentTime: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted)
   */
  readonly defaultMuted: boolean;
  /**
   * Gets or sets the default playback rate when the user is not using fast
   * forward or reverse for a video or audio resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
   */
  readonly defaultPlaybackRate: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback)
   */
  readonly disableRemotePlayback: boolean;
  /**
   * Returns the duration in seconds of the current media resource. A NaN
   * value is returned if duration is not available, or Infinity if the media
   * resource is streaming.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)
   */
  readonly duration: number;
  /**
   * Gets information about whether the playback has ended or not.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)
   */
  readonly ended: boolean;
  /**
   * Returns an object representing the current error state of the audio or
   * video element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)
   */
  readonly error: MediaError | null;
  /**
   * Gets or sets a flag to specify whether playback should restart after it
   * completes.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
   */
  readonly loop: boolean;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)
   */
  readonly mediaKeys: MediaKeys | null;
  /**
   * Gets or sets a flag that indicates whether the audio (either audio or the
   * audio track on video media) is muted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
   */
  readonly muted: boolean;
  /**
   * Gets the current network activity for the element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)
   */
  readonly networkState: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event)
   */
  readonly onencrypted:
    | ((this: HTMLMediaElement, ev: MediaEncryptedEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event)
   */
  readonly onwaitingforkey:
    | ((this: HTMLMediaElement, ev: Event) => unknown)
    | null;
  /**
   * Gets a flag that specifies whether playback is paused.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)
   */
  readonly paused: boolean;
  /**
   * Gets or sets the current rate of speed for the media resource to play.
   * This speed is expressed as a multiple of the normal speed of the media
   * resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
   */
  readonly playbackRate: number;
  /**
   * Gets TimeRanges for the current media resource that has been played.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)
   */
  readonly played: TimeRanges;
  /**
   * Gets or sets a value indicating what data should be preloaded, if any.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
   */
  readonly preload: 'none' | 'metadata' | 'auto' | '';
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch)
   */
  readonly preservesPitch: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState)
   */
  readonly readyState: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote)
   */
  readonly remote: RemotePlayback;
  /**
   * Returns a TimeRanges object that represents the ranges of the current
   * media resource that can be seeked.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)
   */
  readonly seekable: TimeRanges;
  /**
   * Gets a flag that indicates whether the client is currently moving to a
   * new playback position in the media resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)
   */
  readonly seeking: boolean;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)
   */
  readonly sinkId: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
   */
  readonly src: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject)
   */
  readonly srcObject: MediaProvider | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks)
   */
  readonly textTracks: TextTrackList;
  /**
   * Gets or sets the volume level for audio portions of the media element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
   */
  readonly volume: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/addTextTrack)
   */
  addTextTrack(
    kind: TextTrackKind,
    label?: string,
    language?: string,
  ): TextTrack;
  /**
   * Returns a string that specifies whether the client can play a given media
   * resource type.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canPlayType)
   */
  canPlayType(type: string): CanPlayTypeResult;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/fastSeek)
   */
  fastSeek(time: number): void;
  /**
   * Resets the audio or video object and loads a new media resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/load)
   */
  load(): void;
  /**
   * Pauses the current playback and sets paused to TRUE.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause)
   */
  pause(): void;
  /**
   * Loads and starts playback of a media resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play)
   */
  play(): Promise<void>;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setMediaKeys)
   */
  setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setSinkId)
   */
  setSinkId(sinkId: string): Promise<void>;
  readonly NETWORK_EMPTY: 0;
  readonly NETWORK_IDLE: 1;
  readonly NETWORK_LOADING: 2;
  readonly NETWORK_NO_SOURCE: 3;
  readonly HAVE_NOTHING: 0;
  readonly HAVE_METADATA: 1;
  readonly HAVE_CURRENT_DATA: 2;
  readonly HAVE_FUTURE_DATA: 3;
  readonly HAVE_ENOUGH_DATA: 4;
  addEventListener<K extends keyof HTMLMediaElementEventMap>(
    type: K,
    listener: (
      this: HTMLMediaElement,
      ev: HTMLMediaElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLMediaElementEventMap>(
    type: K,
    listener: (
      this: HTMLMediaElement,
      ev: HTMLMediaElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLMediaElement: {
  readonly prototype: HTMLMediaElement;
  new (): HTMLMediaElement;
  readonly NETWORK_EMPTY: 0;
  readonly NETWORK_IDLE: 1;
  readonly NETWORK_LOADING: 2;
  readonly NETWORK_NO_SOURCE: 3;
  readonly HAVE_NOTHING: 0;
  readonly HAVE_METADATA: 1;
  readonly HAVE_CURRENT_DATA: 2;
  readonly HAVE_FUTURE_DATA: 3;
  readonly HAVE_ENOUGH_DATA: 4;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement) */
interface HTMLMenuElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement/compact)
   */
  readonly compact: boolean;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLMenuElement: {
  readonly prototype: HTMLMenuElement;
  new (): HTMLMenuElement;
};

/**
 * Contains descriptive metadata about a document. It inherits all of the
 * properties and methods described in the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)
 */
interface HTMLMetaElement extends HTMLElement {
  /** Gets or sets meta-information to associate with httpEquiv or name. */
  readonly content: string;
  /**
   * Gets or sets information used to bind the value of a content attribute of
   * a meta element to an HTTP response header.
   */
  readonly httpEquiv: string;
  readonly media: string;
  /**
   * Sets or retrieves the value specified in the content attribute of the
   * meta object.
   */
  readonly name: string;
  /**
   * Sets or retrieves a scheme to be used in interpreting the value of a
   * property specified for the object.
   *
   * @deprecated
   */
  readonly scheme: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLMetaElement: {
  readonly prototype: HTMLMetaElement;
  new (): HTMLMetaElement;
};

/**
 * The HTML <meter> elements expose the HTMLMeterElement interface, which
 * provides special properties and methods (beyond the HTMLElement object
 * interface they also have available to them by inheritance) for manipulating
 * the layout and presentation of <meter> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)
 */
interface HTMLMeterElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high)
   */
  readonly high: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low)
   */
  readonly low: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max)
   */
  readonly max: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min)
   */
  readonly min: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum)
   */
  readonly optimum: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value)
   */
  readonly value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLMeterElement: {
  readonly prototype: HTMLMeterElement;
  new (): HTMLMeterElement;
};

/**
 * Provides special properties (beyond the regular methods and properties
 * available through the HTMLElement interface they also have available to them
 * by inheritance) for manipulating modification elements, that is <del> and
 * <ins>.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement)
 */
interface HTMLModElement extends HTMLElement {
  /**
   * Sets or retrieves reference information about the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
   */
  readonly cite: string;
  /**
   * Sets or retrieves the date and time of a modification to the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
   */
  readonly dateTime: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLModElement: {
  readonly prototype: HTMLModElement;
  new (): HTMLModElement;
};

/**
 * Provides special properties (beyond those defined on the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating
 * ordered list elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)
 */
interface HTMLOListElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/compact)
   */
  readonly compact: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed)
   */
  readonly reversed: boolean;
  /**
   * The starting number.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
   */
  readonly start: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type)
   */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLOListElement: {
  readonly prototype: HTMLOListElement;
  new (): HTMLOListElement;
};

/**
 * Provides special properties and methods (beyond those on the HTMLElement
 * interface it also has available to it by inheritance) for manipulating the
 * layout and presentation of <object> element, representing external
 * resources.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)
 */
interface HTMLObjectElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/align)
   */
  readonly align: string;
  /**
   * Sets or retrieves a character string that can be used to implement your
   * own archive functionality for the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/archive)
   */
  readonly archive: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/border)
   */
  readonly border: string;
  /**
   * Sets or retrieves the URL of the file containing the compiled Java class.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/code)
   */
  readonly code: string;
  /**
   * Sets or retrieves the URL of the component.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeBase)
   */
  readonly codeBase: string;
  /**
   * Sets or retrieves the Internet media type for the code associated with
   * the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeType)
   */
  readonly codeType: string;
  /**
   * Retrieves the document object of the page or frame.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)
   */
  readonly contentDocument: Document | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow)
   */
  readonly contentWindow: WindowProxy | null;
  /**
   * Sets or retrieves the URL that references the data of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
   */
  readonly data: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/declare)
   */
  readonly declare: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the height of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
   */
  readonly height: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/hspace)
   */
  readonly hspace: number;
  /**
   * Sets or retrieves the name of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
   */
  readonly name: string;
  /**
   * Sets or retrieves a message to be displayed while an object is loading.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/standby)
   */
  readonly standby: string;
  /**
   * Sets or retrieves the MIME type of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
   */
  readonly type: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to
   * use as a client-side image map.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)
   */
  readonly useMap: string;
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)
   */
  readonly validity: ValidityState;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/vspace)
   */
  readonly vspace: number;
  /**
   * Sets or retrieves the width of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
   */
  readonly width: string;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/getSVGDocument)
   */
  getSVGDocument(): Document | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/setCustomValidity)
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLObjectElement: {
  readonly prototype: HTMLObjectElement;
  new (): HTMLObjectElement;
};

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * object interface they also have available to them by inheritance) for
 * manipulating the layout and presentation of <optgroup> elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)
 */
interface HTMLOptGroupElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Sets or retrieves a value that you can use to implement your own label
   * functionality for the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
   */
  readonly label: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLOptGroupElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLOptGroupElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLOptGroupElement: {
  readonly prototype: HTMLOptGroupElement;
  new (): HTMLOptGroupElement;
};

/**
 * <option> elements and inherits all classes and methods of the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)
 */
interface HTMLOptionElement extends HTMLElement {
  /**
   * Sets or retrieves the status of an option.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
   */
  readonly defaultSelected: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * Sets or retrieves the ordinal position of an option in a list box.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)
   */
  readonly index: number;
  /**
   * Sets or retrieves a value that you can use to implement your own label
   * functionality for the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
   */
  readonly label: string;
  /**
   * Sets or retrieves whether the option in the list box is the default item.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
   */
  readonly selected: boolean;
  /**
   * Sets or retrieves the text string specified by the option tag.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)
   */
  readonly text: string;
  /**
   * Sets or retrieves the value which is returned to the server when the form
   * control is submitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
   */
  readonly value: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLOptionElement: {
  readonly prototype: HTMLOptionElement;
  new (): HTMLOptionElement;
};

/**
 * HTMLOptionsCollection is an interface representing a collection of HTML
 * option elements (in document order) and offers methods and properties for
 * traversing the list as well as optionally altering its items. This type is
 * returned solely by the "options" property of select.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)
 */
interface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement> {
  /**
   * Returns the number of elements in the collection.
   *
   * When set to a smaller number, truncates the number of option elements in
   * the corresponding container.
   *
   * When set to a greater number, adds new blank option elements to that
   * container.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)
   */
  readonly length: number;
  /**
   * Returns the index of the first selected item, if any, or −1 if there is
   * no selected item.
   *
   * Can be set, to change the selection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)
   */
  readonly selectedIndex: number;
  /**
   * Inserts element before the node given by before.
   *
   * The before argument can be a number, in which case element is inserted
   * before the item with that number, or an element from the collection, in
   * which case element is inserted before that element.
   *
   * If before is omitted, null, or a number out of range, then element will
   * be added at the end of the list.
   *
   * This method will throw a "HierarchyRequestError" DOMException if element
   * is an ancestor of the element into which it is to be inserted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/add)
   */
  add(
    element: HTMLOptionElement | HTMLOptGroupElement,
    before?: HTMLElement | number | null,
  ): void;
  /**
   * Removes the item with index index from the collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/remove)
   */
  remove(index: number): void;
}

declare var HTMLOptionsCollection: {
  readonly prototype: HTMLOptionsCollection;
  new (): HTMLOptionsCollection;
};

interface HTMLOrSVGElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus)
   */
  readonly autofocus: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)
   */
  readonly dataset: DOMStringMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)
   */
  readonly nonce?: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)
   */
  readonly tabIndex: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/blur)
   */
  blur(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/focus)
   */
  focus(options?: FocusOptions): void;
}

/**
 * Provides properties and methods (beyond those inherited from HTMLElement) for
 * manipulating the layout and presentation of <output> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)
 */
interface HTMLOutputElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue)
   */
  readonly defaultValue: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/htmlFor)
   */
  readonly htmlFor: DOMTokenList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name)
   */
  readonly name: string;
  /**
   * Returns the string "output".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)
   */
  readonly type: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity)
   */
  readonly validity: ValidityState;
  /**
   * Returns the element's current value.
   *
   * Can be set, to change the value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
   */
  readonly value: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/setCustomValidity)
   */
  setCustomValidity(error: string): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLOutputElement: {
  readonly prototype: HTMLOutputElement;
  new (): HTMLOutputElement;
};

/**
 * Provides special properties (beyond those of the regular HTMLElement object
 * interface it inherits) for manipulating <p> elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)
 */
interface HTMLParagraphElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement/align)
   */
  readonly align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLParagraphElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLParagraphElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLParagraphElement: {
  readonly prototype: HTMLParagraphElement;
  new (): HTMLParagraphElement;
};

/**
 * Provides special properties (beyond those of the regular HTMLElement object
 * interface it inherits) for manipulating <param> elements, representing a pair
 * of a key and a value that acts as a parameter for an <object> element.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement)
 */
interface HTMLParamElement extends HTMLElement {
  /**
   * Sets or retrieves the name of an input parameter for an element.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/name)
   */
  readonly name: string;
  /**
   * Sets or retrieves the content type of the resource designated by the
   * value attribute.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/type)
   */
  readonly type: string;
  /**
   * Sets or retrieves the value of an input parameter for an element.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/value)
   */
  readonly value: string;
  /**
   * Sets or retrieves the data type of the value attribute.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/valueType)
   */
  readonly valueType: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var HTMLParamElement: {
  readonly prototype: HTMLParamElement;
  new (): HTMLParamElement;
};

/**
 * A <picture> HTML element. It doesn't implement specific properties or
 * methods.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)
 */
interface HTMLPictureElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLPictureElement: {
  readonly prototype: HTMLPictureElement;
  new (): HTMLPictureElement;
};

/**
 * Exposes specific properties and methods (beyond those of the HTMLElement
 * interface it also has available to it by inheritance) for manipulating a
 * block of preformatted text (<pre>).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)
 */
interface HTMLPreElement extends HTMLElement {
  /**
   * Sets or gets a value that you can use to implement your own width
   * functionality for the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement/width)
   */
  readonly width: number;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLPreElement: {
  readonly prototype: HTMLPreElement;
  new (): HTMLPreElement;
};

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating the
 * layout and presentation of <progress> elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)
 */
interface HTMLProgressElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Defines the maximum, or "done" value for a progress element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
   */
  readonly max: number;
  /**
   * Returns the quotient of value/max when the value attribute is set
   * (determinate progress bar), or -1 when the value attribute is missing
   * (indeterminate progress bar).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)
   */
  readonly position: number;
  /**
   * Sets or gets the current value of a progress element. The value must be a
   * non-negative number between 0 and the max value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
   */
  readonly value: number;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLProgressElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLProgressElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLProgressElement: {
  readonly prototype: HTMLProgressElement;
  new (): HTMLProgressElement;
};

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating
 * quoting elements, like <blockquote> and <q>, but not the <cite> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)
 */
interface HTMLQuoteElement extends HTMLElement {
  /**
   * Sets or retrieves reference information about the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
   */
  readonly cite: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLQuoteElement: {
  readonly prototype: HTMLQuoteElement;
  new (): HTMLQuoteElement;
};

/**
 * HTML <script> elements expose the HTMLScriptElement interface, which provides
 * special properties and methods for manipulating the behavior and execution of
 * <script> elements (beyond the inherited HTMLElement interface).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)
 */
interface HTMLScriptElement extends HTMLElement {
  readonly async: boolean;
  /**
   * Sets or retrieves the character set used to encode the object.
   *
   * @deprecated
   */
  readonly charset: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin)
   */
  readonly crossOrigin: string | null;
  /** Sets or retrieves the status of the script. */
  readonly defer: boolean;
  /**
   * Sets or retrieves the event for which the script is written.
   *
   * @deprecated
   */
  readonly event: string;
  readonly fetchPriority: string;
  /**
   * Sets or retrieves the object that is bound to the event script.
   *
   * @deprecated
   */
  readonly htmlFor: string;
  readonly integrity: string;
  readonly noModule: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy)
   */
  readonly referrerPolicy: string;
  /**
   * Retrieves the URL to an external file that contains the source code or
   * data.
   */
  readonly src: string;
  /** Retrieves or sets the text of the object as a string. */
  readonly text: string;
  /** Sets or retrieves the MIME type for the associated scripting engine. */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLScriptElement: {
  readonly prototype: HTMLScriptElement;
  new (): HTMLScriptElement;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/supports_static)
   */
  supports(type: string): boolean;
};

/**
 * A <select> HTML Element. These elements also share all of the properties and
 * methods of other HTML elements via the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)
 */
interface HTMLSelectElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete)
   */
  readonly autocomplete: AutoFill;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Retrieves a reference to the form that the object is embedded in.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)
   */
  readonly form: HTMLFormElement | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the number of objects in a collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)
   */
  readonly length: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can
   * be selected from a list.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
   */
  readonly multiple: boolean;
  /**
   * Sets or retrieves the name of the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
   */
  readonly name: string;
  /**
   * Returns an HTMLOptionsCollection of the list of options.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)
   */
  readonly options: HTMLOptionsCollection;
  /**
   * When present, marks an element that can't be submitted without a value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
   */
  readonly required: boolean;
  /**
   * Sets or retrieves the index of the selected option in a select object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
   */
  readonly selectedIndex: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions)
   */
  readonly selectedOptions: HTMLCollectionOf<HTMLOptionElement>;
  /**
   * Sets or retrieves the number of rows in the list box.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
   */
  readonly size: number;
  /**
   * Retrieves the type of select control based on the value of the MULTIPLE
   * attribute.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)
   */
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)
   */
  readonly validity: ValidityState;
  /**
   * Sets or retrieves the value which is returned to the server when the form
   * control is submitted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
   */
  readonly value: string;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)
   */
  readonly willValidate: boolean;
  /**
   * Adds an element to the areas, controlRange, or options collection.
   *
   * @param element Variant of type Number that specifies the index position
   *   in the collection where the element is placed. If no value is given,
   *   the method places the element at the end of the collection.
   * @param before Variant of type Object that specifies an element to insert
   *   before, or null to append the object to the collection.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/add)
   */
  add(
    element: HTMLOptionElement | HTMLOptGroupElement,
    before?: HTMLElement | number | null,
  ): void;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/checkValidity)
   */
  checkValidity(): boolean;
  /**
   * Retrieves a select object or an object from an options collection.
   *
   * @param name Variant of type Number or String that specifies the object or
   *   collection to retrieve. If this parameter is an integer, it is the
   *   zero-based index of the object. If this parameter is a string, all
   *   objects with matching name or id properties are retrieved, and a
   *   collection is returned if more than one match is made.
   * @param index Variant of type Number that specifies the zero-based index
   *   of the object to retrieve when a collection is returned.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/item)
   */
  item(index: number): HTMLOptionElement | null;
  /**
   * Retrieves a select object or an object from an options collection.
   *
   * @param namedItem A String that specifies the name or id property of the
   *   object to retrieve. A collection is returned if more than one match is
   *   made.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/namedItem)
   */
  namedItem(name: string): HTMLOptionElement | null;
  /**
   * Removes an element from the collection.
   *
   * @param index Number that specifies the zero-based index of the element to
   *   remove from the collection.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/remove)
   */
  remove(): void;
  remove(index: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/reportValidity)
   */
  reportValidity(): boolean;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/setCustomValidity)
   */
  setCustomValidity(error: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/showPicker)
   */
  showPicker(): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
  readonly [name: number]: HTMLOptionElement | HTMLOptGroupElement;
}

declare var HTMLSelectElement: {
  readonly prototype: HTMLSelectElement;
  new (): HTMLSelectElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement) */
interface HTMLSlotElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assign)
   */
  assign(...nodes: readonly (Element | Text)[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedElements)
   */
  assignedElements(options?: AssignedNodesOptions): readonly Element[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedNodes)
   */
  assignedNodes(options?: AssignedNodesOptions): readonly Node[];
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLSlotElement: {
  readonly prototype: HTMLSlotElement;
  new (): HTMLSlotElement;
};

/**
 * Provides special properties (beyond the regular HTMLElement object interface
 * it also has available to it by inheritance) for manipulating <source>
 * elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)
 */
interface HTMLSourceElement extends HTMLElement {
  readonly height: number;
  /**
   * Gets or sets the intended media type of the media source.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
   */
  readonly media: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes)
   */
  readonly sizes: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
   */
  readonly src: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset)
   */
  readonly srcset: string;
  /**
   * Gets or sets the MIME type of a media resource.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
   */
  readonly type: string;
  readonly width: number;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLSourceElement: {
  readonly prototype: HTMLSourceElement;
  new (): HTMLSourceElement;
};

/**
 * A <span> element and derives from the HTMLElement interface, but without
 * implementing any additional properties or methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)
 */
interface HTMLSpanElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLSpanElement: {
  readonly prototype: HTMLSpanElement;
  new (): HTMLSpanElement;
};

/**
 * A <style> element. It inherits properties and methods from its parent,
 * HTMLElement, and from LinkStyle.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)
 */
interface HTMLStyleElement extends HTMLElement, LinkStyle {
  /**
   * Enables or disables the style sheet.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
   */
  readonly disabled: boolean;
  /**
   * Sets or retrieves the media type.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
   */
  readonly media: string;
  /**
   * Retrieves the CSS language in which the style sheet is written.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)
   */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLStyleElement: {
  readonly prototype: HTMLStyleElement;
  new (): HTMLStyleElement;
};

/**
 * Special properties (beyond the regular HTMLElement interface it also has
 * available to it by inheritance) for manipulating table caption elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)
 */
interface HTMLTableCaptionElement extends HTMLElement {
  /**
   * Sets or retrieves the alignment of the caption or legend.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)
   */
  readonly align: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableCaptionElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableCaptionElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableCaptionElement: {
  readonly prototype: HTMLTableCaptionElement;
  new (): HTMLTableCaptionElement;
};

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating the
 * layout and presentation of table cells, either header or data cells, in an
 * HTML document.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)
 */
interface HTMLTableCellElement extends HTMLElement {
  /**
   * Sets or retrieves abbreviated text for the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
   */
  readonly abbr: string;
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)
   */
  readonly align: string;
  /**
   * Sets or retrieves a comma-delimited list of conceptual categories
   * associated with the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/axis)
   */
  readonly axis: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor)
   */
  readonly bgColor: string;
  /**
   * Retrieves the position of the object in the cells collection of a row.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)
   */
  readonly cellIndex: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch)
   */
  readonly ch: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff)
   */
  readonly chOff: string;
  /**
   * Sets or retrieves the number columns in the table that the object should
   * span.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
   */
  readonly colSpan: number;
  /**
   * Sets or retrieves a list of header cells that provide information for the
   * object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
   */
  readonly headers: string;
  /**
   * Sets or retrieves the height of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/height)
   */
  readonly height: string;
  /**
   * Sets or retrieves whether the browser automatically performs wordwrap.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)
   */
  readonly noWrap: boolean;
  /**
   * Sets or retrieves how many rows in a table the cell should span.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
   */
  readonly rowSpan: number;
  /**
   * Sets or retrieves the group of cells in a table to which the object's
   * information applies.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
   */
  readonly scope: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign)
   */
  readonly vAlign: string;
  /**
   * Sets or retrieves the width of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/width)
   */
  readonly width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableCellElement: {
  readonly prototype: HTMLTableCellElement;
  new (): HTMLTableCellElement;
};

/**
 * Provides special properties (beyond the HTMLElement interface it also has
 * available to it inheritance) for manipulating single or grouped table column
 * elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)
 */
interface HTMLTableColElement extends HTMLElement {
  /**
   * Sets or retrieves the alignment of the object relative to the display or
   * table.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)
   */
  readonly align: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch)
   */
  readonly ch: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff)
   */
  readonly chOff: string;
  /**
   * Sets or retrieves the number of columns in the group.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
   */
  readonly span: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign)
   */
  readonly vAlign: string;
  /**
   * Sets or retrieves the width of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/width)
   */
  readonly width: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableColElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableColElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableColElement: {
  readonly prototype: HTMLTableColElement;
  new (): HTMLTableColElement;
};

/** @deprecated Prefer HTMLTableCellElement */
interface HTMLTableDataCellElement extends HTMLTableCellElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableDataCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableDataCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/**
 * Provides special properties and methods (beyond the regular HTMLElement
 * object interface it also has available to it by inheritance) for manipulating
 * the layout and presentation of tables in an HTML document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)
 */
interface HTMLTableElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)
   */
  readonly align: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor)
   */
  readonly bgColor: string;
  /**
   * Sets or retrieves the width of the border to draw around the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)
   */
  readonly border: string;
  /**
   * Retrieves the caption object of a table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)
   */
  readonly caption: HTMLTableCaptionElement | null;
  /**
   * Sets or retrieves the amount of space between the border of the cell and
   * the content of the cell.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)
   */
  readonly cellPadding: string;
  /**
   * Sets or retrieves the amount of space between cells in a table.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)
   */
  readonly cellSpacing: string;
  /**
   * Sets or retrieves the way the border frame around the table is displayed.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)
   */
  readonly frame: string;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)
   */
  readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
  /**
   * Sets or retrieves which dividing lines (inner borders) are displayed.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)
   */
  readonly rules: string;
  /**
   * Sets or retrieves a description and/or structure of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)
   */
  readonly summary: string;
  /**
   * Retrieves a collection of all tBody objects in the table. Objects in this
   * collection are in source order.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)
   */
  readonly tBodies: HTMLCollectionOf<HTMLTableSectionElement>;
  /**
   * Retrieves the tFoot object of the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)
   */
  readonly tFoot: HTMLTableSectionElement | null;
  /**
   * Retrieves the tHead object of the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)
   */
  readonly tHead: HTMLTableSectionElement | null;
  /**
   * Sets or retrieves the width of the object.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)
   */
  readonly width: string;
  /**
   * Creates an empty caption element in the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createCaption)
   */
  createCaption(): HTMLTableCaptionElement;
  /**
   * Creates an empty tBody element in the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTBody)
   */
  createTBody(): HTMLTableSectionElement;
  /**
   * Creates an empty tFoot element in the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTFoot)
   */
  createTFoot(): HTMLTableSectionElement;
  /**
   * Returns the tHead element object if successful, or null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTHead)
   */
  createTHead(): HTMLTableSectionElement;
  /**
   * Deletes the caption element and its contents from the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteCaption)
   */
  deleteCaption(): void;
  /**
   * Removes the specified row (tr) from the element and from the rows
   * collection.
   *
   * @param index Number that specifies the zero-based position in the rows
   *   collection of the row to remove.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteRow)
   */
  deleteRow(index: number): void;
  /**
   * Deletes the tFoot element and its contents from the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTFoot)
   */
  deleteTFoot(): void;
  /**
   * Deletes the tHead element and its contents from the table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTHead)
   */
  deleteTHead(): void;
  /**
   * Creates a new row (tr) in the table, and adds the row to the rows
   * collection.
   *
   * @param index Number that specifies where to insert the row in the rows
   *   collection. The default value is -1, which appends the new row to the
   *   end of the rows collection.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/insertRow)
   */
  insertRow(index?: number): HTMLTableRowElement;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableElement: {
  readonly prototype: HTMLTableElement;
  new (): HTMLTableElement;
};

/** @deprecated Prefer HTMLTableCellElement */
interface HTMLTableHeaderCellElement extends HTMLTableCellElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableHeaderCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableHeaderCellElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/**
 * Provides special properties and methods (beyond the HTMLElement interface it
 * also has available to it by inheritance) for manipulating the layout and
 * presentation of rows in an HTML table.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)
 */
interface HTMLTableRowElement extends HTMLElement {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)
   */
  readonly align: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor)
   */
  readonly bgColor: string;
  /**
   * Retrieves a collection of all cells in the table row.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)
   */
  readonly cells: HTMLCollectionOf<HTMLTableCellElement>;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch)
   */
  readonly ch: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff)
   */
  readonly chOff: string;
  /**
   * Retrieves the position of the object in the rows collection for the
   * table.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)
   */
  readonly rowIndex: number;
  /**
   * Retrieves the position of the object in the collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)
   */
  readonly sectionRowIndex: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign)
   */
  readonly vAlign: string;
  /**
   * Removes the specified cell from the table row, as well as from the cells
   * collection.
   *
   * @param index Number that specifies the zero-based position of the cell to
   *   remove from the table row. If no value is provided, the last cell in
   *   the cells collection is deleted.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/deleteCell)
   */
  deleteCell(index: number): void;
  /**
   * Creates a new cell in the table row, and adds the cell to the cells
   * collection.
   *
   * @param index Number that specifies where to insert the cell in the tr.
   *   The default value is -1, which appends the new cell to the end of the
   *   cells collection.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/insertCell)
   */
  insertCell(index?: number): HTMLTableCellElement;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableRowElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableRowElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableRowElement: {
  readonly prototype: HTMLTableRowElement;
  new (): HTMLTableRowElement;
};

/**
 * Provides special properties and methods (beyond the HTMLElement interface it
 * also has available to it by inheritance) for manipulating the layout and
 * presentation of sections, that is headers, footers and bodies, in an HTML
 * table.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)
 */
interface HTMLTableSectionElement extends HTMLElement {
  /**
   * Sets or retrieves a value that indicates the table alignment.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)
   */
  readonly align: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch)
   */
  readonly ch: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff)
   */
  readonly chOff: string;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)
   */
  readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign)
   */
  readonly vAlign: string;
  /**
   * Removes the specified row (tr) from the element and from the rows
   * collection.
   *
   * @param index Number that specifies the zero-based position in the rows
   *   collection of the row to remove.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/deleteRow)
   */
  deleteRow(index: number): void;
  /**
   * Creates a new row (tr) in the table, and adds the row to the rows
   * collection.
   *
   * @param index Number that specifies where to insert the row in the rows
   *   collection. The default value is -1, which appends the new row to the
   *   end of the rows collection.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/insertRow)
   */
  insertRow(index?: number): HTMLTableRowElement;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableSectionElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTableSectionElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTableSectionElement: {
  readonly prototype: HTMLTableSectionElement;
  new (): HTMLTableSectionElement;
};

/**
 * Enables access to the contents of an HTML <template> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)
 */
interface HTMLTemplateElement extends HTMLElement {
  /**
   * Returns the template contents (a DocumentFragment).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)
   */
  readonly content: DocumentFragment;
  readonly shadowRootMode: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTemplateElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTemplateElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTemplateElement: {
  readonly prototype: HTMLTemplateElement;
  new (): HTMLTemplateElement;
};

/**
 * Provides special properties and methods for manipulating the layout and
 * presentation of <textarea> elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)
 */
interface HTMLTextAreaElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete)
   */
  readonly autocomplete: AutoFill;
  /** Sets or retrieves the width of the object. */
  readonly cols: number;
  /** Sets or retrieves the initial contents of the object. */
  readonly defaultValue: string;
  readonly dirName: string;
  readonly disabled: boolean;
  /** Retrieves a reference to the form that the object is embedded in. */
  readonly form: HTMLFormElement | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels)
   */
  readonly labels: NodeListOf<HTMLLabelElement>;
  /**
   * Sets or retrieves the maximum number of characters that the user can
   * enter in a text control.
   */
  readonly maxLength: number;
  readonly minLength: number;
  /** Sets or retrieves the name of the object. */
  readonly name: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint
   * or prompt to users as the format or type of information they need to
   * enter.The text appears in an input field until the user puts focus on the
   * field.
   */
  readonly placeholder: string;
  /**
   * Sets or retrieves the value indicated whether the content of the object
   * is read-only.
   */
  readonly readOnly: boolean;
  /** When present, marks an element that can't be submitted without a value. */
  readonly required: boolean;
  /** Sets or retrieves the number of horizontal rows contained in the object. */
  readonly rows: number;
  readonly selectionDirection: 'forward' | 'backward' | 'none';
  /** Gets or sets the end position or offset of a text selection. */
  readonly selectionEnd: number;
  /** Gets or sets the starting position or offset of a text selection. */
  readonly selectionStart: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength)
   */
  readonly textLength: number;
  /** Retrieves the type of control. */
  readonly type: string;
  /**
   * Returns the error message that would be displayed if the user submits the
   * form, or an empty string if no error message. It also triggers the
   * standard error message, such as "this is a required field". The result is
   * that the user sees validation messages without actually submitting.
   */
  readonly validationMessage: string;
  /**
   * Returns a ValidityState object that represents the validity states of an
   * element.
   */
  readonly validity: ValidityState;
  /** Retrieves or sets the text in the entry field of the textArea element. */
  readonly value: string;
  /**
   * Returns whether an element will successfully validate based on forms
   * validation rules and constraints.
   */
  readonly willValidate: boolean;
  /** Sets or retrieves how to handle wordwrapping in the object. */
  readonly wrap: string;
  /**
   * Returns whether a form will validate when it is submitted, without having
   * to submit it.
   */
  checkValidity(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/reportValidity)
   */
  reportValidity(): boolean;
  /** Highlights the input area of a form element. */
  select(): void;
  /**
   * Sets a custom error message that is displayed when a form is submitted.
   *
   * @param error Sets a custom error message that is displayed when a form is
   *   submitted.
   */
  setCustomValidity(error: string): void;
  setRangeText(replacement: string): void;
  setRangeText(
    replacement: string,
    start: number,
    end: number,
    selectionMode?: SelectionMode,
  ): void;
  /**
   * Sets the start and end positions of a selection in a text field.
   *
   * @param start The offset into the text field for the start of the
   *   selection.
   * @param end The offset into the text field for the end of the selection.
   * @param direction The direction in which the selection is performed.
   */
  setSelectionRange(
    start: number | null,
    end: number | null,
    direction?: 'forward' | 'backward' | 'none',
  ): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTextAreaElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (
      this: HTMLTextAreaElement,
      ev: HTMLElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTextAreaElement: {
  readonly prototype: HTMLTextAreaElement;
  new (): HTMLTextAreaElement;
};

/**
 * Provides special properties (beyond the regular HTMLElement interface it also
 * has available to it by inheritance) for manipulating <time> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)
 */
interface HTMLTimeElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime)
   */
  readonly dateTime: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTimeElement: {
  readonly prototype: HTMLTimeElement;
  new (): HTMLTimeElement;
};

/**
 * Contains the title for a document. This element inherits all of the
 * properties and methods of the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)
 */
interface HTMLTitleElement extends HTMLElement {
  /**
   * Retrieves or sets the text of the object as a string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)
   */
  readonly text: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTitleElement: {
  readonly prototype: HTMLTitleElement;
  new (): HTMLTitleElement;
};

/**
 * The HTMLTrackElement
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)
 */
interface HTMLTrackElement extends HTMLElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default)
   */
  readonly default: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind)
   */
  readonly kind: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label)
   */
  readonly label: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState)
   */
  readonly readyState: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src)
   */
  readonly src: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang)
   */
  readonly srclang: string;
  /**
   * Returns the TextTrack object corresponding to the text track of the track
   * element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)
   */
  readonly track: TextTrack;
  readonly NONE: 0;
  readonly LOADING: 1;
  readonly LOADED: 2;
  readonly ERROR: 3;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLTrackElement: {
  readonly prototype: HTMLTrackElement;
  new (): HTMLTrackElement;
  readonly NONE: 0;
  readonly LOADING: 1;
  readonly LOADED: 2;
  readonly ERROR: 3;
};

/**
 * Provides special properties (beyond those defined on the regular HTMLElement
 * interface it also has available to it by inheritance) for manipulating
 * unordered list elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)
 */
interface HTMLUListElement extends HTMLElement {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/compact)
   */
  readonly compact: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/type)
   */
  readonly type: string;
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLUListElement: {
  readonly prototype: HTMLUListElement;
  new (): HTMLUListElement;
};

/**
 * An invalid HTML element and derives from the HTMLElement interface, but
 * without implementing any additional properties or methods.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)
 */
interface HTMLUnknownElement extends HTMLElement {
  addEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
    type: K,
    listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLUnknownElement: {
  readonly prototype: HTMLUnknownElement;
  new (): HTMLUnknownElement;
};

interface HTMLVideoElementEventMap extends HTMLMediaElementEventMap {
  readonly enterpictureinpicture: Event;
  readonly leavepictureinpicture: Event;
}

/**
 * Provides special properties and methods for manipulating video objects. It
 * also inherits properties and methods of HTMLMediaElement and HTMLElement.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)
 */
interface HTMLVideoElement extends HTMLMediaElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture)
   */
  readonly disablePictureInPicture: boolean;
  /**
   * Gets or sets the height of the video element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
   */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event)
   */
  readonly onenterpictureinpicture:
    | ((this: HTMLVideoElement, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event)
   */
  readonly onleavepictureinpicture:
    | ((this: HTMLVideoElement, ev: Event) => unknown)
    | null;
  /**
   * Gets or sets the playsinline of the video element. for example, On
   * iPhone, video elements will now be allowed to play inline, and will not
   * automatically enter fullscreen mode when playback begins.
   */
  readonly playsInline: boolean;
  /**
   * Gets or sets a URL of an image to display, for example, like a movie
   * poster. This can be a still frame from the video, or another image if no
   * video data is available.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
   */
  readonly poster: string;
  /**
   * Gets the intrinsic height of a video in CSS pixels, or zero if the
   * dimensions are not known.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)
   */
  readonly videoHeight: number;
  /**
   * Gets the intrinsic width of a video in CSS pixels, or zero if the
   * dimensions are not known.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)
   */
  readonly videoWidth: number;
  /**
   * Gets or sets the width of the video element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
   */
  readonly width: number;
  cancelVideoFrameCallback(handle: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality)
   */
  getVideoPlaybackQuality(): VideoPlaybackQuality;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestPictureInPicture)
   */
  requestPictureInPicture(): Promise<PictureInPictureWindow>;
  requestVideoFrameCallback(callback: VideoFrameRequestCallback): number;
  addEventListener<K extends keyof HTMLVideoElementEventMap>(
    type: K,
    listener: (
      this: HTMLVideoElement,
      ev: HTMLVideoElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLVideoElementEventMap>(
    type: K,
    listener: (
      this: HTMLVideoElement,
      ev: HTMLVideoElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var HTMLVideoElement: {
  readonly prototype: HTMLVideoElement;
  new (): HTMLVideoElement;
};

/**
 * Events that fire when the fragment identifier of the URL has changed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)
 */
interface HashChangeEvent extends Event {
  /**
   * Returns the URL of the session history entry that is now current.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)
   */
  readonly newURL: string;
  /**
   * Returns the URL of the session history entry that was previously current.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)
   */
  readonly oldURL: string;
}

declare var HashChangeEvent: {
  readonly prototype: HashChangeEvent;
  new (type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;
};

/**
 * This Fetch API interface allows you to perform various actions on HTTP
 * request and response headers. These actions include retrieving, setting,
 * adding to, and removing. A Headers object has an associated header list,
 * which is initially empty and consists of zero or more name and value pairs.
 * You can add to this using methods like append() (see Examples.) In all
 * methods of this interface, header names are matched by case-insensitive byte
 * sequence.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
 */
interface Headers {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Headers/append)
   */
  append(name: string, value: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Headers/delete)
   */
  delete(name: string): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/get) */
  get(name: string): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie)
   */
  getSetCookie(): readonly string[];
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/has) */
  has(name: string): boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/set) */
  set(name: string, value: string): void;
  forEach(
    callbackfn: (value: string, key: string, parent: Headers) => void,
    thisArg?: unknown,
  ): void;
}

declare var Headers: {
  readonly prototype: Headers;
  new (init?: HeadersInit): Headers;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight) */
interface Highlight {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Highlight/priority)
   */
  readonly priority: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Highlight/type)
   */
  readonly type: HighlightType;
  forEach(
    callbackfn: (
      value: AbstractRange,
      key: AbstractRange,
      parent: Highlight,
    ) => void,
    thisArg?: unknown,
  ): void;
}

declare var Highlight: {
  readonly prototype: Highlight;
  new (...initialRanges: readonly AbstractRange[]): Highlight;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HighlightRegistry) */
interface HighlightRegistry {
  forEach(
    callbackfn: (
      value: Highlight,
      key: string,
      parent: HighlightRegistry,
    ) => void,
    thisArg?: unknown,
  ): void;
}

declare var HighlightRegistry: {
  readonly prototype: HighlightRegistry;
  new (): HighlightRegistry;
};

/**
 * Allows manipulation of the browser session history, that is the pages visited
 * in the tab or frame that the current page is loaded in.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History)
 */
interface History {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/History/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration)
   */
  readonly scrollRestoration: ScrollRestoration;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/state) */
  readonly state: unknown;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/back) */
  back(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/History/forward)
   */
  forward(): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/go) */
  go(delta?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/History/pushState)
   */
  pushState(data: unknown, unused: string, url?: string | URL | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/History/replaceState)
   */
  replaceState(data: unknown, unused: string, url?: string | URL | null): void;
}

declare var History: {
  readonly prototype: History;
  new (): History;
};

/**
 * This IndexedDB API interface represents a cursor for traversing or iterating
 * over multiple records in a database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
 */
interface IDBCursor {
  /**
   * Returns the direction ("next", "nextunique", "prev" or "prevunique") of
   * the cursor.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
   */
  readonly direction: IDBCursorDirection;
  /**
   * Returns the key of the cursor. Throws a "InvalidStateError" DOMException
   * if the cursor is advancing or is finished.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
   */
  readonly key: IDBValidKey;
  /**
   * Returns the effective key of the cursor. Throws a "InvalidStateError"
   * DOMException if the cursor is advancing or is finished.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
   */
  readonly primaryKey: IDBValidKey;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)
   */
  readonly request: IDBRequest;
  /**
   * Returns the IDBObjectStore or IDBIndex the cursor was opened from.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
   */
  readonly source: IDBObjectStore | IDBIndex;
  /**
   * Advances the cursor through the next count records in range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/advance)
   */
  advance(count: number): void;
  /**
   * Advances the cursor to the next record in range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continue)
   */
  continue(key?: IDBValidKey): void;
  /**
   * Advances the cursor to the next record in range matching or after key and
   * primaryKey. Throws an "InvalidAccessError" DOMException if the source is
   * not an index.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continuePrimaryKey)
   */
  continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;
  /**
   * Delete the record pointed at by the cursor with a new value.
   *
   * If successful, request's result will be undefined.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/delete)
   */
  delete(): IDBRequest<undefined>;
  /**
   * Updated the record pointed at by the cursor with a new value.
   *
   * Throws a "DataError" DOMException if the effective object store uses
   * in-line keys and the key would have changed.
   *
   * If successful, request's result will be the record's key.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/update)
   */
  update(value: unknown): IDBRequest<IDBValidKey>;
}

declare var IDBCursor: {
  readonly prototype: IDBCursor;
  new (): IDBCursor;
};

/**
 * This IndexedDB API interface represents a cursor for traversing or iterating
 * over multiple records in a database. It is the same as the IDBCursor, except
 * that it includes the value property.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
 */
interface IDBCursorWithValue extends IDBCursor {
  /**
   * Returns the cursor's current value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
   */
  readonly value: unknown;
}

declare var IDBCursorWithValue: {
  readonly prototype: IDBCursorWithValue;
  new (): IDBCursorWithValue;
};

interface IDBDatabaseEventMap {
  readonly abort: Event;
  readonly close: Event;
  readonly error: Event;
  readonly versionchange: IDBVersionChangeEvent;
}

/**
 * This IndexedDB API interface provides a connection to a database; you can use
 * an IDBDatabase object to open a transaction on your database then create,
 * manipulate, and delete objects (data) in that database. The interface
 * provides the only way to get and manage versions of the database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
 */
interface IDBDatabase extends EventTarget {
  /**
   * Returns the name of the database.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
   */
  readonly name: string;
  /**
   * Returns a list of the names of object stores in the database.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
   */
  readonly objectStoreNames: DOMStringList;
  readonly onabort: ((this: IDBDatabase, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)
   */
  readonly onclose: ((this: IDBDatabase, ev: Event) => unknown) | null;
  readonly onerror: ((this: IDBDatabase, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)
   */
  readonly onversionchange:
    | ((this: IDBDatabase, ev: IDBVersionChangeEvent) => unknown)
    | null;
  /**
   * Returns the version of the database.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
   */
  readonly version: number;
  /**
   * Closes the connection once all running transactions have finished.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close)
   */
  close(): void;
  /**
   * Creates a new object store with the given name and options and returns a
   * new IDBObjectStore.
   *
   * Throws a "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore)
   */
  createObjectStore(
    name: string,
    options?: IDBObjectStoreParameters,
  ): IDBObjectStore;
  /**
   * Deletes the object store with the given name.
   *
   * Throws a "InvalidStateError" DOMException if not called within an upgrade
   * transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/deleteObjectStore)
   */
  deleteObjectStore(name: string): void;
  /**
   * Returns a new transaction with the given mode ("readonly" or "readwrite")
   * and scope which can be a single object store name or an array of names.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
   */
  transaction(
    storeNames: string | readonly string[],
    mode?: IDBTransactionMode,
    options?: IDBTransactionOptions,
  ): IDBTransaction;
  addEventListener<K extends keyof IDBDatabaseEventMap>(
    type: K,
    listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof IDBDatabaseEventMap>(
    type: K,
    listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var IDBDatabase: {
  readonly prototype: IDBDatabase;
  new (): IDBDatabase;
};

/**
 * In the following code snippet, we make a request to open a database, and
 * include handlers for the success and error cases. For a full working example,
 * see our To-do Notifications app (view example live.)
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
 */
interface IDBFactory {
  /**
   * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2
   * precedes key1, and 0 if the keys are equal.
   *
   * Throws a "DataError" DOMException if either input is not a valid key.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
   */
  cmp(first: unknown, second: unknown): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases)
   */
  databases(): Promise<readonly IDBDatabaseInfo[]>;
  /**
   * Attempts to delete the named database. If the database already exists and
   * there are open connections that don't close in response to a
   * versionchange event, the request will be blocked until all they close. If
   * the request is successful request's result will be null.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
   */
  deleteDatabase(name: string): IDBOpenDBRequest;
  /**
   * Attempts to open a connection to the named database with the current
   * version, or 1 if it does not already exist. If the request is successful
   * request's result will be the connection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
   */
  open(name: string, version?: number): IDBOpenDBRequest;
}

declare var IDBFactory: {
  readonly prototype: IDBFactory;
  new (): IDBFactory;
};

/**
 * IDBIndex interface of the IndexedDB API provides asynchronous access to an
 * index in a database. An index is a kind of object store for looking up
 * records in another object store, called the referenced object store. You use
 * this interface to retrieve data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
 */
interface IDBIndex {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)
   */
  readonly keyPath: string | readonly string[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)
   */
  readonly multiEntry: boolean;
  /**
   * Returns the name of the index.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
   */
  readonly name: string;
  /**
   * Returns the IDBObjectStore the index belongs to.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
   */
  readonly objectStore: IDBObjectStore;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)
   */
  readonly unique: boolean;
  /**
   * Retrieves the number of records matching the given key or key range in
   * query.
   *
   * If successful, request's result will be the count.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/count)
   */
  count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;
  /**
   * Retrieves the value of the first record matching the given key or key
   * range in query.
   *
   * If successful, request's result will be the value, or undefined if there
   * was no matching record.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/get)
   */
  get(query: IDBValidKey | IDBKeyRange): IDBRequest<unknown>;
  /**
   * Retrieves the values of the records matching the given key or key range
   * in query (up to count if given).
   *
   * If successful, request's result will be an Array of the values.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAll)
   */
  getAll(
    query?: IDBValidKey | IDBKeyRange | null,
    count?: number,
  ): IDBRequest<readonly unknown[]>;
  /**
   * Retrieves the keys of records matching the given key or key range in
   * query (up to count if given).
   *
   * If successful, request's result will be an Array of the keys.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAllKeys)
   */
  getAllKeys(
    query?: IDBValidKey | IDBKeyRange | null,
    count?: number,
  ): IDBRequest<readonly IDBValidKey[]>;
  /**
   * Retrieves the key of the first record matching the given key or key range
   * in query.
   *
   * If successful, request's result will be the key, or undefined if there
   * was no matching record.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getKey)
   */
  getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;
  /**
   * Opens a cursor over the records matching query, ordered by direction. If
   * query is null, all records in index are matched.
   *
   * If successful, request's result will be an IDBCursorWithValue, or null if
   * there were no matching records.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openCursor)
   */
  openCursor(
    query?: IDBValidKey | IDBKeyRange | null,
    direction?: IDBCursorDirection,
  ): IDBRequest<IDBCursorWithValue | null>;
  /**
   * Opens a cursor with key only flag set over the records matching query,
   * ordered by direction. If query is null, all records in index are
   * matched.
   *
   * If successful, request's result will be an IDBCursor, or null if there
   * were no matching records.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openKeyCursor)
   */
  openKeyCursor(
    query?: IDBValidKey | IDBKeyRange | null,
    direction?: IDBCursorDirection,
  ): IDBRequest<IDBCursor | null>;
}

declare var IDBIndex: {
  readonly prototype: IDBIndex;
  new (): IDBIndex;
};

/**
 * A key range can be a single value or a range with upper and lower bounds or
 * endpoints. If the key range has both upper and lower bounds, then it is
 * bounded; if it has no bounds, it is unbounded. A bounded key range can either
 * be open (the endpoints are excluded) or closed (the endpoints are included).
 * To retrieve all keys within a certain range, you can use the following code
 * constructs:
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
 */
interface IDBKeyRange {
  /**
   * Returns lower bound, or undefined if none.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
   */
  readonly lower: unknown;
  /**
   * Returns true if the lower open flag is set, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
   */
  readonly lowerOpen: boolean;
  /**
   * Returns upper bound, or undefined if none.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
   */
  readonly upper: unknown;
  /**
   * Returns true if the upper open flag is set, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
   */
  readonly upperOpen: boolean;
  /**
   * Returns true if key is included in the range, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/includes)
   */
  includes(key: unknown): boolean;
}

declare var IDBKeyRange: {
  readonly prototype: IDBKeyRange;
  new (): IDBKeyRange;
  /**
   * Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is
   * true, lower is not included in the range. If upperOpen is true, upper is
   * not included in the range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/bound_static)
   */
  bound(
    lower: unknown,
    upper: unknown,
    lowerOpen?: boolean,
    upperOpen?: boolean,
  ): IDBKeyRange;
  /**
   * Returns a new IDBKeyRange starting at key with no upper bound. If open is
   * true, key is not included in the range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerBound_static)
   */
  lowerBound(lower: unknown, open?: boolean): IDBKeyRange;
  /**
   * Returns a new IDBKeyRange spanning only key.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/only_static)
   */
  only(value: unknown): IDBKeyRange;
  /**
   * Returns a new IDBKeyRange with no lower bound and ending at key. If open
   * is true, key is not included in the range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperBound_static)
   */
  upperBound(upper: unknown, open?: boolean): IDBKeyRange;
};

/**
 * This example shows a variety of different uses of object stores, from
 * updating the data structure with IDBObjectStore.createIndex inside an
 * onupgradeneeded function, to adding a new item to our object store with
 * IDBObjectStore.add. For a full working example, see our To-do Notifications
 * app (view example live.)
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
 */
interface IDBObjectStore {
  /**
   * Returns true if the store has a key generator, and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
   */
  readonly autoIncrement: boolean;
  /**
   * Returns a list of the names of indexes in the store.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
   */
  readonly indexNames: DOMStringList;
  /**
   * Returns the key path of the store, or null if none.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
   */
  readonly keyPath: string | readonly string[];
  /**
   * Returns the name of the store.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
   */
  readonly name: string;
  /**
   * Returns the associated transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
   */
  readonly transaction: IDBTransaction;
  /**
   * Adds or updates a record in store with the given value and key.
   *
   * If the store uses in-line keys and key is specified a "DataError"
   * DOMException will be thrown.
   *
   * If put() is used, any existing record with the key will be replaced. If
   * add() is used, and if a record with the key already exists the request
   * will fail, with request's error set to a "ConstraintError" DOMException.
   *
   * If successful, request's result will be the record's key.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)
   */
  add(value: unknown, key?: IDBValidKey): IDBRequest<IDBValidKey>;
  /**
   * Deletes all records in store.
   *
   * If successful, request's result will be undefined.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/clear)
   */
  clear(): IDBRequest<undefined>;
  /**
   * Retrieves the number of records matching the given key or key range in
   * query.
   *
   * If successful, request's result will be the count.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/count)
   */
  count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;
  /**
   * Creates a new index in store with the given name, keyPath and options and
   * returns a new IDBIndex. If the keyPath and options define constraints
   * that cannot be satisfied with the data already in store the upgrade
   * transaction will abort with a "ConstraintError" DOMException.
   *
   * Throws an "InvalidStateError" DOMException if not called within an
   * upgrade transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
   */
  createIndex(
    name: string,
    keyPath: string | readonly string[],
    options?: IDBIndexParameters,
  ): IDBIndex;
  /**
   * Deletes records in store with the given key or in the given key range in
   * query.
   *
   * If successful, request's result will be undefined.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/delete)
   */
  delete(query: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;
  /**
   * Deletes the index in store with the given name.
   *
   * Throws an "InvalidStateError" DOMException if not called within an
   * upgrade transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/deleteIndex)
   */
  deleteIndex(name: string): void;
  /**
   * Retrieves the value of the first record matching the given key or key
   * range in query.
   *
   * If successful, request's result will be the value, or undefined if there
   * was no matching record.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/get)
   */
  get(query: IDBValidKey | IDBKeyRange): IDBRequest<unknown>;
  /**
   * Retrieves the values of the records matching the given key or key range
   * in query (up to count if given).
   *
   * If successful, request's result will be an Array of the values.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAll)
   */
  getAll(
    query?: IDBValidKey | IDBKeyRange | null,
    count?: number,
  ): IDBRequest<readonly unknown[]>;
  /**
   * Retrieves the keys of records matching the given key or key range in
   * query (up to count if given).
   *
   * If successful, request's result will be an Array of the keys.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAllKeys)
   */
  getAllKeys(
    query?: IDBValidKey | IDBKeyRange | null,
    count?: number,
  ): IDBRequest<readonly IDBValidKey[]>;
  /**
   * Retrieves the key of the first record matching the given key or key range
   * in query.
   *
   * If successful, request's result will be the key, or undefined if there
   * was no matching record.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getKey)
   */
  getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/index)
   */
  index(name: string): IDBIndex;
  /**
   * Opens a cursor over the records matching query, ordered by direction. If
   * query is null, all records in store are matched.
   *
   * If successful, request's result will be an IDBCursorWithValue pointing at
   * the first matching record, or null if there were no matching records.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openCursor)
   */
  openCursor(
    query?: IDBValidKey | IDBKeyRange | null,
    direction?: IDBCursorDirection,
  ): IDBRequest<IDBCursorWithValue | null>;
  /**
   * Opens a cursor with key only flag set over the records matching query,
   * ordered by direction. If query is null, all records in store are
   * matched.
   *
   * If successful, request's result will be an IDBCursor pointing at the
   * first matching record, or null if there were no matching records.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openKeyCursor)
   */
  openKeyCursor(
    query?: IDBValidKey | IDBKeyRange | null,
    direction?: IDBCursorDirection,
  ): IDBRequest<IDBCursor | null>;
  /**
   * Adds or updates a record in store with the given value and key.
   *
   * If the store uses in-line keys and key is specified a "DataError"
   * DOMException will be thrown.
   *
   * If put() is used, any existing record with the key will be replaced. If
   * add() is used, and if a record with the key already exists the request
   * will fail, with request's error set to a "ConstraintError" DOMException.
   *
   * If successful, request's result will be the record's key.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/put)
   */
  put(value: unknown, key?: IDBValidKey): IDBRequest<IDBValidKey>;
}

declare var IDBObjectStore: {
  readonly prototype: IDBObjectStore;
  new (): IDBObjectStore;
};

interface IDBOpenDBRequestEventMap extends IDBRequestEventMap {
  readonly blocked: IDBVersionChangeEvent;
  readonly upgradeneeded: IDBVersionChangeEvent;
}

/**
 * Also inherits methods from its parents IDBRequest and EventTarget.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
 */
interface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)
   */
  readonly onblocked:
    | ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)
   */
  readonly onupgradeneeded:
    | ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => unknown)
    | null;
  addEventListener<K extends keyof IDBOpenDBRequestEventMap>(
    type: K,
    listener: (
      this: IDBOpenDBRequest,
      ev: IDBOpenDBRequestEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(
    type: K,
    listener: (
      this: IDBOpenDBRequest,
      ev: IDBOpenDBRequestEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var IDBOpenDBRequest: {
  readonly prototype: IDBOpenDBRequest;
  new (): IDBOpenDBRequest;
};

interface IDBRequestEventMap {
  readonly error: Event;
  readonly success: Event;
}

/**
 * The request object does not initially contain any information about the
 * result of the operation, but once information becomes available, an event is
 * fired on the request, and the information becomes available through the
 * properties of the IDBRequest instance.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)
 */
interface IDBRequest<T = unknown> extends EventTarget {
  /**
   * When a request is completed, returns the error (a DOMException), or null
   * if the request succeeded. Throws a "InvalidStateError" DOMException if
   * the request is still pending.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
   */
  readonly error: DOMException | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event)
   */
  readonly onerror: ((this: IDBRequest<T>, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event)
   */
  readonly onsuccess: ((this: IDBRequest<T>, ev: Event) => unknown) | null;
  /**
   * Returns "pending" until a request is complete, then returns "done".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
   */
  readonly readyState: IDBRequestReadyState;
  /**
   * When a request is completed, returns the result, or undefined if the
   * request failed. Throws a "InvalidStateError" DOMException if the request
   * is still pending.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
   */
  readonly result: T;
  /**
   * Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made
   * against, or null if is was an open request.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
   */
  readonly source: IDBObjectStore | IDBIndex | IDBCursor;
  /**
   * Returns the IDBTransaction the request was made within. If this as an
   * open request, then it returns an upgrade transaction while it is running,
   * or null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
   */
  readonly transaction: IDBTransaction | null;
  addEventListener<K extends keyof IDBRequestEventMap>(
    type: K,
    listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof IDBRequestEventMap>(
    type: K,
    listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var IDBRequest: {
  readonly prototype: IDBRequest;
  new (): IDBRequest;
};

interface IDBTransactionEventMap {
  readonly abort: Event;
  readonly complete: Event;
  readonly error: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction) */
interface IDBTransaction extends EventTarget {
  /**
   * Returns the transaction's connection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
   */
  readonly db: IDBDatabase;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)
   */
  readonly durability: IDBTransactionDurability;
  /**
   * If the transaction was aborted, returns the error (a DOMException)
   * providing the reason.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
   */
  readonly error: DOMException | null;
  /**
   * Returns the mode the transaction was created with ("readonly" or
   * "readwrite"), or "versionchange" for an upgrade transaction.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
   */
  readonly mode: IDBTransactionMode;
  /**
   * Returns a list of the names of object stores in the transaction's scope.
   * For an upgrade transaction this is all object stores in the database.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
   */
  readonly objectStoreNames: DOMStringList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)
   */
  readonly onabort: ((this: IDBTransaction, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)
   */
  readonly oncomplete: ((this: IDBTransaction, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)
   */
  readonly onerror: ((this: IDBTransaction, ev: Event) => unknown) | null;
  /**
   * Aborts the transaction. All pending requests will fail with a
   * "AbortError" DOMException and all changes made to the database will be
   * reverted.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort)
   */
  abort(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/commit)
   */
  commit(): void;
  /**
   * Returns an IDBObjectStore in the transaction's scope.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStore)
   */
  objectStore(name: string): IDBObjectStore;
  addEventListener<K extends keyof IDBTransactionEventMap>(
    type: K,
    listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof IDBTransactionEventMap>(
    type: K,
    listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var IDBTransaction: {
  readonly prototype: IDBTransaction;
  new (): IDBTransaction;
};

/**
 * This IndexedDB API interface indicates that the version of the database has
 * changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler
 * function.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
 */
interface IDBVersionChangeEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)
   */
  readonly newVersion: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)
   */
  readonly oldVersion: number;
}

declare var IDBVersionChangeEvent: {
  readonly prototype: IDBVersionChangeEvent;
  new (
    type: string,
    eventInitDict?: IDBVersionChangeEventInit,
  ): IDBVersionChangeEvent;
};

/**
 * The IIRFilterNode interface of the Web Audio API is a AudioNode processor
 * which implements a general infinite impulse response (IIR) filter; this type
 * of filter can be used to implement tone control devices and graphic
 * equalizers as well. It lets the parameters of the filter response be
 * specified, so that it can be tuned as needed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)
 */
interface IIRFilterNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode/getFrequencyResponse)
   */
  getFrequencyResponse(
    frequencyHz: Float32Array,
    magResponse: Float32Array,
    phaseResponse: Float32Array,
  ): void;
}

declare var IIRFilterNode: {
  readonly prototype: IIRFilterNode;
  new (context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline) */
interface IdleDeadline {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout)
   */
  readonly didTimeout: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/timeRemaining)
   */
  timeRemaining(): DOMHighResTimeStamp;
}

declare var IdleDeadline: {
  readonly prototype: IdleDeadline;
  new (): IdleDeadline;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap) */
interface ImageBitmap {
  /**
   * Returns the intrinsic height of the image, in CSS pixels.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
   */
  readonly height: number;
  /**
   * Returns the intrinsic width of the image, in CSS pixels.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
   */
  readonly width: number;
  /**
   * Releases imageBitmap's underlying bitmap data.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/close)
   */
  close(): void;
}

declare var ImageBitmap: {
  readonly prototype: ImageBitmap;
  new (): ImageBitmap;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)
 */
interface ImageBitmapRenderingContext {
  /** Returns the canvas element that the context is bound to. */
  readonly canvas: HTMLCanvasElement | OffscreenCanvas;
  /**
   * Transfers the underlying bitmap data from imageBitmap to context, and the
   * bitmap becomes the contents of the canvas element to which context is
   * bound.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap)
   */
  transferFromImageBitmap(bitmap: ImageBitmap | null): void;
}

declare var ImageBitmapRenderingContext: {
  readonly prototype: ImageBitmapRenderingContext;
  new (): ImageBitmapRenderingContext;
};

/**
 * The underlying pixel data of an area of a <canvas> element. It is created
 * using the ImageData() constructor or creator methods on the
 * CanvasRenderingContext2D object associated with a canvas: createImageData()
 * and getImageData(). It can also be used to set a part of the canvas by using
 * putImageData().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
 */
interface ImageData {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)
   */
  readonly colorSpace: PredefinedColorSpace;
  /**
   * Returns the one-dimensional array containing the data in RGBA order, as
   * integers in the range 0 to 255.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)
   */
  readonly data: Uint8ClampedArray;
  /**
   * Returns the actual dimensions of the data in the ImageData object, in
   * pixels.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)
   */
  readonly height: number;
  /**
   * Returns the actual dimensions of the data in the ImageData object, in
   * pixels.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)
   */
  readonly width: number;
}

declare var ImageData: {
  readonly prototype: ImageData;
  new (sw: number, sh: number, settings?: ImageDataSettings): ImageData;
  new (
    data: Uint8ClampedArray,
    sw: number,
    sh?: number,
    settings?: ImageDataSettings,
  ): ImageData;
};

interface InnerHTML {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)
   */
  readonly innerHTML: string;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)
 */
interface InputDeviceInfo extends MediaDeviceInfo {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo/getCapabilities)
   */
  getCapabilities(): MediaTrackCapabilities;
}

declare var InputDeviceInfo: {
  readonly prototype: InputDeviceInfo;
  new (): InputDeviceInfo;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent) */
interface InputEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/data)
   */
  readonly data: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer)
   */
  readonly dataTransfer: DataTransfer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType)
   */
  readonly inputType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing)
   */
  readonly isComposing: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/getTargetRanges)
   */
  getTargetRanges(): readonly StaticRange[];
}

declare var InputEvent: {
  readonly prototype: InputEvent;
  new (type: string, eventInitDict?: InputEventInit): InputEvent;
};

/**
 * Provides a way to asynchronously observe changes in the intersection of a
 * target element with an ancestor element or with a top-level document's
 * viewport.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)
 */
interface IntersectionObserver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)
   */
  readonly root: Element | Document | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)
   */
  readonly rootMargin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds)
   */
  readonly thresholds: ReadonlyArray<number>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect)
   */
  disconnect(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/observe)
   */
  observe(target: Element): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/takeRecords)
   */
  takeRecords(): readonly IntersectionObserverEntry[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/unobserve)
   */
  unobserve(target: Element): void;
}

declare var IntersectionObserver: {
  readonly prototype: IntersectionObserver;
  new (
    callback: IntersectionObserverCallback,
    options?: IntersectionObserverInit,
  ): IntersectionObserver;
};

/**
 * This Intersection Observer API interface describes the intersection between
 * the target element and its root container at a specific moment of
 * transition.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)
 */
interface IntersectionObserverEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect)
   */
  readonly boundingClientRect: DOMRectReadOnly;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio)
   */
  readonly intersectionRatio: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect)
   */
  readonly intersectionRect: DOMRectReadOnly;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting)
   */
  readonly isIntersecting: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds)
   */
  readonly rootBounds: DOMRectReadOnly | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target)
   */
  readonly target: Element;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time)
   */
  readonly time: DOMHighResTimeStamp;
}

declare var IntersectionObserverEntry: {
  readonly prototype: IntersectionObserverEntry;
  new (
    intersectionObserverEntryInit: IntersectionObserverEntryInit,
  ): IntersectionObserverEntry;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile)
 */
interface KHR_parallel_shader_compile {
  readonly COMPLETION_STATUS_KHR: 0x91b1;
}

/**
 * KeyboardEvent objects describe a user interaction with the keyboard; each
 * event describes a single interaction between the user and a key (or
 * combination of a key with modifier keys) on the keyboard.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
 */
interface KeyboardEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)
   */
  readonly altKey: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charCode)
   */
  readonly charCode: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)
   */
  readonly code: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)
   */
  readonly ctrlKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)
   */
  readonly isComposing: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)
   */
  readonly key: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)
   */
  readonly keyCode: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)
   */
  readonly location: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)
   */
  readonly metaKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)
   */
  readonly repeat: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)
   */
  readonly shiftKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/getModifierState)
   */
  getModifierState(keyArg: string): boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/initKeyboardEvent)
   */
  initKeyboardEvent(
    typeArg: string,
    bubblesArg?: boolean,
    cancelableArg?: boolean,
    viewArg?: Window | null,
    keyArg?: string,
    locationArg?: number,
    ctrlKey?: boolean,
    altKey?: boolean,
    shiftKey?: boolean,
    metaKey?: boolean,
  ): void;
  readonly DOM_KEY_LOCATION_STANDARD: 0x00;
  readonly DOM_KEY_LOCATION_LEFT: 0x01;
  readonly DOM_KEY_LOCATION_RIGHT: 0x02;
  readonly DOM_KEY_LOCATION_NUMPAD: 0x03;
}

declare var KeyboardEvent: {
  readonly prototype: KeyboardEvent;
  new (type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;
  readonly DOM_KEY_LOCATION_STANDARD: 0x00;
  readonly DOM_KEY_LOCATION_LEFT: 0x01;
  readonly DOM_KEY_LOCATION_RIGHT: 0x02;
  readonly DOM_KEY_LOCATION_NUMPAD: 0x03;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect) */
interface KeyframeEffect extends AnimationEffect {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite)
   */
  readonly composite: CompositeOperation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite)
   */
  readonly iterationComposite: IterationCompositeOperation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement)
   */
  readonly pseudoElement: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target)
   */
  readonly target: Element | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/getKeyframes)
   */
  getKeyframes(): readonly ComputedKeyframe[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/setKeyframes)
   */
  setKeyframes(
    keyframes: readonly Keyframe[] | PropertyIndexedKeyframes | null,
  ): void;
}

declare var KeyframeEffect: {
  readonly prototype: KeyframeEffect;
  new (
    target: Element | null,
    keyframes: readonly Keyframe[] | PropertyIndexedKeyframes | null,
    options?: number | KeyframeEffectOptions,
  ): KeyframeEffect;
  new (source: KeyframeEffect): KeyframeEffect;
};

interface LinkStyle {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet)
   */
  readonly sheet: CSSStyleSheet | null;
}

/**
 * The location (URL) of the object it is linked to. Changes done on it are
 * reflected on the object it relates to. Both the Document and Window interface
 * have such a linked Location, accessible via Document.location and
 * Window.location respectively.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location)
 */
interface Location {
  /**
   * Returns a DOMStringList object listing the origins of the ancestor
   * browsing contexts, from the parent browsing context to the top-level
   * browsing context.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)
   */
  readonly ancestorOrigins: DOMStringList;
  /**
   * Returns the Location object's URL's fragment (includes leading "#" if
   * non-empty).
   *
   * Can be set, to navigate to the same URL with a changed fragment (ignores
   * leading "#").
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hash)
   */
  readonly hash: string;
  /**
   * Returns the Location object's URL's host and port (if different from the
   * default port for the scheme).
   *
   * Can be set, to navigate to the same URL with a changed host and port.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/host)
   */
  readonly host: string;
  /**
   * Returns the Location object's URL's host.
   *
   * Can be set, to navigate to the same URL with a changed host.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/hostname)
   */
  readonly hostname: string;
  /**
   * Returns the Location object's URL.
   *
   * Can be set, to navigate to the given URL.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/href)
   */
  readonly href: string;
  toString(): string;
  /**
   * Returns the Location object's URL's origin.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/origin)
   */
  readonly origin: string;
  /**
   * Returns the Location object's URL's path.
   *
   * Can be set, to navigate to the same URL with a changed path.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/pathname)
   */
  readonly pathname: string;
  /**
   * Returns the Location object's URL's port.
   *
   * Can be set, to navigate to the same URL with a changed port.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/port)
   */
  readonly port: string;
  /**
   * Returns the Location object's URL's scheme.
   *
   * Can be set, to navigate to the same URL with a changed scheme.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/protocol)
   */
  readonly protocol: string;
  /**
   * Returns the Location object's URL's query (includes leading "?" if
   * non-empty).
   *
   * Can be set, to navigate to the same URL with a changed query (ignores
   * leading "?").
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/search)
   */
  readonly search: string;
  /**
   * Navigates to the given URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/assign)
   */
  assign(url: string | URL): void;
  /**
   * Reloads the current page.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/reload)
   */
  reload(): void;
  /**
   * Removes the current page from the session history and navigates to the
   * given URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Location/replace)
   */
  replace(url: string | URL): void;
}

declare var Location: {
  readonly prototype: Location;
  new (): Location;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
 */
interface Lock {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode) */
  readonly mode: LockMode;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name) */
  readonly name: string;
}

declare var Lock: {
  readonly prototype: Lock;
  new (): Lock;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
 */
interface LockManager {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/LockManager/query)
   */
  query(): Promise<LockManagerSnapshot>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
   */
  request(name: string, callback: LockGrantedCallback): Promise<unknown>;
  request(
    name: string,
    options: LockOptions,
    callback: LockGrantedCallback,
  ): Promise<unknown>;
}

declare var LockManager: {
  readonly prototype: LockManager;
  new (): LockManager;
};

interface MIDIAccessEventMap {
  readonly statechange: Event;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess)
 */
interface MIDIAccess extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs)
   */
  readonly inputs: MIDIInputMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event)
   */
  readonly onstatechange: ((this: MIDIAccess, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs)
   */
  readonly outputs: MIDIOutputMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled)
   */
  readonly sysexEnabled: boolean;
  addEventListener<K extends keyof MIDIAccessEventMap>(
    type: K,
    listener: (this: MIDIAccess, ev: MIDIAccessEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MIDIAccessEventMap>(
    type: K,
    listener: (this: MIDIAccess, ev: MIDIAccessEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MIDIAccess: {
  readonly prototype: MIDIAccess;
  new (): MIDIAccess;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)
 */
interface MIDIConnectionEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port)
   */
  readonly port: MIDIPort | null;
}

declare var MIDIConnectionEvent: {
  readonly prototype: MIDIConnectionEvent;
  new (
    type: string,
    eventInitDict?: MIDIConnectionEventInit,
  ): MIDIConnectionEvent;
};

interface MIDIInputEventMap extends MIDIPortEventMap {
  readonly midimessage: MIDIMessageEvent;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput)
 */
interface MIDIInput extends MIDIPort {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event)
   */
  readonly onmidimessage:
    | ((this: MIDIInput, ev: MIDIMessageEvent) => unknown)
    | null;
  addEventListener<K extends keyof MIDIInputEventMap>(
    type: K,
    listener: (this: MIDIInput, ev: MIDIInputEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MIDIInputEventMap>(
    type: K,
    listener: (this: MIDIInput, ev: MIDIInputEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MIDIInput: {
  readonly prototype: MIDIInput;
  new (): MIDIInput;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)
 */
interface MIDIInputMap {
  forEach(
    callbackfn: (value: MIDIInput, key: string, parent: MIDIInputMap) => void,
    thisArg?: unknown,
  ): void;
}

declare var MIDIInputMap: {
  readonly prototype: MIDIInputMap;
  new (): MIDIInputMap;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)
 */
interface MIDIMessageEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data)
   */
  readonly data: Uint8Array | null;
}

declare var MIDIMessageEvent: {
  readonly prototype: MIDIMessageEvent;
  new (type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput)
 */
interface MIDIOutput extends MIDIPort {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput/send)
   */
  send(data: readonly number[], timestamp?: DOMHighResTimeStamp): void;
  addEventListener<K extends keyof MIDIPortEventMap>(
    type: K,
    listener: (this: MIDIOutput, ev: MIDIPortEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MIDIPortEventMap>(
    type: K,
    listener: (this: MIDIOutput, ev: MIDIPortEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MIDIOutput: {
  readonly prototype: MIDIOutput;
  new (): MIDIOutput;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)
 */
interface MIDIOutputMap {
  forEach(
    callbackfn: (value: MIDIOutput, key: string, parent: MIDIOutputMap) => void,
    thisArg?: unknown,
  ): void;
}

declare var MIDIOutputMap: {
  readonly prototype: MIDIOutputMap;
  new (): MIDIOutputMap;
};

interface MIDIPortEventMap {
  readonly statechange: MIDIConnectionEvent;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort)
 */
interface MIDIPort extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection)
   */
  readonly connection: MIDIPortConnectionState;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/id) */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer)
   */
  readonly manufacturer: string | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/name) */
  readonly name: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event)
   */
  readonly onstatechange:
    | ((this: MIDIPort, ev: MIDIConnectionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/state)
   */
  readonly state: MIDIPortDeviceState;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/type) */
  readonly type: MIDIPortType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/version)
   */
  readonly version: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/close)
   */
  close(): Promise<MIDIPort>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/open) */
  open(): Promise<MIDIPort>;
  addEventListener<K extends keyof MIDIPortEventMap>(
    type: K,
    listener: (this: MIDIPort, ev: MIDIPortEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MIDIPortEventMap>(
    type: K,
    listener: (this: MIDIPort, ev: MIDIPortEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MIDIPort: {
  readonly prototype: MIDIPort;
  new (): MIDIPort;
};

interface MathMLElementEventMap
  extends ElementEventMap,
    GlobalEventHandlersEventMap {}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MathMLElement) */
interface MathMLElement
  extends Element,
    ElementCSSInlineStyle,
    GlobalEventHandlers,
    HTMLOrSVGElement {
  addEventListener<K extends keyof MathMLElementEventMap>(
    type: K,
    listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MathMLElementEventMap>(
    type: K,
    listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MathMLElement: {
  readonly prototype: MathMLElement;
  new (): MathMLElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities) */
interface MediaCapabilities {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/decodingInfo)
   */
  decodingInfo(
    configuration: MediaDecodingConfiguration,
  ): Promise<MediaCapabilitiesDecodingInfo>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/encodingInfo)
   */
  encodingInfo(
    configuration: MediaEncodingConfiguration,
  ): Promise<MediaCapabilitiesEncodingInfo>;
}

declare var MediaCapabilities: {
  readonly prototype: MediaCapabilities;
  new (): MediaCapabilities;
};

/**
 * The MediaDevicesInfo interface contains information that describes a single
 * media input or output device. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)
 */
interface MediaDeviceInfo {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId)
   */
  readonly deviceId: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId)
   */
  readonly groupId: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind)
   */
  readonly kind: MediaDeviceKind;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label)
   */
  readonly label: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/toJSON)
   */
  toJSON(): unknown;
}

declare var MediaDeviceInfo: {
  readonly prototype: MediaDeviceInfo;
  new (): MediaDeviceInfo;
};

interface MediaDevicesEventMap {
  readonly devicechange: Event;
}

/**
 * Provides access to connected media input devices like cameras and
 * microphones, as well as screen sharing. In essence, it lets you obtain access
 * to any hardware source of media data. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices)
 */
interface MediaDevices extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event)
   */
  readonly ondevicechange: ((this: MediaDevices, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/enumerateDevices)
   */
  enumerateDevices(): Promise<readonly MediaDeviceInfo[]>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getDisplayMedia)
   */
  getDisplayMedia(options?: DisplayMediaStreamOptions): Promise<MediaStream>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getSupportedConstraints)
   */
  getSupportedConstraints(): MediaTrackSupportedConstraints;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getUserMedia)
   */
  getUserMedia(constraints?: MediaStreamConstraints): Promise<MediaStream>;
  addEventListener<K extends keyof MediaDevicesEventMap>(
    type: K,
    listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaDevicesEventMap>(
    type: K,
    listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaDevices: {
  readonly prototype: MediaDevices;
  new (): MediaDevices;
};

/**
 * A MediaElementSourceNode has no inputs and exactly one output, and is created
 * using the AudioContext.createMediaElementSource method. The amount of
 * channels in the output equals the number of channels of the audio referenced
 * by the HTMLMediaElement used in the creation of the node, or is 1 if the
 * HTMLMediaElement has no audio.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)
 */
interface MediaElementAudioSourceNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement)
   */
  readonly mediaElement: HTMLMediaElement;
}

declare var MediaElementAudioSourceNode: {
  readonly prototype: MediaElementAudioSourceNode;
  new (
    context: AudioContext,
    options: MediaElementAudioSourceOptions,
  ): MediaElementAudioSourceNode;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent)
 */
interface MediaEncryptedEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData)
   */
  readonly initData: ArrayBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType)
   */
  readonly initDataType: string;
}

declare var MediaEncryptedEvent: {
  readonly prototype: MediaEncryptedEvent;
  new (
    type: string,
    eventInitDict?: MediaEncryptedEventInit,
  ): MediaEncryptedEvent;
};

/**
 * An error which occurred while handling media in an HTML media element based
 * on HTMLMediaElement, such as <audio> or <video>.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError)
 */
interface MediaError {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaError/code)
   */
  readonly code: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaError/message)
   */
  readonly message: string;
  readonly MEDIA_ERR_ABORTED: 1;
  readonly MEDIA_ERR_NETWORK: 2;
  readonly MEDIA_ERR_DECODE: 3;
  readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4;
}

declare var MediaError: {
  readonly prototype: MediaError;
  new (): MediaError;
  readonly MEDIA_ERR_ABORTED: 1;
  readonly MEDIA_ERR_NETWORK: 2;
  readonly MEDIA_ERR_DECODE: 3;
  readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4;
};

/**
 * This EncryptedMediaExtensions API interface contains the content and related
 * data when the content decryption module generates a message for the session.
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)
 */
interface MediaKeyMessageEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message)
   */
  readonly message: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType)
   */
  readonly messageType: MediaKeyMessageType;
}

declare var MediaKeyMessageEvent: {
  readonly prototype: MediaKeyMessageEvent;
  new (
    type: string,
    eventInitDict: MediaKeyMessageEventInit,
  ): MediaKeyMessageEvent;
};

interface MediaKeySessionEventMap {
  readonly keystatuseschange: Event;
  readonly message: MediaKeyMessageEvent;
}

/**
 * This EncryptedMediaExtensions API interface represents a context for message
 * exchange with a content decryption module (CDM). Available only in secure
 * contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
 */
interface MediaKeySession extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)
   */
  readonly closed: Promise<MediaKeySessionClosedReason>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)
   */
  readonly expiration: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)
   */
  readonly keyStatuses: MediaKeyStatusMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)
   */
  readonly onkeystatuseschange:
    | ((this: MediaKeySession, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)
   */
  readonly onmessage:
    | ((this: MediaKeySession, ev: MediaKeyMessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)
   */
  readonly sessionId: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/close)
   */
  close(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/generateRequest)
   */
  generateRequest(initDataType: string, initData: BufferSource): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/load)
   */
  load(sessionId: string): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/remove)
   */
  remove(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/update)
   */
  update(response: BufferSource): Promise<void>;
  addEventListener<K extends keyof MediaKeySessionEventMap>(
    type: K,
    listener: (
      this: MediaKeySession,
      ev: MediaKeySessionEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaKeySessionEventMap>(
    type: K,
    listener: (
      this: MediaKeySession,
      ev: MediaKeySessionEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaKeySession: {
  readonly prototype: MediaKeySession;
  new (): MediaKeySession;
};

/**
 * This EncryptedMediaExtensions API interface is a read-only map of media key
 * statuses by key IDs. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)
 */
interface MediaKeyStatusMap {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size)
   */
  readonly size: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/get)
   */
  get(keyId: BufferSource): MediaKeyStatus | undefined;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/has)
   */
  has(keyId: BufferSource): boolean;
  forEach(
    callbackfn: (
      value: MediaKeyStatus,
      key: BufferSource,
      parent: MediaKeyStatusMap,
    ) => void,
    thisArg?: unknown,
  ): void;
}

declare var MediaKeyStatusMap: {
  readonly prototype: MediaKeyStatusMap;
  new (): MediaKeyStatusMap;
};

/**
 * This EncryptedMediaExtensions API interface provides access to a Key System
 * for decryption and/or a content protection provider. You can request an
 * instance of this object using the Navigator.requestMediaKeySystemAccess
 * method. Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)
 */
interface MediaKeySystemAccess {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem)
   */
  readonly keySystem: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/createMediaKeys)
   */
  createMediaKeys(): Promise<MediaKeys>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/getConfiguration)
   */
  getConfiguration(): MediaKeySystemConfiguration;
}

declare var MediaKeySystemAccess: {
  readonly prototype: MediaKeySystemAccess;
  new (): MediaKeySystemAccess;
};

/**
 * This EncryptedMediaExtensions API interface the represents a set of keys that
 * an associated HTMLMediaElement can use for decryption of media data during
 * playback. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys)
 */
interface MediaKeys {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/createSession)
   */
  createSession(sessionType?: MediaKeySessionType): MediaKeySession;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/setServerCertificate)
   */
  setServerCertificate(serverCertificate: BufferSource): Promise<boolean>;
}

declare var MediaKeys: {
  readonly prototype: MediaKeys;
  new (): MediaKeys;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList) */
interface MediaList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText)
   */
  readonly mediaText: string;
  toString(): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaList/appendMedium)
   */
  appendMedium(medium: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaList/deleteMedium)
   */
  deleteMedium(medium: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaList/item)
   */
  item(index: number): string | null;
  readonly [index: number]: string;
}

declare var MediaList: {
  readonly prototype: MediaList;
  new (): MediaList;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata) */
interface MediaMetadata {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album)
   */
  readonly album: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist)
   */
  readonly artist: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork)
   */
  readonly artwork: ReadonlyArray<MediaImage>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title)
   */
  readonly title: string;
}

declare var MediaMetadata: {
  readonly prototype: MediaMetadata;
  new (init?: MediaMetadataInit): MediaMetadata;
};

interface MediaQueryListEventMap {
  readonly change: MediaQueryListEvent;
}

/**
 * Stores information on a media query applied to a document, and handles
 * sending notifications to listeners when the media query state change (i.e.
 * when the media query test starts or stops evaluating to true).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList)
 */
interface MediaQueryList extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches)
   */
  readonly matches: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media)
   */
  readonly media: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event)
   */
  readonly onchange:
    | ((this: MediaQueryList, ev: MediaQueryListEvent) => unknown)
    | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/addListener)
   */
  addListener(
    callback:
      | ((this: MediaQueryList, ev: MediaQueryListEvent) => unknown)
      | null,
  ): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/removeListener)
   */
  removeListener(
    callback:
      | ((this: MediaQueryList, ev: MediaQueryListEvent) => unknown)
      | null,
  ): void;
  addEventListener<K extends keyof MediaQueryListEventMap>(
    type: K,
    listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaQueryListEventMap>(
    type: K,
    listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaQueryList: {
  readonly prototype: MediaQueryList;
  new (): MediaQueryList;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent)
 */
interface MediaQueryListEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches)
   */
  readonly matches: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media)
   */
  readonly media: string;
}

declare var MediaQueryListEvent: {
  readonly prototype: MediaQueryListEvent;
  new (
    type: string,
    eventInitDict?: MediaQueryListEventInit,
  ): MediaQueryListEvent;
};

interface MediaRecorderEventMap {
  readonly dataavailable: BlobEvent;
  readonly error: Event;
  readonly pause: Event;
  readonly resume: Event;
  readonly start: Event;
  readonly stop: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder) */
interface MediaRecorder extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond)
   */
  readonly audioBitsPerSecond: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType)
   */
  readonly mimeType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event)
   */
  readonly ondataavailable:
    | ((this: MediaRecorder, ev: BlobEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event)
   */
  readonly onerror: ((this: MediaRecorder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event)
   */
  readonly onpause: ((this: MediaRecorder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event)
   */
  readonly onresume: ((this: MediaRecorder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event)
   */
  readonly onstart: ((this: MediaRecorder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event)
   */
  readonly onstop: ((this: MediaRecorder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state)
   */
  readonly state: RecordingState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream)
   */
  readonly stream: MediaStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond)
   */
  readonly videoBitsPerSecond: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause)
   */
  pause(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/requestData)
   */
  requestData(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume)
   */
  resume(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start)
   */
  start(timeslice?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop)
   */
  stop(): void;
  addEventListener<K extends keyof MediaRecorderEventMap>(
    type: K,
    listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaRecorderEventMap>(
    type: K,
    listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaRecorder: {
  readonly prototype: MediaRecorder;
  new (stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/isTypeSupported_static)
   */
  isTypeSupported(type: string): boolean;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession) */
interface MediaSession {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata)
   */
  readonly metadata: MediaMetadata | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState)
   */
  readonly playbackState: MediaSessionPlaybackState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setActionHandler)
   */
  setActionHandler(
    action: MediaSessionAction,
    handler: MediaSessionActionHandler | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setPositionState)
   */
  setPositionState(state?: MediaPositionState): void;
}

declare var MediaSession: {
  readonly prototype: MediaSession;
  new (): MediaSession;
};

interface MediaSourceEventMap {
  readonly sourceclose: Event;
  readonly sourceended: Event;
  readonly sourceopen: Event;
}

/**
 * This Media Source Extensions API interface represents a source of media data
 * for an HTMLMediaElement object. A MediaSource object can be attached to a
 * HTMLMediaElement to be played in the user agent.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource)
 */
interface MediaSource extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers)
   */
  readonly activeSourceBuffers: SourceBufferList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/duration)
   */
  readonly duration: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceclose_event)
   */
  readonly onsourceclose: ((this: MediaSource, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceended_event)
   */
  readonly onsourceended: ((this: MediaSource, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceopen_event)
   */
  readonly onsourceopen: ((this: MediaSource, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState)
   */
  readonly readyState: ReadyState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers)
   */
  readonly sourceBuffers: SourceBufferList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/addSourceBuffer)
   */
  addSourceBuffer(type: string): SourceBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/clearLiveSeekableRange)
   */
  clearLiveSeekableRange(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/endOfStream)
   */
  endOfStream(error?: EndOfStreamError): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/removeSourceBuffer)
   */
  removeSourceBuffer(sourceBuffer: SourceBuffer): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/setLiveSeekableRange)
   */
  setLiveSeekableRange(start: number, end: number): void;
  addEventListener<K extends keyof MediaSourceEventMap>(
    type: K,
    listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaSourceEventMap>(
    type: K,
    listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaSource: {
  readonly prototype: MediaSource;
  new (): MediaSource;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/isTypeSupported_static)
   */
  isTypeSupported(type: string): boolean;
};

interface MediaStreamEventMap {
  readonly addtrack: MediaStreamTrackEvent;
  readonly removetrack: MediaStreamTrackEvent;
}

/**
 * A stream of media content. A stream consists of several tracks such as video
 * or audio tracks. Each track is specified as an instance of MediaStreamTrack.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream)
 */
interface MediaStream extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/active)
   */
  readonly active: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/id)
   */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event)
   */
  readonly onaddtrack:
    | ((this: MediaStream, ev: MediaStreamTrackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event)
   */
  readonly onremovetrack:
    | ((this: MediaStream, ev: MediaStreamTrackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addTrack)
   */
  addTrack(track: MediaStreamTrack): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/clone)
   */
  clone(): MediaStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getAudioTracks)
   */
  getAudioTracks(): readonly MediaStreamTrack[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTrackById)
   */
  getTrackById(trackId: string): MediaStreamTrack | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTracks)
   */
  getTracks(): readonly MediaStreamTrack[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getVideoTracks)
   */
  getVideoTracks(): readonly MediaStreamTrack[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removeTrack)
   */
  removeTrack(track: MediaStreamTrack): void;
  addEventListener<K extends keyof MediaStreamEventMap>(
    type: K,
    listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaStreamEventMap>(
    type: K,
    listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaStream: {
  readonly prototype: MediaStream;
  new (): MediaStream;
  new (stream: MediaStream): MediaStream;
  new (tracks: readonly MediaStreamTrack[]): MediaStream;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode)
 */
interface MediaStreamAudioDestinationNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream)
   */
  readonly stream: MediaStream;
}

declare var MediaStreamAudioDestinationNode: {
  readonly prototype: MediaStreamAudioDestinationNode;
  new (
    context: AudioContext,
    options?: AudioNodeOptions,
  ): MediaStreamAudioDestinationNode;
};

/**
 * A type of AudioNode which operates as an audio source whose media is received
 * from a MediaStream obtained using the WebRTC or Media Capture and Streams
 * APIs.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)
 */
interface MediaStreamAudioSourceNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream)
   */
  readonly mediaStream: MediaStream;
}

declare var MediaStreamAudioSourceNode: {
  readonly prototype: MediaStreamAudioSourceNode;
  new (
    context: AudioContext,
    options: MediaStreamAudioSourceOptions,
  ): MediaStreamAudioSourceNode;
};

interface MediaStreamTrackEventMap {
  readonly ended: Event;
  readonly mute: Event;
  readonly unmute: Event;
}

/**
 * A single media track within a stream; typically, these are audio or video
 * tracks, but other track types may exist as well.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
 */
interface MediaStreamTrack extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)
   */
  readonly contentHint: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)
   */
  readonly enabled: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)
   */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)
   */
  readonly kind: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)
   */
  readonly label: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)
   */
  readonly muted: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)
   */
  readonly onended: ((this: MediaStreamTrack, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)
   */
  readonly onmute: ((this: MediaStreamTrack, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)
   */
  readonly onunmute: ((this: MediaStreamTrack, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)
   */
  readonly readyState: MediaStreamTrackState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/applyConstraints)
   */
  applyConstraints(constraints?: MediaTrackConstraints): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/clone)
   */
  clone(): MediaStreamTrack;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities)
   */
  getCapabilities(): MediaTrackCapabilities;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getConstraints)
   */
  getConstraints(): MediaTrackConstraints;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings)
   */
  getSettings(): MediaTrackSettings;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/stop)
   */
  stop(): void;
  addEventListener<K extends keyof MediaStreamTrackEventMap>(
    type: K,
    listener: (
      this: MediaStreamTrack,
      ev: MediaStreamTrackEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MediaStreamTrackEventMap>(
    type: K,
    listener: (
      this: MediaStreamTrack,
      ev: MediaStreamTrackEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MediaStreamTrack: {
  readonly prototype: MediaStreamTrack;
  new (): MediaStreamTrack;
};

/**
 * Events which indicate that a MediaStream has had tracks added to or removed
 * from the stream through calls to Media Stream API methods. These events are
 * sent to the stream when these changes occur.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)
 */
interface MediaStreamTrackEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track)
   */
  readonly track: MediaStreamTrack;
}

declare var MediaStreamTrackEvent: {
  readonly prototype: MediaStreamTrackEvent;
  new (
    type: string,
    eventInitDict: MediaStreamTrackEventInit,
  ): MediaStreamTrackEvent;
};

/**
 * This Channel Messaging API interface allows us to create a new message
 * channel and send data through it via its two MessagePort properties.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
 */
interface MessageChannel {
  /**
   * Returns the first MessagePort object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
   */
  readonly port1: MessagePort;
  /**
   * Returns the second MessagePort object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
   */
  readonly port2: MessagePort;
}

declare var MessageChannel: {
  readonly prototype: MessageChannel;
  new (): MessageChannel;
};

/**
 * A message received by a target object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)
 */
interface MessageEvent<T = unknown> extends Event {
  /**
   * Returns the data of the message.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
   */
  readonly data: T;
  /**
   * Returns the last event ID string, for server-sent events.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
   */
  readonly lastEventId: string;
  /**
   * Returns the origin of the message, for server-sent events and
   * cross-document messaging.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
   */
  readonly origin: string;
  /**
   * Returns the MessagePort array sent with the message, for cross-document
   * messaging and channel messaging.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
   */
  readonly ports: ReadonlyArray<MessagePort>;
  /**
   * Returns the WindowProxy of the source window, for cross-document
   * messaging, and the MessagePort being attached, in the connect event fired
   * at SharedWorkerGlobalScope objects.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
   */
  readonly source: MessageEventSource | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent)
   */
  initMessageEvent(
    type: string,
    bubbles?: boolean,
    cancelable?: boolean,
    data?: unknown,
    origin?: string,
    lastEventId?: string,
    source?: MessageEventSource | null,
    ports?: readonly MessagePort[],
  ): void;
}

declare var MessageEvent: {
  readonly prototype: MessageEvent;
  new <T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>;
};

interface MessagePortEventMap {
  readonly message: MessageEvent;
  readonly messageerror: MessageEvent;
}

/**
 * This Channel Messaging API interface represents one of the two ports of a
 * MessageChannel, allowing messages to be sent from one port and listening out
 * for them arriving at the other.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
 */
interface MessagePort extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event)
   */
  readonly onmessage: ((this: MessagePort, ev: MessageEvent) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event)
   */
  readonly onmessageerror:
    | ((this: MessagePort, ev: MessageEvent) => unknown)
    | null;
  /**
   * Disconnects the port, so that it is no longer active.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/close)
   */
  close(): void;
  /**
   * Posts a message through the channel. Objects listed in transfer are
   * transferred, not just cloned, meaning that they are no longer usable on
   * the sending side.
   *
   * Throws a "DataCloneError" DOMException if transfer contains duplicate
   * objects or port, or if message could not be cloned.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
   */
  postMessage(message: unknown, transfer: readonly Transferable[]): void;
  postMessage(message: unknown, options?: StructuredSerializeOptions): void;
  /**
   * Begins dispatching messages received on the port.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/start)
   */
  start(): void;
  addEventListener<K extends keyof MessagePortEventMap>(
    type: K,
    listener: (this: MessagePort, ev: MessagePortEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof MessagePortEventMap>(
    type: K,
    listener: (this: MessagePort, ev: MessagePortEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var MessagePort: {
  readonly prototype: MessagePort;
  new (): MessagePort;
};

/**
 * Provides contains information about a MIME type associated with a particular
 * plugin. NavigatorPlugins.mimeTypes returns an array of this object.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeType)
 */
interface MimeType {
  /**
   * Returns the MIME type's description.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeType/description)
   */
  readonly description: string;
  /**
   * Returns the Plugin object that implements this MIME type.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeType/enabledPlugin)
   */
  readonly enabledPlugin: Plugin;
  /**
   * Returns the MIME type's typical file extensions, in a comma-separated
   * list.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeType/suffixes)
   */
  readonly suffixes: string;
  /**
   * Returns the MIME type.
   *
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeType/type)
   */
  readonly type: string;
}

/** @deprecated */
declare var MimeType: {
  readonly prototype: MimeType;
  new (): MimeType;
};

/**
 * Returns an array of MimeType instances, each of which contains information
 * about a supported browser plugins. This object is returned by
 * NavigatorPlugins.mimeTypes.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray)
 */
interface MimeTypeArray {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/length)
   */
  readonly length: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/item)
   */
  item(index: number): MimeType | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/namedItem)
   */
  namedItem(name: string): MimeType | null;
  readonly [index: number]: MimeType;
}

/** @deprecated */
declare var MimeTypeArray: {
  readonly prototype: MimeTypeArray;
  new (): MimeTypeArray;
};

/**
 * Events that occur due to the user interacting with a pointing device (such as
 * a mouse). Common events using this interface include click, dblclick,
 * mouseup, mousedown.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent)
 */
interface MouseEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey)
   */
  readonly altKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/button)
   */
  readonly button: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons)
   */
  readonly buttons: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX)
   */
  readonly clientX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY)
   */
  readonly clientY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey)
   */
  readonly ctrlKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX)
   */
  readonly layerX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY)
   */
  readonly layerY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey)
   */
  readonly metaKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX)
   */
  readonly movementX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY)
   */
  readonly movementY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX)
   */
  readonly offsetX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY)
   */
  readonly offsetY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX)
   */
  readonly pageX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY)
   */
  readonly pageY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget)
   */
  readonly relatedTarget: EventTarget | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX)
   */
  readonly screenX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY)
   */
  readonly screenY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey)
   */
  readonly shiftKey: boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/x) */
  readonly x: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/y) */
  readonly y: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/getModifierState)
   */
  getModifierState(keyArg: string): boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/initMouseEvent)
   */
  initMouseEvent(
    typeArg: string,
    canBubbleArg: boolean,
    cancelableArg: boolean,
    viewArg: Window,
    detailArg: number,
    screenXArg: number,
    screenYArg: number,
    clientXArg: number,
    clientYArg: number,
    ctrlKeyArg: boolean,
    altKeyArg: boolean,
    shiftKeyArg: boolean,
    metaKeyArg: boolean,
    buttonArg: number,
    relatedTargetArg: EventTarget | null,
  ): void;
}

declare var MouseEvent: {
  readonly prototype: MouseEvent;
  new (type: string, eventInitDict?: MouseEventInit): MouseEvent;
};

/**
 * Provides event properties that are specific to modifications to the Document
 * Object Model (DOM) hierarchy and nodes.
 *
 * @deprecated DOM4 [DOM] provides a new mechanism using a MutationObserver
 *   interface which addresses the use cases that mutation events solve, but in
 *   a more performant manner. Thus, this specification describes mutation
 *   events for reference and completeness of legacy behavior, but deprecates
 *   the use of the MutationEvent interface.
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent)
 */
interface MutationEvent extends Event {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/attrChange)
   */
  readonly attrChange: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/attrName)
   */
  readonly attrName: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/newValue)
   */
  readonly newValue: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/prevValue)
   */
  readonly prevValue: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/relatedNode)
   */
  readonly relatedNode: Node | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/MutationEvent/initMutationEvent)
   */
  initMutationEvent(
    typeArg: string,
    bubblesArg?: boolean,
    cancelableArg?: boolean,
    relatedNodeArg?: Node | null,
    prevValueArg?: string,
    newValueArg?: string,
    attrNameArg?: string,
    attrChangeArg?: number,
  ): void;
  readonly MODIFICATION: 1;
  readonly ADDITION: 2;
  readonly REMOVAL: 3;
}

/** @deprecated */
declare var MutationEvent: {
  readonly prototype: MutationEvent;
  new (): MutationEvent;
  readonly MODIFICATION: 1;
  readonly ADDITION: 2;
  readonly REMOVAL: 3;
};

/**
 * Provides the ability to watch for changes being made to the DOM tree. It is
 * designed as a replacement for the older Mutation Events feature which was
 * part of the DOM3 Events specification.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver)
 */
interface MutationObserver {
  /**
   * Stops observer from observing any mutations. Until the observe() method
   * is used again, observer's callback will not be invoked.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/disconnect)
   */
  disconnect(): void;
  /**
   * Instructs the user agent to observe a given target (a node) and report
   * any mutations based on the criteria given by options (an object).
   *
   * The options argument allows for setting mutation observation options via
   * object members.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/observe)
   */
  observe(target: Node, options?: MutationObserverInit): void;
  /**
   * Empties the record queue and returns what was in there.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/takeRecords)
   */
  takeRecords(): readonly MutationRecord[];
}

declare var MutationObserver: {
  readonly prototype: MutationObserver;
  new (callback: MutationCallback): MutationObserver;
};

/**
 * A MutationRecord represents an individual DOM mutation. It is the object that
 * is passed to MutationObserver's callback.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord)
 */
interface MutationRecord {
  /**
   * Return the nodes added and removed respectively.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)
   */
  readonly addedNodes: NodeList;
  /**
   * Returns the local name of the changed attribute, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)
   */
  readonly attributeName: string | null;
  /**
   * Returns the namespace of the changed attribute, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)
   */
  readonly attributeNamespace: string | null;
  /**
   * Return the previous and next sibling respectively of the added or removed
   * nodes, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)
   */
  readonly nextSibling: Node | null;
  /**
   * The return value depends on type. For "attributes", it is the value of
   * the changed attribute before the change. For "characterData", it is the
   * data of the changed node before the change. For "childList", it is null.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)
   */
  readonly oldValue: string | null;
  /**
   * Return the previous and next sibling respectively of the added or removed
   * nodes, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)
   */
  readonly previousSibling: Node | null;
  /**
   * Return the nodes added and removed respectively.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)
   */
  readonly removedNodes: NodeList;
  /**
   * Returns the node the mutation affected, depending on the type. For
   * "attributes", it is the element whose attribute changed. For
   * "characterData", it is the CharacterData node. For "childList", it is the
   * node whose children changed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)
   */
  readonly target: Node;
  /**
   * Returns "attributes" if it was an attribute mutation. "characterData" if
   * it was a mutation to a CharacterData node. And "childList" if it was a
   * mutation to the tree of nodes.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)
   */
  readonly type: MutationRecordType;
}

declare var MutationRecord: {
  readonly prototype: MutationRecord;
  new (): MutationRecord;
};

/**
 * A collection of Attr objects. Objects inside a NamedNodeMap are not in any
 * particular order, unlike NodeList, although they may be accessed by an index
 * as in an array.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)
 */
interface NamedNodeMap {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItem)
   */
  getNamedItem(qualifiedName: string): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItemNS)
   */
  getNamedItemNS(namespace: string | null, localName: string): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/item)
   */
  item(index: number): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItem)
   */
  removeNamedItem(qualifiedName: string): Attr;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItemNS)
   */
  removeNamedItemNS(namespace: string | null, localName: string): Attr;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItem)
   */
  setNamedItem(attr: Attr): Attr | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItemNS)
   */
  setNamedItemNS(attr: Attr): Attr | null;
  readonly [index: number]: Attr;
}

declare var NamedNodeMap: {
  readonly prototype: NamedNodeMap;
  new (): NamedNodeMap;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
 */
interface NavigationPreloadManager {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/disable)
   */
  disable(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/enable)
   */
  enable(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/getState)
   */
  getState(): Promise<NavigationPreloadState>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/setHeaderValue)
   */
  setHeaderValue(value: string): Promise<void>;
}

declare var NavigationPreloadManager: {
  readonly prototype: NavigationPreloadManager;
  new (): NavigationPreloadManager;
};

/**
 * The state and the identity of the user agent. It allows scripts to query it
 * and to register themselves to carry on some activities.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator)
 */
interface Navigator
  extends NavigatorAutomationInformation,
    NavigatorBadge,
    NavigatorConcurrentHardware,
    NavigatorContentUtils,
    NavigatorCookies,
    NavigatorID,
    NavigatorLanguage,
    NavigatorLocks,
    NavigatorOnLine,
    NavigatorPlugins,
    NavigatorStorage {
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
   */
  readonly clipboard: Clipboard;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
   */
  readonly credentials: CredentialsContainer;
  readonly doNotTrack: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation)
   */
  readonly geolocation: Geolocation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints)
   */
  readonly maxTouchPoints: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities)
   */
  readonly mediaCapabilities: MediaCapabilities;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
   */
  readonly mediaDevices: MediaDevices;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession)
   */
  readonly mediaSession: MediaSession;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/permissions)
   */
  readonly permissions: Permissions;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
   */
  readonly serviceWorker: ServiceWorkerContainer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation)
   */
  readonly userActivation: UserActivation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock)
   */
  readonly wakeLock: WakeLock;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
   */
  canShare(data?: ShareData): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads)
   */
  getGamepads(): readonly (Gamepad | null)[];
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
   */
  requestMIDIAccess(options?: MIDIOptions): Promise<MIDIAccess>;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
   */
  requestMediaKeySystemAccess(
    keySystem: string,
    supportedConfigurations: readonly MediaKeySystemConfiguration[],
  ): Promise<MediaKeySystemAccess>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon)
   */
  sendBeacon(url: string | URL, data?: BodyInit | null): boolean;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/share)
   */
  share(data?: ShareData): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate)
   */
  vibrate(pattern: VibratePattern): boolean;
}

declare var Navigator: {
  readonly prototype: Navigator;
  new (): Navigator;
};

interface NavigatorAutomationInformation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver)
   */
  readonly webdriver: boolean;
}

/** Available only in secure contexts. */
interface NavigatorBadge {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clearAppBadge)
   */
  clearAppBadge(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/setAppBadge)
   */
  setAppBadge(contents?: number): Promise<void>;
}

interface NavigatorConcurrentHardware {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)
   */
  readonly hardwareConcurrency: number;
}

interface NavigatorContentUtils {
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/registerProtocolHandler)
   */
  registerProtocolHandler(scheme: string, url: string | URL): void;
}

interface NavigatorCookies {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled)
   */
  readonly cookieEnabled: boolean;
}

interface NavigatorID {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName)
   */
  readonly appCodeName: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appName)
   */
  readonly appName: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion)
   */
  readonly appVersion: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/platform)
   */
  readonly platform: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/product)
   */
  readonly product: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/productSub)
   */
  readonly productSub: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)
   */
  readonly userAgent: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendor)
   */
  readonly vendor: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendorSub)
   */
  readonly vendorSub: string;
}

interface NavigatorLanguage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)
   */
  readonly language: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)
   */
  readonly languages: ReadonlyArray<string>;
}

/** Available only in secure contexts. */
interface NavigatorLocks {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)
   */
  readonly locks: LockManager;
}

interface NavigatorOnLine {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)
   */
  readonly onLine: boolean;
}

interface NavigatorPlugins {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/NavigatorPlugins/mimeTypes)
   */
  readonly mimeTypes: MimeTypeArray;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled)
   */
  readonly pdfViewerEnabled: boolean;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/plugins)
   */
  readonly plugins: PluginArray;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Navigator/javaEnabled)
   */
  javaEnabled(): boolean;
}

/** Available only in secure contexts. */
interface NavigatorStorage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)
   */
  readonly storage: StorageManager;
}

/**
 * Node is an interface from which a number of DOM API object types inherit. It
 * allows those types to be treated similarly; for example, inheriting the same
 * set of methods, or being tested in the same way.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)
 */
interface Node extends EventTarget {
  /**
   * Returns node's node document's document base URL.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)
   */
  readonly baseURI: string;
  /**
   * Returns the children.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)
   */
  readonly childNodes: NodeListOf<ChildNode>;
  /**
   * Returns the first child.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)
   */
  readonly firstChild: ChildNode | null;
  /**
   * Returns true if node is connected and false otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)
   */
  readonly isConnected: boolean;
  /**
   * Returns the last child.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)
   */
  readonly lastChild: ChildNode | null;
  /**
   * Returns the next sibling.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)
   */
  readonly nextSibling: ChildNode | null;
  /**
   * Returns a string appropriate for the type of node.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)
   */
  readonly nodeName: string;
  /**
   * Returns the type of node.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)
   */
  readonly nodeType: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)
   */
  readonly nodeValue: string | null;
  /**
   * Returns the node document. Returns null for documents.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
   */
  readonly ownerDocument: Document | null;
  /**
   * Returns the parent element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)
   */
  readonly parentElement: HTMLElement | null;
  /**
   * Returns the parent.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)
   */
  readonly parentNode: ParentNode | null;
  /**
   * Returns the previous sibling.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)
   */
  readonly previousSibling: ChildNode | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)
   */
  readonly textContent: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/appendChild)
   */
  appendChild<T extends Node>(node: T): T;
  /**
   * Returns a copy of node. If deep is true, the copy also includes the
   * node's descendants.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)
   */
  cloneNode(deep?: boolean): Node;
  /**
   * Returns a bitmask indicating the position of other relative to node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)
   */
  compareDocumentPosition(other: Node): number;
  /**
   * Returns true if other is an inclusive descendant of node, and false
   * otherwise.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/contains)
   */
  contains(other: Node | null): boolean;
  /**
   * Returns node's root.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)
   */
  getRootNode(options?: GetRootNodeOptions): Node;
  /**
   * Returns whether node has children.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)
   */
  hasChildNodes(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/insertBefore)
   */
  insertBefore<T extends Node>(node: T, child: Node | null): T;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace)
   */
  isDefaultNamespace(namespace: string | null): boolean;
  /**
   * Returns whether node and otherNode have the same properties.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)
   */
  isEqualNode(otherNode: Node | null): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/isSameNode)
   */
  isSameNode(otherNode: Node | null): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI)
   */
  lookupNamespaceURI(prefix: string | null): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix)
   */
  lookupPrefix(namespace: string | null): string | null;
  /**
   * Removes empty exclusive Text nodes and concatenates the data of remaining
   * contiguous exclusive Text nodes into the first of their nodes.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/normalize)
   */
  normalize(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/removeChild)
   */
  removeChild<T extends Node>(child: T): T;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Node/replaceChild)
   */
  replaceChild<T extends Node>(node: Node, child: T): T;
  /** Node is an element. */
  readonly ELEMENT_NODE: 1;
  readonly ATTRIBUTE_NODE: 2;
  /** Node is a Text node. */
  readonly TEXT_NODE: 3;
  /** Node is a CDATASection node. */
  readonly CDATA_SECTION_NODE: 4;
  readonly ENTITY_REFERENCE_NODE: 5;
  readonly ENTITY_NODE: 6;
  /** Node is a ProcessingInstruction node. */
  readonly PROCESSING_INSTRUCTION_NODE: 7;
  /** Node is a Comment node. */
  readonly COMMENT_NODE: 8;
  /** Node is a document. */
  readonly DOCUMENT_NODE: 9;
  /** Node is a doctype. */
  readonly DOCUMENT_TYPE_NODE: 10;
  /** Node is a DocumentFragment node. */
  readonly DOCUMENT_FRAGMENT_NODE: 11;
  readonly NOTATION_NODE: 12;
  /** Set when node and other are not in the same tree. */
  readonly DOCUMENT_POSITION_DISCONNECTED: 0x01;
  /** Set when other is preceding node. */
  readonly DOCUMENT_POSITION_PRECEDING: 0x02;
  /** Set when other is following node. */
  readonly DOCUMENT_POSITION_FOLLOWING: 0x04;
  /** Set when other is an ancestor of node. */
  readonly DOCUMENT_POSITION_CONTAINS: 0x08;
  /** Set when other is a descendant of node. */
  readonly DOCUMENT_POSITION_CONTAINED_BY: 0x10;
  readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 0x20;
}

declare var Node: {
  readonly prototype: Node;
  new (): Node;
  /** Node is an element. */
  readonly ELEMENT_NODE: 1;
  readonly ATTRIBUTE_NODE: 2;
  /** Node is a Text node. */
  readonly TEXT_NODE: 3;
  /** Node is a CDATASection node. */
  readonly CDATA_SECTION_NODE: 4;
  readonly ENTITY_REFERENCE_NODE: 5;
  readonly ENTITY_NODE: 6;
  /** Node is a ProcessingInstruction node. */
  readonly PROCESSING_INSTRUCTION_NODE: 7;
  /** Node is a Comment node. */
  readonly COMMENT_NODE: 8;
  /** Node is a document. */
  readonly DOCUMENT_NODE: 9;
  /** Node is a doctype. */
  readonly DOCUMENT_TYPE_NODE: 10;
  /** Node is a DocumentFragment node. */
  readonly DOCUMENT_FRAGMENT_NODE: 11;
  readonly NOTATION_NODE: 12;
  /** Set when node and other are not in the same tree. */
  readonly DOCUMENT_POSITION_DISCONNECTED: 0x01;
  /** Set when other is preceding node. */
  readonly DOCUMENT_POSITION_PRECEDING: 0x02;
  /** Set when other is following node. */
  readonly DOCUMENT_POSITION_FOLLOWING: 0x04;
  /** Set when other is an ancestor of node. */
  readonly DOCUMENT_POSITION_CONTAINS: 0x08;
  /** Set when other is a descendant of node. */
  readonly DOCUMENT_POSITION_CONTAINED_BY: 0x10;
  readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 0x20;
};

/**
 * An iterator over the members of a list of the nodes in a subtree of the DOM.
 * The nodes will be returned in document order.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator)
 */
interface NodeIterator {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter)
   */
  readonly filter: NodeFilter | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode)
   */
  readonly pointerBeforeReferenceNode: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode)
   */
  readonly referenceNode: Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/root)
   */
  readonly root: Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow)
   */
  readonly whatToShow: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/detach)
   */
  detach(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/nextNode)
   */
  nextNode(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/previousNode)
   */
  previousNode(): Node | null;
}

declare var NodeIterator: {
  readonly prototype: NodeIterator;
  new (): NodeIterator;
};

/**
 * NodeList objects are collections of nodes, usually returned by properties
 * such as Node.childNodes and methods such as document.querySelectorAll().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList)
 */
interface NodeList {
  /**
   * Returns the number of nodes in the collection.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/NodeList/length)
   */
  readonly length: number;
  /**
   * Returns the node with index index from the collection. The nodes are
   * sorted in tree order.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/item)
   */
  item(index: number): Node | null;
  /**
   * Performs the specified action for each node in an list.
   *
   * @param callbackfn A function that accepts up to three arguments. forEach
   *   calls the callbackfn function one time for each element in the list.
   * @param thisArg An object to which the this keyword can refer in the
   *   callbackfn function. If thisArg is omitted, undefined is used as the
   *   this value.
   */
  forEach(
    callbackfn: (value: Node, key: number, parent: NodeList) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: Node;
}

declare var NodeList: {
  readonly prototype: NodeList;
  new (): NodeList;
};

interface NodeListOf<TNode extends Node> extends NodeList {
  item(index: number): TNode;
  /**
   * Performs the specified action for each node in an list.
   *
   * @param callbackfn A function that accepts up to three arguments. forEach
   *   calls the callbackfn function one time for each element in the list.
   * @param thisArg An object to which the this keyword can refer in the
   *   callbackfn function. If thisArg is omitted, undefined is used as the
   *   this value.
   */
  forEach(
    callbackfn: (value: TNode, key: number, parent: NodeListOf<TNode>) => void,
    thisArg?: unknown,
  ): void;
  readonly [index: number]: TNode;
}

interface NonDocumentTypeChildNode {
  /**
   * Returns the first following sibling that is an element, and null
   * otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)
   */
  readonly nextElementSibling: Element | null;
  /**
   * Returns the first preceding sibling that is an element, and null
   * otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)
   */
  readonly previousElementSibling: Element | null;
}

interface NonElementParentNode {
  /**
   * Returns the first element within node's descendants whose ID is
   * elementId.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementById)
   */
  getElementById(elementId: string): Element | null;
}

interface NotificationEventMap {
  readonly click: Event;
  readonly close: Event;
  readonly error: Event;
  readonly show: Event;
}

/**
 * This Notifications API interface is used to configure and display desktop
 * notifications to the user.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
 */
interface Notification extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/badge)
   */
  readonly badge: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)
   */
  readonly body: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)
   */
  readonly data: unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)
   */
  readonly dir: NotificationDirection;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)
   */
  readonly icon: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)
   */
  readonly lang: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)
   */
  readonly onclick: ((this: Notification, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)
   */
  readonly onclose: ((this: Notification, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)
   */
  readonly onerror: ((this: Notification, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)
   */
  readonly onshow: ((this: Notification, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)
   */
  readonly requireInteraction: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)
   */
  readonly silent: boolean | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)
   */
  readonly tag: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)
   */
  readonly title: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/close)
   */
  close(): void;
  addEventListener<K extends keyof NotificationEventMap>(
    type: K,
    listener: (this: Notification, ev: NotificationEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof NotificationEventMap>(
    type: K,
    listener: (this: Notification, ev: NotificationEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Notification: {
  readonly prototype: Notification;
  new (title: string, options?: NotificationOptions): Notification;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/permission_static)
   */
  readonly permission: NotificationPermission;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Notification/requestPermission_static)
   */
  requestPermission(
    deprecatedCallback?: NotificationPermissionCallback,
  ): Promise<NotificationPermission>;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed)
 */
interface OES_draw_buffers_indexed {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES)
   */
  blendEquationSeparateiOES(
    buf: GLuint,
    modeRGB: GLenum,
    modeAlpha: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES)
   */
  blendEquationiOES(buf: GLuint, mode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES)
   */
  blendFuncSeparateiOES(
    buf: GLuint,
    srcRGB: GLenum,
    dstRGB: GLenum,
    srcAlpha: GLenum,
    dstAlpha: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES)
   */
  blendFunciOES(buf: GLuint, src: GLenum, dst: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES)
   */
  colorMaskiOES(
    buf: GLuint,
    r: GLboolean,
    g: GLboolean,
    b: GLboolean,
    a: GLboolean,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/disableiOES)
   */
  disableiOES(target: GLenum, index: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/enableiOES)
   */
  enableiOES(target: GLenum, index: GLuint): void;
}

/**
 * The OES_element_index_uint extension is part of the WebGL API and adds
 * support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
 */
interface OES_element_index_uint {}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap)
 */
interface OES_fbo_render_mipmap {}

/**
 * The OES_standard_derivatives extension is part of the WebGL API and adds the
 * GLSL derivative functions dFdx, dFdy, and fwidth.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
 */
interface OES_standard_derivatives {
  readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b;
}

/**
 * The OES_texture_float extension is part of the WebGL API and exposes
 * floating-point pixel types for textures.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
 */
interface OES_texture_float {}

/**
 * The OES_texture_float_linear extension is part of the WebGL API and allows
 * linear filtering with floating-point pixel types for textures.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
 */
interface OES_texture_float_linear {}

/**
 * The OES_texture_half_float extension is part of the WebGL API and adds
 * texture formats with 16- (aka half float) and 32-bit floating-point
 * components.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
 */
interface OES_texture_half_float {
  readonly HALF_FLOAT_OES: 0x8d61;
}

/**
 * The OES_texture_half_float_linear extension is part of the WebGL API and
 * allows linear filtering with half floating-point pixel types for textures.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
 */
interface OES_texture_half_float_linear {}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object)
 */
interface OES_vertex_array_object {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES)
   */
  bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/createVertexArrayOES)
   */
  createVertexArrayOES(): WebGLVertexArrayObjectOES | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES)
   */
  deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/isVertexArrayOES)
   */
  isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;
  readonly VERTEX_ARRAY_BINDING_OES: 0x85b5;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2) */
interface OVR_multiview2 {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR)
   */
  framebufferTextureMultiviewOVR(
    target: GLenum,
    attachment: GLenum,
    texture: WebGLTexture | null,
    level: GLint,
    baseViewIndex: GLint,
    numViews: GLsizei,
  ): void;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: 0x9630;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: 0x9632;
  readonly MAX_VIEWS_OVR: 0x9631;
  readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: 0x9633;
}

/**
 * The Web Audio API OfflineAudioCompletionEvent interface represents events
 * that occur when the processing of an OfflineAudioContext is terminated. The
 * complete event implements this interface.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)
 */
interface OfflineAudioCompletionEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer)
   */
  readonly renderedBuffer: AudioBuffer;
}

declare var OfflineAudioCompletionEvent: {
  readonly prototype: OfflineAudioCompletionEvent;
  new (
    type: string,
    eventInitDict: OfflineAudioCompletionEventInit,
  ): OfflineAudioCompletionEvent;
};

interface OfflineAudioContextEventMap extends BaseAudioContextEventMap {
  readonly complete: OfflineAudioCompletionEvent;
}

/**
 * An AudioContext interface representing an audio-processing graph built from
 * linked together AudioNodes. In contrast with a standard AudioContext, an
 * OfflineAudioContext doesn't render the audio to the device hardware; instead,
 * it generates it, as fast as it can, and outputs the result to an
 * AudioBuffer.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)
 */
interface OfflineAudioContext extends BaseAudioContext {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event)
   */
  readonly oncomplete:
    | ((this: OfflineAudioContext, ev: OfflineAudioCompletionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/resume)
   */
  resume(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/startRendering)
   */
  startRendering(): Promise<AudioBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/suspend)
   */
  suspend(suspendTime: number): Promise<void>;
  addEventListener<K extends keyof OfflineAudioContextEventMap>(
    type: K,
    listener: (
      this: OfflineAudioContext,
      ev: OfflineAudioContextEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof OfflineAudioContextEventMap>(
    type: K,
    listener: (
      this: OfflineAudioContext,
      ev: OfflineAudioContextEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var OfflineAudioContext: {
  readonly prototype: OfflineAudioContext;
  new (contextOptions: OfflineAudioContextOptions): OfflineAudioContext;
  new (
    numberOfChannels: number,
    length: number,
    sampleRate: number,
  ): OfflineAudioContext;
};

interface OffscreenCanvasEventMap {
  readonly contextlost: Event;
  readonly contextrestored: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas) */
interface OffscreenCanvas extends EventTarget {
  /**
   * These attributes return the dimensions of the OffscreenCanvas object's
   * bitmap.
   *
   * They can be set, to replace the bitmap with a new, transparent black
   * bitmap of the specified dimensions (effectively resizing it).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
   */
  readonly height: number;
  readonly oncontextlost:
    | ((this: OffscreenCanvas, ev: Event) => unknown)
    | null;
  readonly oncontextrestored:
    | ((this: OffscreenCanvas, ev: Event) => unknown)
    | null;
  /**
   * These attributes return the dimensions of the OffscreenCanvas object's
   * bitmap.
   *
   * They can be set, to replace the bitmap with a new, transparent black
   * bitmap of the specified dimensions (effectively resizing it).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
   */
  readonly width: number;
  /**
   * Returns a promise that will fulfill with a new Blob object representing a
   * file containing the image in the OffscreenCanvas object.
   *
   * The argument, if provided, is a dictionary that controls the encoding
   * options of the image file to be created. The type field specifies the
   * file format and has a default value of "image/png"; that type is also
   * used if the requested type isn't supported. If the image format supports
   * variable quality (such as "image/jpeg"), then the quality field is a
   * number in the range 0.0 to 1.0 inclusive indicating the desired quality
   * level for the resulting image.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/convertToBlob)
   */
  convertToBlob(options?: ImageEncodeOptions): Promise<Blob>;
  /**
   * Returns an object that exposes an API for drawing on the OffscreenCanvas
   * object. contextId specifies the desired API: "2d", "bitmaprenderer",
   * "webgl", or "webgl2". options is handled by that API.
   *
   * This specification defines the "2d" context below, which is similar but
   * distinct from the "2d" context that is created from a canvas element. The
   * WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
   *
   * Returns null if the canvas has already been initialized with another
   * context type (e.g., trying to get a "2d" context after getting a "webgl"
   * context).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
   */
  getContext(
    contextId: '2d',
    options?: unknown,
  ): OffscreenCanvasRenderingContext2D | null;
  getContext(
    contextId: 'bitmaprenderer',
    options?: unknown,
  ): ImageBitmapRenderingContext | null;
  getContext(
    contextId: 'webgl',
    options?: unknown,
  ): WebGLRenderingContext | null;
  getContext(
    contextId: 'webgl2',
    options?: unknown,
  ): WebGL2RenderingContext | null;
  getContext(
    contextId: OffscreenRenderingContextId,
    options?: unknown,
  ): OffscreenRenderingContext | null;
  /**
   * Returns a newly created ImageBitmap object with the image in the
   * OffscreenCanvas object. The image in the OffscreenCanvas object is
   * replaced with a new blank image.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/transferToImageBitmap)
   */
  transferToImageBitmap(): ImageBitmap;
  addEventListener<K extends keyof OffscreenCanvasEventMap>(
    type: K,
    listener: (
      this: OffscreenCanvas,
      ev: OffscreenCanvasEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof OffscreenCanvasEventMap>(
    type: K,
    listener: (
      this: OffscreenCanvas,
      ev: OffscreenCanvasEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var OffscreenCanvas: {
  readonly prototype: OffscreenCanvas;
  new (width: number, height: number): OffscreenCanvas;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)
 */
interface OffscreenCanvasRenderingContext2D
  extends CanvasCompositing,
    CanvasDrawImage,
    CanvasDrawPath,
    CanvasFillStrokeStyles,
    CanvasFilters,
    CanvasImageData,
    CanvasImageSmoothing,
    CanvasPath,
    CanvasPathDrawingStyles,
    CanvasRect,
    CanvasShadowStyles,
    CanvasState,
    CanvasText,
    CanvasTextDrawingStyles,
    CanvasTransform {
  readonly canvas: OffscreenCanvas;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D/commit)
   */
  commit(): void;
}

declare var OffscreenCanvasRenderingContext2D: {
  readonly prototype: OffscreenCanvasRenderingContext2D;
  new (): OffscreenCanvasRenderingContext2D;
};

/**
 * The OscillatorNode interface represents a periodic waveform, such as a sine
 * wave. It is an AudioScheduledSourceNode audio-processing module that causes a
 * specified frequency of a given wave to be created—in effect, a constant
 * tone.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode)
 */
interface OscillatorNode extends AudioScheduledSourceNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune)
   */
  readonly detune: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency)
   */
  readonly frequency: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type)
   */
  readonly type: OscillatorType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/setPeriodicWave)
   */
  setPeriodicWave(periodicWave: PeriodicWave): void;
  addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: OscillatorNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(
    type: K,
    listener: (
      this: OscillatorNode,
      ev: AudioScheduledSourceNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var OscillatorNode: {
  readonly prototype: OscillatorNode;
  new (context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError)
 */
interface OverconstrainedError extends DOMException {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint)
   */
  readonly constraint: string;
}

declare var OverconstrainedError: {
  readonly prototype: OverconstrainedError;
  new (constraint: string, message?: string): OverconstrainedError;
};

/**
 * The PageTransitionEvent is fired when a document is being loaded or unloaded.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)
 */
interface PageTransitionEvent extends Event {
  /**
   * For the pageshow event, returns false if the page is newly being loaded
   * (and the load event will fire). Otherwise, returns true.
   *
   * For the pagehide event, returns false if the page is going away for the
   * last time. Otherwise, returns true, meaning that (if nothing conspires to
   * make the page unsalvageable) the page might be reused if the user
   * navigates back to this page.
   *
   * Things that can cause the page to be unsalvageable include:
   *
   * The user agent decided to not keep the Document alive in a session
   * history entry after unload Having iframes that are not salvageable Active
   * WebSocket objects Aborting a Document
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)
   */
  readonly persisted: boolean;
}

declare var PageTransitionEvent: {
  readonly prototype: PageTransitionEvent;
  new (
    type: string,
    eventInitDict?: PageTransitionEventInit,
  ): PageTransitionEvent;
};

/**
 * A PannerNode always has exactly one input and one output: the input can be
 * mono or stereo but the output is always stereo (2 channels); you can't have
 * panning effects without at least two audio channels!
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode)
 */
interface PannerNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle)
   */
  readonly coneInnerAngle: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle)
   */
  readonly coneOuterAngle: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain)
   */
  readonly coneOuterGain: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel)
   */
  readonly distanceModel: DistanceModelType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance)
   */
  readonly maxDistance: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX)
   */
  readonly orientationX: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY)
   */
  readonly orientationY: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ)
   */
  readonly orientationZ: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel)
   */
  readonly panningModel: PanningModelType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX)
   */
  readonly positionX: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY)
   */
  readonly positionY: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ)
   */
  readonly positionZ: AudioParam;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance)
   */
  readonly refDistance: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor)
   */
  readonly rolloffFactor: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/setOrientation)
   */
  setOrientation(x: number, y: number, z: number): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/setPosition)
   */
  setPosition(x: number, y: number, z: number): void;
}

declare var PannerNode: {
  readonly prototype: PannerNode;
  new (context: BaseAudioContext, options?: PannerOptions): PannerNode;
};

interface ParentNode extends Node {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)
   */
  readonly childElementCount: number;
  /**
   * Returns the child elements.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/children)
   */
  readonly children: HTMLCollection;
  /**
   * Returns the first child that is an element, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)
   */
  readonly firstElementChild: Element | null;
  /**
   * Returns the last child that is an element, and null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)
   */
  readonly lastElementChild: Element | null;
  /**
   * Inserts nodes after the last child of node, while replacing strings in
   * nodes with equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/append)
   */
  append(...nodes: readonly (Node | string)[]): void;
  /**
   * Inserts nodes before the first child of node, while replacing strings in
   * nodes with equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/prepend)
   */
  prepend(...nodes: readonly (Node | string)[]): void;
  /**
   * Returns the first element that is a descendant of node that matches
   * selectors.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
   */
  querySelector<K extends keyof HTMLElementTagNameMap>(
    selectors: K,
  ): HTMLElementTagNameMap[K] | null;
  querySelector<K extends keyof SVGElementTagNameMap>(
    selectors: K,
  ): SVGElementTagNameMap[K] | null;
  querySelector<K extends keyof MathMLElementTagNameMap>(
    selectors: K,
  ): MathMLElementTagNameMap[K] | null;
  /** @deprecated */
  querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(
    selectors: K,
  ): HTMLElementDeprecatedTagNameMap[K] | null;
  querySelector<E extends Element = Element>(selectors: string): E | null;
  /**
   * Returns all element descendants of node that match selectors.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
   */
  querySelectorAll<K extends keyof HTMLElementTagNameMap>(
    selectors: K,
  ): NodeListOf<HTMLElementTagNameMap[K]>;
  querySelectorAll<K extends keyof SVGElementTagNameMap>(
    selectors: K,
  ): NodeListOf<SVGElementTagNameMap[K]>;
  querySelectorAll<K extends keyof MathMLElementTagNameMap>(
    selectors: K,
  ): NodeListOf<MathMLElementTagNameMap[K]>;
  /** @deprecated */
  querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(
    selectors: K,
  ): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
  querySelectorAll<E extends Element = Element>(
    selectors: string,
  ): NodeListOf<E>;
  /**
   * Replace all children of node with nodes, while replacing strings in nodes
   * with equivalent Text nodes.
   *
   * Throws a "HierarchyRequestError" DOMException if the constraints of the
   * node tree are violated.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)
   */
  replaceChildren(...nodes: readonly (Node | string)[]): void;
}

/**
 * This Canvas 2D API interface is used to declare a path that can then be used
 * on a CanvasRenderingContext2D object. The path methods of the
 * CanvasRenderingContext2D interface are also present on this interface, which
 * gives you the convenience of being able to retain and replay your path
 * whenever desired.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
 */
interface Path2D extends CanvasPath {
  /**
   * Adds to the path the path given by the argument.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Path2D/addPath)
   */
  addPath(path: Path2D, transform?: DOMMatrix2DInit): void;
}

declare var Path2D: {
  readonly prototype: Path2D;
  new (path?: Path2D | string): Path2D;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)
 */
interface PaymentMethodChangeEvent extends PaymentRequestUpdateEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails)
   */
  readonly methodDetails: unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName)
   */
  readonly methodName: string;
}

declare var PaymentMethodChangeEvent: {
  readonly prototype: PaymentMethodChangeEvent;
  new (
    type: string,
    eventInitDict?: PaymentMethodChangeEventInit,
  ): PaymentMethodChangeEvent;
};

interface PaymentRequestEventMap {
  readonly paymentmethodchange: Event;
}

/**
 * This Payment Request API interface is the primary access point into the API,
 * and lets web content and apps accept payments from the end user. Available
 * only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest)
 */
interface PaymentRequest extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id)
   */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event)
   */
  readonly onpaymentmethodchange:
    | ((this: PaymentRequest, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/abort)
   */
  abort(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/canMakePayment)
   */
  canMakePayment(): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/show)
   */
  show(
    detailsPromise?: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>,
  ): Promise<PaymentResponse>;
  addEventListener<K extends keyof PaymentRequestEventMap>(
    type: K,
    listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof PaymentRequestEventMap>(
    type: K,
    listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var PaymentRequest: {
  readonly prototype: PaymentRequest;
  new (
    methodData: readonly PaymentMethodData[],
    details: PaymentDetailsInit,
  ): PaymentRequest;
};

/**
 * This Payment Request API interface enables a web page to update the details
 * of a PaymentRequest in response to a user action. Available only in secure
 * contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)
 */
interface PaymentRequestUpdateEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent/updateWith)
   */
  updateWith(
    detailsPromise: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>,
  ): void;
}

declare var PaymentRequestUpdateEvent: {
  readonly prototype: PaymentRequestUpdateEvent;
  new (
    type: string,
    eventInitDict?: PaymentRequestUpdateEventInit,
  ): PaymentRequestUpdateEvent;
};

/**
 * This Payment Request API interface is returned after a user selects a payment
 * method and approves a payment request. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse)
 */
interface PaymentResponse extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details)
   */
  readonly details: unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName)
   */
  readonly methodName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId)
   */
  readonly requestId: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/complete)
   */
  complete(result?: PaymentComplete): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/retry)
   */
  retry(errorFields?: PaymentValidationErrors): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/toJSON)
   */
  toJSON(): unknown;
}

declare var PaymentResponse: {
  readonly prototype: PaymentResponse;
  new (): PaymentResponse;
};

interface PerformanceEventMap {
  readonly resourcetimingbufferfull: Event;
}

/**
 * Provides access to performance-related information for the current page. It's
 * part of the High Resolution Time API, but is enhanced by the Performance
 * Timeline API, the Navigation Timing API, the User Timing API, and the
 * Resource Timing API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)
 */
interface Performance extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts)
   */
  readonly eventCounts: EventCounts;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Performance/navigation)
   */
  readonly navigation: PerformanceNavigation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)
   */
  readonly onresourcetimingbufferfull:
    | ((this: Performance, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)
   */
  readonly timeOrigin: DOMHighResTimeStamp;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Performance/timing)
   */
  readonly timing: PerformanceTiming;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks)
   */
  clearMarks(markName?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures)
   */
  clearMeasures(measureName?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings)
   */
  clearResourceTimings(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntries)
   */
  getEntries(): PerformanceEntryList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName)
   */
  getEntriesByName(name: string, type?: string): PerformanceEntryList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType)
   */
  getEntriesByType(type: string): PerformanceEntryList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/mark)
   */
  mark(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/measure)
   */
  measure(
    measureName: string,
    startOrMeasureOptions?: string | PerformanceMeasureOptions,
    endMark?: string,
  ): PerformanceMeasure;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/now)
   */
  now(): DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize)
   */
  setResourceTimingBufferSize(maxSize: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Performance/toJSON)
   */
  toJSON(): unknown;
  addEventListener<K extends keyof PerformanceEventMap>(
    type: K,
    listener: (this: Performance, ev: PerformanceEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof PerformanceEventMap>(
    type: K,
    listener: (this: Performance, ev: PerformanceEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Performance: {
  readonly prototype: Performance;
  new (): Performance;
};

/**
 * Encapsulates a single performance metric that is part of the performance
 * timeline. A performance entry can be directly created by making a performance
 * mark or measure (for example by calling the mark() method) at an explicit
 * point in an application. Performance entries are also created in indirect
 * ways such as loading a resource (such as an image).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
 */
interface PerformanceEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)
   */
  readonly duration: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)
   */
  readonly entryType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)
   */
  readonly startTime: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/toJSON)
   */
  toJSON(): unknown;
}

declare var PerformanceEntry: {
  readonly prototype: PerformanceEntry;
  new (): PerformanceEntry;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming)
 */
interface PerformanceEventTiming extends PerformanceEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable)
   */
  readonly cancelable: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd)
   */
  readonly processingEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart)
   */
  readonly processingStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target)
   */
  readonly target: Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/toJSON)
   */
  toJSON(): unknown;
}

declare var PerformanceEventTiming: {
  readonly prototype: PerformanceEventTiming;
  new (): PerformanceEventTiming;
};

/**
 * PerformanceMark is an abstract interface for PerformanceEntry objects with an
 * entryType of "mark". Entries of this type are created by calling
 * performance.mark() to add a named DOMHighResTimeStamp (the mark) to the
 * browser's performance timeline.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
 */
interface PerformanceMark extends PerformanceEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)
   */
  readonly detail: unknown;
}

declare var PerformanceMark: {
  readonly prototype: PerformanceMark;
  new (markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;
};

/**
 * PerformanceMeasure is an abstract interface for PerformanceEntry objects with
 * an entryType of "measure". Entries of this type are created by calling
 * performance.measure() to add a named DOMHighResTimeStamp (the measure)
 * between two marks to the browser's performance timeline.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
 */
interface PerformanceMeasure extends PerformanceEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)
   */
  readonly detail: unknown;
}

declare var PerformanceMeasure: {
  readonly prototype: PerformanceMeasure;
  new (): PerformanceMeasure;
};

/**
 * The legacy PerformanceNavigation interface represents information about how
 * the navigation to the current document was done.
 *
 * @deprecated This interface is deprecated in the Navigation Timing Level 2
 *   specification. Please use the PerformanceNavigationTiming interface
 *   instead.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation)
 */
interface PerformanceNavigation {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/redirectCount)
   */
  readonly redirectCount: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/type)
   */
  readonly type: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/toJSON)
   */
  toJSON(): unknown;
  readonly TYPE_NAVIGATE: 0;
  readonly TYPE_RELOAD: 1;
  readonly TYPE_BACK_FORWARD: 2;
  readonly TYPE_RESERVED: 255;
}

/** @deprecated */
declare var PerformanceNavigation: {
  readonly prototype: PerformanceNavigation;
  new (): PerformanceNavigation;
  readonly TYPE_NAVIGATE: 0;
  readonly TYPE_RELOAD: 1;
  readonly TYPE_BACK_FORWARD: 2;
  readonly TYPE_RESERVED: 255;
};

/**
 * Provides methods and properties to store and retrieve metrics regarding the
 * browser's document navigation events. For example, this interface can be used
 * to determine how much time it takes to load or unload a document.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)
 */
interface PerformanceNavigationTiming extends PerformanceResourceTiming {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete)
   */
  readonly domComplete: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd)
   */
  readonly domContentLoadedEventEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart)
   */
  readonly domContentLoadedEventStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive)
   */
  readonly domInteractive: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd)
   */
  readonly loadEventEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart)
   */
  readonly loadEventStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount)
   */
  readonly redirectCount: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type)
   */
  readonly type: NavigationTimingType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd)
   */
  readonly unloadEventEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart)
   */
  readonly unloadEventStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/toJSON)
   */
  toJSON(): unknown;
}

declare var PerformanceNavigationTiming: {
  readonly prototype: PerformanceNavigationTiming;
  new (): PerformanceNavigationTiming;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)
 */
interface PerformanceObserver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect)
   */
  disconnect(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe)
   */
  observe(options?: PerformanceObserverInit): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/takeRecords)
   */
  takeRecords(): PerformanceEntryList;
}

declare var PerformanceObserver: {
  readonly prototype: PerformanceObserver;
  new (callback: PerformanceObserverCallback): PerformanceObserver;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes_static)
   */
  readonly supportedEntryTypes: ReadonlyArray<string>;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)
 */
interface PerformanceObserverEntryList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntries)
   */
  getEntries(): PerformanceEntryList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByName)
   */
  getEntriesByName(name: string, type?: string): PerformanceEntryList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByType)
   */
  getEntriesByType(type: string): PerformanceEntryList;
}

declare var PerformanceObserverEntryList: {
  readonly prototype: PerformanceObserverEntryList;
  new (): PerformanceObserverEntryList;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming)
 */
interface PerformancePaintTiming extends PerformanceEntry {}

declare var PerformancePaintTiming: {
  readonly prototype: PerformancePaintTiming;
  new (): PerformancePaintTiming;
};

/**
 * Enables retrieval and analysis of detailed network timing data regarding the
 * loading of an application's resources. An application can use the timing
 * metrics to determine, for example, the length of time it takes to fetch a
 * specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
 */
interface PerformanceResourceTiming extends PerformanceEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)
   */
  readonly connectEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)
   */
  readonly connectStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)
   */
  readonly decodedBodySize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)
   */
  readonly domainLookupEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)
   */
  readonly domainLookupStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)
   */
  readonly encodedBodySize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)
   */
  readonly fetchStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)
   */
  readonly initiatorType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)
   */
  readonly nextHopProtocol: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)
   */
  readonly redirectEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)
   */
  readonly redirectStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)
   */
  readonly requestStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)
   */
  readonly responseEnd: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)
   */
  readonly responseStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)
   */
  readonly secureConnectionStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)
   */
  readonly serverTiming: ReadonlyArray<PerformanceServerTiming>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)
   */
  readonly transferSize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)
   */
  readonly workerStart: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/toJSON)
   */
  toJSON(): unknown;
}

declare var PerformanceResourceTiming: {
  readonly prototype: PerformanceResourceTiming;
  new (): PerformanceResourceTiming;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)
 */
interface PerformanceServerTiming {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)
   */
  readonly description: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)
   */
  readonly duration: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/toJSON)
   */
  toJSON(): unknown;
}

declare var PerformanceServerTiming: {
  readonly prototype: PerformanceServerTiming;
  new (): PerformanceServerTiming;
};

/**
 * A legacy interface kept for backwards compatibility and contains properties
 * that offer performance timing information for various events which occur
 * during the loading and use of the current page. You get a PerformanceTiming
 * object describing your page using the window.performance.timing property.
 *
 * @deprecated This interface is deprecated in the Navigation Timing Level 2
 *   specification. Please use the PerformanceNavigationTiming interface
 *   instead.
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming)
 */
interface PerformanceTiming {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectEnd)
   */
  readonly connectEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectStart)
   */
  readonly connectStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domComplete)
   */
  readonly domComplete: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)
   */
  readonly domContentLoadedEventEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)
   */
  readonly domContentLoadedEventStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domInteractive)
   */
  readonly domInteractive: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domLoading)
   */
  readonly domLoading: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupEnd)
   */
  readonly domainLookupEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupStart)
   */
  readonly domainLookupStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/fetchStart)
   */
  readonly fetchStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventEnd)
   */
  readonly loadEventEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventStart)
   */
  readonly loadEventStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/navigationStart)
   */
  readonly navigationStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectEnd)
   */
  readonly redirectEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectStart)
   */
  readonly redirectStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/requestStart)
   */
  readonly requestStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseEnd)
   */
  readonly responseEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseStart)
   */
  readonly responseStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/secureConnectionStart)
   */
  readonly secureConnectionStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventEnd)
   */
  readonly unloadEventEnd: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventStart)
   */
  readonly unloadEventStart: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/toJSON)
   */
  toJSON(): unknown;
}

/** @deprecated */
declare var PerformanceTiming: {
  readonly prototype: PerformanceTiming;
  new (): PerformanceTiming;
};

/**
 * PeriodicWave has no inputs or outputs; it is used to define custom
 * oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave
 * itself is created/returned by AudioContext.createPeriodicWave().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PeriodicWave)
 */
interface PeriodicWave {}

declare var PeriodicWave: {
  readonly prototype: PeriodicWave;
  new (context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave;
};

interface PermissionStatusEventMap {
  readonly change: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus) */
interface PermissionStatus extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)
   */
  readonly onchange: ((this: PermissionStatus, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)
   */
  readonly state: PermissionState;
  addEventListener<K extends keyof PermissionStatusEventMap>(
    type: K,
    listener: (
      this: PermissionStatus,
      ev: PermissionStatusEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof PermissionStatusEventMap>(
    type: K,
    listener: (
      this: PermissionStatus,
      ev: PermissionStatusEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var PermissionStatus: {
  readonly prototype: PermissionStatus;
  new (): PermissionStatus;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions) */
interface Permissions {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Permissions/query)
   */
  query(permissionDesc: PermissionDescriptor): Promise<PermissionStatus>;
}

declare var Permissions: {
  readonly prototype: Permissions;
  new (): Permissions;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent)
 */
interface PictureInPictureEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow)
   */
  readonly pictureInPictureWindow: PictureInPictureWindow;
}

declare var PictureInPictureEvent: {
  readonly prototype: PictureInPictureEvent;
  new (
    type: string,
    eventInitDict: PictureInPictureEventInit,
  ): PictureInPictureEvent;
};

interface PictureInPictureWindowEventMap {
  readonly resize: Event;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow)
 */
interface PictureInPictureWindow extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height)
   */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event)
   */
  readonly onresize:
    | ((this: PictureInPictureWindow, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width)
   */
  readonly width: number;
  addEventListener<K extends keyof PictureInPictureWindowEventMap>(
    type: K,
    listener: (
      this: PictureInPictureWindow,
      ev: PictureInPictureWindowEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof PictureInPictureWindowEventMap>(
    type: K,
    listener: (
      this: PictureInPictureWindow,
      ev: PictureInPictureWindowEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var PictureInPictureWindow: {
  readonly prototype: PictureInPictureWindow;
  new (): PictureInPictureWindow;
};

/**
 * Provides information about a browser plugin.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Plugin)
 */
interface Plugin {
  /**
   * Returns the plugin's description.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Plugin/description)
   */
  readonly description: string;
  /**
   * Returns the plugin library's filename, if applicable on the current
   * platform.
   *
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Plugin/filename)
   */
  readonly filename: string;
  /**
   * Returns the number of MIME types, represented by MimeType objects,
   * supported by the plugin.
   *
   * @deprecated
   */
  readonly length: number;
  /**
   * Returns the plugin's name.
   *
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Plugin/name)
   */
  readonly name: string;
  /**
   * Returns the specified MimeType object.
   *
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Plugin/item)
   */
  item(index: number): MimeType | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Plugin/namedItem)
   */
  namedItem(name: string): MimeType | null;
  readonly [index: number]: MimeType;
}

/** @deprecated */
declare var Plugin: {
  readonly prototype: Plugin;
  new (): Plugin;
};

/**
 * Used to store a list of Plugin objects describing the available plugins; it's
 * returned by the window.navigator.plugins property. The PluginArray is not a
 * JavaScript array, but has the length property and supports accessing
 * individual items using bracket notation (plugins[2]), as well as via
 * item(index) and namedItem("name") methods.
 *
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/PluginArray)
 */
interface PluginArray {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PluginArray/length)
   */
  readonly length: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PluginArray/item)
   */
  item(index: number): Plugin | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PluginArray/namedItem)
   */
  namedItem(name: string): Plugin | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/PluginArray/refresh)
   */
  refresh(): void;
  readonly [index: number]: Plugin;
}

/** @deprecated */
declare var PluginArray: {
  readonly prototype: PluginArray;
  new (): PluginArray;
};

/**
 * The state of a DOM event produced by a pointer such as the geometry of the
 * contact point, the device type that generated the event, the amount of
 * pressure that was applied on the contact surface, etc.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent)
 */
interface PointerEvent extends MouseEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/height)
   */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary)
   */
  readonly isPrimary: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId)
   */
  readonly pointerId: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType)
   */
  readonly pointerType: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure)
   */
  readonly pressure: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure)
   */
  readonly tangentialPressure: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX)
   */
  readonly tiltX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY)
   */
  readonly tiltY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist)
   */
  readonly twist: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/width)
   */
  readonly width: number;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getCoalescedEvents)
   */
  getCoalescedEvents(): readonly PointerEvent[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getPredictedEvents)
   */
  getPredictedEvents(): readonly PointerEvent[];
}

declare var PointerEvent: {
  readonly prototype: PointerEvent;
  new (type: string, eventInitDict?: PointerEventInit): PointerEvent;
};

/**
 * PopStateEvent is an event handler for the popstate event on the window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent)
 */
interface PopStateEvent extends Event {
  /**
   * Returns a copy of the information that was provided to pushState() or
   * replaceState().
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)
   */
  readonly state: unknown;
}

declare var PopStateEvent: {
  readonly prototype: PopStateEvent;
  new (type: string, eventInitDict?: PopStateEventInit): PopStateEvent;
};

interface PopoverInvokerElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction)
   */
  readonly popoverTargetAction: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement)
   */
  readonly popoverTargetElement: Element | null;
}

/**
 * A processing instruction embeds application-specific instructions in XML
 * which can be ignored by other applications that don't recognize them.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)
 */
interface ProcessingInstruction extends CharacterData, LinkStyle {
  readonly ownerDocument: Document;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target)
   */
  readonly target: string;
}

declare var ProcessingInstruction: {
  readonly prototype: ProcessingInstruction;
  new (): ProcessingInstruction;
};

/**
 * Events measuring progress of an underlying process, like an HTTP request (for
 * an XMLHttpRequest, or the loading of the underlying resource of an <img>,
 * <audio>, <video>, <style> or <link>).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
 */
interface ProgressEvent<T extends EventTarget = EventTarget> extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)
   */
  readonly lengthComputable: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)
   */
  readonly loaded: number;
  readonly target: T | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)
   */
  readonly total: number;
}

declare var ProgressEvent: {
  readonly prototype: ProgressEvent;
  new (type: string, eventInitDict?: ProgressEventInit): ProgressEvent;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)
 */
interface PromiseRejectionEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)
   */
  readonly promise: Promise<unknown>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)
   */
  readonly reason: unknown;
}

declare var PromiseRejectionEvent: {
  readonly prototype: PromiseRejectionEvent;
  new (
    type: string,
    eventInitDict: PromiseRejectionEventInit,
  ): PromiseRejectionEvent;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)
 */
interface PublicKeyCredential extends Credential {
  readonly authenticatorAttachment: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId)
   */
  readonly rawId: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response)
   */
  readonly response: AuthenticatorResponse;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/getClientExtensionResults)
   */
  getClientExtensionResults(): AuthenticationExtensionsClientOutputs;
}

declare var PublicKeyCredential: {
  readonly prototype: PublicKeyCredential;
  new (): PublicKeyCredential;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isConditionalMediationAvailable)
   */
  isConditionalMediationAvailable(): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable_static)
   */
  isUserVerifyingPlatformAuthenticatorAvailable(): Promise<boolean>;
};

/**
 * This Push API interface provides a way to receive notifications from
 * third-party servers as well as request URLs for push notifications. Available
 * only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
 */
interface PushManager {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushManager/getSubscription)
   */
  getSubscription(): Promise<PushSubscription | null>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushManager/permissionState)
   */
  permissionState(
    options?: PushSubscriptionOptionsInit,
  ): Promise<PermissionState>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushManager/subscribe)
   */
  subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;
}

declare var PushManager: {
  readonly prototype: PushManager;
  new (): PushManager;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings_static)
   */
  readonly supportedContentEncodings: ReadonlyArray<string>;
};

/**
 * This Push API interface provides a subcription's URL endpoint and allows
 * unsubscription from a push service. Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
 */
interface PushSubscription {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)
   */
  readonly endpoint: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)
   */
  readonly expirationTime: EpochTimeStamp | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)
   */
  readonly options: PushSubscriptionOptions;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/getKey)
   */
  getKey(name: PushEncryptionKeyName): ArrayBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/toJSON)
   */
  toJSON(): PushSubscriptionJSON;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/unsubscribe)
   */
  unsubscribe(): Promise<boolean>;
}

declare var PushSubscription: {
  readonly prototype: PushSubscription;
  new (): PushSubscription;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
 */
interface PushSubscriptionOptions {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)
   */
  readonly applicationServerKey: ArrayBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)
   */
  readonly userVisibleOnly: boolean;
}

declare var PushSubscriptionOptions: {
  readonly prototype: PushSubscriptionOptions;
  new (): PushSubscriptionOptions;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate) */
interface RTCCertificate {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires)
   */
  readonly expires: EpochTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/getFingerprints)
   */
  getFingerprints(): readonly RTCDtlsFingerprint[];
}

declare var RTCCertificate: {
  readonly prototype: RTCCertificate;
  new (): RTCCertificate;
};

interface RTCDTMFSenderEventMap {
  readonly tonechange: RTCDTMFToneChangeEvent;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender) */
interface RTCDTMFSender extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF)
   */
  readonly canInsertDTMF: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event)
   */
  readonly ontonechange:
    | ((this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer)
   */
  readonly toneBuffer: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/insertDTMF)
   */
  insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
  addEventListener<K extends keyof RTCDTMFSenderEventMap>(
    type: K,
    listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCDTMFSenderEventMap>(
    type: K,
    listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCDTMFSender: {
  readonly prototype: RTCDTMFSender;
  new (): RTCDTMFSender;
};

/**
 * Events sent to indicate that DTMF tones have started or finished playing.
 * This interface is used by the tonechange event.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)
 */
interface RTCDTMFToneChangeEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone)
   */
  readonly tone: string;
}

declare var RTCDTMFToneChangeEvent: {
  readonly prototype: RTCDTMFToneChangeEvent;
  new (
    type: string,
    eventInitDict?: RTCDTMFToneChangeEventInit,
  ): RTCDTMFToneChangeEvent;
};

interface RTCDataChannelEventMap {
  readonly bufferedamountlow: Event;
  readonly close: Event;
  readonly closing: Event;
  readonly error: Event;
  readonly message: MessageEvent;
  readonly open: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel) */
interface RTCDataChannel extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType)
   */
  readonly binaryType: BinaryType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount)
   */
  readonly bufferedAmount: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold)
   */
  readonly bufferedAmountLowThreshold: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id)
   */
  readonly id: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label)
   */
  readonly label: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime)
   */
  readonly maxPacketLifeTime: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits)
   */
  readonly maxRetransmits: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated)
   */
  readonly negotiated: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event)
   */
  readonly onbufferedamountlow:
    | ((this: RTCDataChannel, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event)
   */
  readonly onclose: ((this: RTCDataChannel, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event)
   */
  readonly onclosing: ((this: RTCDataChannel, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event)
   */
  readonly onerror: ((this: RTCDataChannel, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event)
   */
  readonly onmessage:
    | ((this: RTCDataChannel, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event)
   */
  readonly onopen: ((this: RTCDataChannel, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered)
   */
  readonly ordered: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol)
   */
  readonly protocol: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState)
   */
  readonly readyState: RTCDataChannelState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send)
   */
  send(data: string): void;
  send(data: Blob): void;
  send(data: ArrayBuffer): void;
  send(data: ArrayBufferView): void;
  addEventListener<K extends keyof RTCDataChannelEventMap>(
    type: K,
    listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCDataChannelEventMap>(
    type: K,
    listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCDataChannel: {
  readonly prototype: RTCDataChannel;
  new (): RTCDataChannel;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent)
 */
interface RTCDataChannelEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel)
   */
  readonly channel: RTCDataChannel;
}

declare var RTCDataChannelEvent: {
  readonly prototype: RTCDataChannelEvent;
  new (
    type: string,
    eventInitDict: RTCDataChannelEventInit,
  ): RTCDataChannelEvent;
};

interface RTCDtlsTransportEventMap {
  readonly error: Event;
  readonly statechange: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport) */
interface RTCDtlsTransport extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport)
   */
  readonly iceTransport: RTCIceTransport;
  readonly onerror: ((this: RTCDtlsTransport, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/statechange_event)
   */
  readonly onstatechange:
    | ((this: RTCDtlsTransport, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state)
   */
  readonly state: RTCDtlsTransportState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/getRemoteCertificates)
   */
  getRemoteCertificates(): readonly ArrayBuffer[];
  addEventListener<K extends keyof RTCDtlsTransportEventMap>(
    type: K,
    listener: (
      this: RTCDtlsTransport,
      ev: RTCDtlsTransportEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCDtlsTransportEventMap>(
    type: K,
    listener: (
      this: RTCDtlsTransport,
      ev: RTCDtlsTransportEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCDtlsTransport: {
  readonly prototype: RTCDtlsTransport;
  new (): RTCDtlsTransport;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame)
 */
interface RTCEncodedAudioFrame {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data)
   */
  readonly data: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp)
   */
  readonly timestamp: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/getMetadata)
   */
  getMetadata(): RTCEncodedAudioFrameMetadata;
}

declare var RTCEncodedAudioFrame: {
  readonly prototype: RTCEncodedAudioFrame;
  new (): RTCEncodedAudioFrame;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame)
 */
interface RTCEncodedVideoFrame {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data)
   */
  readonly data: ArrayBuffer;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp)
   */
  readonly timestamp: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type)
   */
  readonly type: RTCEncodedVideoFrameType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/getMetadata)
   */
  getMetadata(): RTCEncodedVideoFrameMetadata;
}

declare var RTCEncodedVideoFrame: {
  readonly prototype: RTCEncodedVideoFrame;
  new (): RTCEncodedVideoFrame;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError) */
interface RTCError extends DOMException {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail)
   */
  readonly errorDetail: RTCErrorDetailType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert)
   */
  readonly receivedAlert: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode)
   */
  readonly sctpCauseCode: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber)
   */
  readonly sdpLineNumber: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert)
   */
  readonly sentAlert: number | null;
}

declare var RTCError: {
  readonly prototype: RTCError;
  new (init: RTCErrorInit, message?: string): RTCError;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent) */
interface RTCErrorEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error)
   */
  readonly error: RTCError;
}

declare var RTCErrorEvent: {
  readonly prototype: RTCErrorEvent;
  new (type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent;
};

/**
 * The RTCIceCandidate interface—part of the WebRTC API—represents a candidate
 * Internet Connectivity Establishment (ICE) configuration which may be used to
 * establish an RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)
 */
interface RTCIceCandidate {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address)
   */
  readonly address: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate)
   */
  readonly candidate: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component)
   */
  readonly component: RTCIceComponent | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation)
   */
  readonly foundation: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port)
   */
  readonly port: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority)
   */
  readonly priority: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol)
   */
  readonly protocol: RTCIceProtocol | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress)
   */
  readonly relatedAddress: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort)
   */
  readonly relatedPort: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex)
   */
  readonly sdpMLineIndex: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid)
   */
  readonly sdpMid: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType)
   */
  readonly tcpType: RTCIceTcpCandidateType | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type)
   */
  readonly type: RTCIceCandidateType | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment)
   */
  readonly usernameFragment: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/toJSON)
   */
  toJSON(): RTCIceCandidateInit;
}

declare var RTCIceCandidate: {
  readonly prototype: RTCIceCandidate;
  new (candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate;
};

interface RTCIceTransportEventMap {
  readonly gatheringstatechange: Event;
  readonly selectedcandidatepairchange: Event;
  readonly statechange: Event;
}

/**
 * Provides access to information about the ICE transport layer over which the
 * data is being sent and received.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)
 */
interface RTCIceTransport extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState)
   */
  readonly gatheringState: RTCIceGathererState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event)
   */
  readonly ongatheringstatechange:
    | ((this: RTCIceTransport, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event)
   */
  readonly onselectedcandidatepairchange:
    | ((this: RTCIceTransport, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event)
   */
  readonly onstatechange:
    | ((this: RTCIceTransport, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state)
   */
  readonly state: RTCIceTransportState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/getSelectedCandidatePair)
   */
  getSelectedCandidatePair(): RTCIceCandidatePair | null;
  addEventListener<K extends keyof RTCIceTransportEventMap>(
    type: K,
    listener: (
      this: RTCIceTransport,
      ev: RTCIceTransportEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCIceTransportEventMap>(
    type: K,
    listener: (
      this: RTCIceTransport,
      ev: RTCIceTransportEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCIceTransport: {
  readonly prototype: RTCIceTransport;
  new (): RTCIceTransport;
};

interface RTCPeerConnectionEventMap {
  readonly connectionstatechange: Event;
  readonly datachannel: RTCDataChannelEvent;
  readonly icecandidate: RTCPeerConnectionIceEvent;
  readonly icecandidateerror: RTCPeerConnectionIceErrorEvent;
  readonly iceconnectionstatechange: Event;
  readonly icegatheringstatechange: Event;
  readonly negotiationneeded: Event;
  readonly signalingstatechange: Event;
  readonly track: RTCTrackEvent;
}

/**
 * A WebRTC connection between the local computer and a remote peer. It provides
 * methods to connect to a remote peer, maintain and monitor the connection, and
 * close the connection once it's no longer needed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)
 */
interface RTCPeerConnection extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates)
   */
  readonly canTrickleIceCandidates: boolean | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState)
   */
  readonly connectionState: RTCPeerConnectionState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription)
   */
  readonly currentLocalDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription)
   */
  readonly currentRemoteDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState)
   */
  readonly iceConnectionState: RTCIceConnectionState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState)
   */
  readonly iceGatheringState: RTCIceGatheringState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription)
   */
  readonly localDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event)
   */
  readonly onconnectionstatechange:
    | ((this: RTCPeerConnection, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event)
   */
  readonly ondatachannel:
    | ((this: RTCPeerConnection, ev: RTCDataChannelEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event)
   */
  readonly onicecandidate:
    | ((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event)
   */
  readonly onicecandidateerror:
    | ((this: RTCPeerConnection, ev: RTCPeerConnectionIceErrorEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event)
   */
  readonly oniceconnectionstatechange:
    | ((this: RTCPeerConnection, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event)
   */
  readonly onicegatheringstatechange:
    | ((this: RTCPeerConnection, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event)
   */
  readonly onnegotiationneeded:
    | ((this: RTCPeerConnection, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event)
   */
  readonly onsignalingstatechange:
    | ((this: RTCPeerConnection, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event)
   */
  readonly ontrack:
    | ((this: RTCPeerConnection, ev: RTCTrackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription)
   */
  readonly pendingLocalDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription)
   */
  readonly pendingRemoteDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription)
   */
  readonly remoteDescription: RTCSessionDescription | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp)
   */
  readonly sctp: RTCSctpTransport | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState)
   */
  readonly signalingState: RTCSignalingState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addIceCandidate)
   */
  addIceCandidate(candidate?: RTCIceCandidateInit): Promise<void>;
  /** @deprecated */
  addIceCandidate(
    candidate: RTCIceCandidateInit,
    successCallback: VoidFunction,
    failureCallback: RTCPeerConnectionErrorCallback,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTrack)
   */
  addTrack(
    track: MediaStreamTrack,
    ...streams: readonly MediaStream[]
  ): RTCRtpSender;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTransceiver)
   */
  addTransceiver(
    trackOrKind: MediaStreamTrack | string,
    init?: RTCRtpTransceiverInit,
  ): RTCRtpTransceiver;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createAnswer)
   */
  createAnswer(options?: RTCAnswerOptions): Promise<RTCSessionDescriptionInit>;
  /** @deprecated */
  createAnswer(
    successCallback: RTCSessionDescriptionCallback,
    failureCallback: RTCPeerConnectionErrorCallback,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createDataChannel)
   */
  createDataChannel(
    label: string,
    dataChannelDict?: RTCDataChannelInit,
  ): RTCDataChannel;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createOffer)
   */
  createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
  /** @deprecated */
  createOffer(
    successCallback: RTCSessionDescriptionCallback,
    failureCallback: RTCPeerConnectionErrorCallback,
    options?: RTCOfferOptions,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getConfiguration)
   */
  getConfiguration(): RTCConfiguration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getReceivers)
   */
  getReceivers(): readonly RTCRtpReceiver[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getSenders)
   */
  getSenders(): readonly RTCRtpSender[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getStats)
   */
  getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getTransceivers)
   */
  getTransceivers(): readonly RTCRtpTransceiver[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/removeTrack)
   */
  removeTrack(sender: RTCRtpSender): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/restartIce)
   */
  restartIce(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setConfiguration)
   */
  setConfiguration(configuration?: RTCConfiguration): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setLocalDescription)
   */
  setLocalDescription(
    description?: RTCLocalSessionDescriptionInit,
  ): Promise<void>;
  /** @deprecated */
  setLocalDescription(
    description: RTCLocalSessionDescriptionInit,
    successCallback: VoidFunction,
    failureCallback: RTCPeerConnectionErrorCallback,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setRemoteDescription)
   */
  setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;
  /** @deprecated */
  setRemoteDescription(
    description: RTCSessionDescriptionInit,
    successCallback: VoidFunction,
    failureCallback: RTCPeerConnectionErrorCallback,
  ): Promise<void>;
  addEventListener<K extends keyof RTCPeerConnectionEventMap>(
    type: K,
    listener: (
      this: RTCPeerConnection,
      ev: RTCPeerConnectionEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCPeerConnectionEventMap>(
    type: K,
    listener: (
      this: RTCPeerConnection,
      ev: RTCPeerConnectionEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCPeerConnection: {
  readonly prototype: RTCPeerConnection;
  new (configuration?: RTCConfiguration): RTCPeerConnection;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/generateCertificate_static)
   */
  generateCertificate(
    keygenAlgorithm: AlgorithmIdentifier,
  ): Promise<RTCCertificate>;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent)
 */
interface RTCPeerConnectionIceErrorEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address)
   */
  readonly address: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorCode)
   */
  readonly errorCode: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorText)
   */
  readonly errorText: string;
  readonly port: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/url)
   */
  readonly url: string;
}

declare var RTCPeerConnectionIceErrorEvent: {
  readonly prototype: RTCPeerConnectionIceErrorEvent;
  new (
    type: string,
    eventInitDict: RTCPeerConnectionIceErrorEventInit,
  ): RTCPeerConnectionIceErrorEvent;
};

/**
 * Events that occurs in relation to ICE candidates with the target, usually an
 * RTCPeerConnection. Only one event is of this type: icecandidate.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)
 */
interface RTCPeerConnectionIceEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate)
   */
  readonly candidate: RTCIceCandidate | null;
}

declare var RTCPeerConnectionIceEvent: {
  readonly prototype: RTCPeerConnectionIceEvent;
  new (
    type: string,
    eventInitDict?: RTCPeerConnectionIceEventInit,
  ): RTCPeerConnectionIceEvent;
};

/**
 * This WebRTC API interface manages the reception and decoding of data for a
 * MediaStreamTrack on an RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)
 */
interface RTCRtpReceiver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track)
   */
  readonly track: MediaStreamTrack;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform)
   */
  readonly transform: RTCRtpTransform | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport)
   */
  readonly transport: RTCDtlsTransport | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getContributingSources)
   */
  getContributingSources(): readonly RTCRtpContributingSource[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getParameters)
   */
  getParameters(): RTCRtpReceiveParameters;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getStats)
   */
  getStats(): Promise<RTCStatsReport>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getSynchronizationSources)
   */
  getSynchronizationSources(): readonly RTCRtpSynchronizationSource[];
}

declare var RTCRtpReceiver: {
  readonly prototype: RTCRtpReceiver;
  new (): RTCRtpReceiver;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getCapabilities_static)
   */
  getCapabilities(kind: string): RTCRtpCapabilities | null;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpScriptTransform)
 */
interface RTCRtpScriptTransform {}

declare var RTCRtpScriptTransform: {
  readonly prototype: RTCRtpScriptTransform;
  new (
    worker: Worker,
    options?: unknown,
    transfer?: readonly unknown[],
  ): RTCRtpScriptTransform;
};

/**
 * Provides the ability to control and obtain details about how a particular
 * MediaStreamTrack is encoded and sent to a remote peer.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)
 */
interface RTCRtpSender {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf)
   */
  readonly dtmf: RTCDTMFSender | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track)
   */
  readonly track: MediaStreamTrack | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform)
   */
  readonly transform: RTCRtpTransform | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport)
   */
  readonly transport: RTCDtlsTransport | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getParameters)
   */
  getParameters(): RTCRtpSendParameters;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getStats)
   */
  getStats(): Promise<RTCStatsReport>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/replaceTrack)
   */
  replaceTrack(withTrack: MediaStreamTrack | null): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setParameters)
   */
  setParameters(
    parameters: RTCRtpSendParameters,
    setParameterOptions?: RTCSetParameterOptions,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setStreams)
   */
  setStreams(...streams: readonly MediaStream[]): void;
}

declare var RTCRtpSender: {
  readonly prototype: RTCRtpSender;
  new (): RTCRtpSender;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getCapabilities_static)
   */
  getCapabilities(kind: string): RTCRtpCapabilities | null;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver) */
interface RTCRtpTransceiver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection)
   */
  readonly currentDirection: RTCRtpTransceiverDirection | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction)
   */
  readonly direction: RTCRtpTransceiverDirection;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid)
   */
  readonly mid: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver)
   */
  readonly receiver: RTCRtpReceiver;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender)
   */
  readonly sender: RTCRtpSender;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/setCodecPreferences)
   */
  setCodecPreferences(codecs: readonly RTCRtpCodecCapability[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/stop)
   */
  stop(): void;
}

declare var RTCRtpTransceiver: {
  readonly prototype: RTCRtpTransceiver;
  new (): RTCRtpTransceiver;
};

interface RTCSctpTransportEventMap {
  readonly statechange: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport) */
interface RTCSctpTransport extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels)
   */
  readonly maxChannels: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize)
   */
  readonly maxMessageSize: number;
  readonly onstatechange:
    | ((this: RTCSctpTransport, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state)
   */
  readonly state: RTCSctpTransportState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport)
   */
  readonly transport: RTCDtlsTransport;
  addEventListener<K extends keyof RTCSctpTransportEventMap>(
    type: K,
    listener: (
      this: RTCSctpTransport,
      ev: RTCSctpTransportEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RTCSctpTransportEventMap>(
    type: K,
    listener: (
      this: RTCSctpTransport,
      ev: RTCSctpTransportEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RTCSctpTransport: {
  readonly prototype: RTCSctpTransport;
  new (): RTCSctpTransport;
};

/**
 * One end of a connection—or potential connection—and how it's configured. Each
 * RTCSessionDescription consists of a description type indicating which part of
 * the offer/answer negotiation process it describes and of the SDP descriptor
 * of the session.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)
 */
interface RTCSessionDescription {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp)
   */
  readonly sdp: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type)
   */
  readonly type: RTCSdpType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/toJSON)
   */
  toJSON(): unknown;
}

declare var RTCSessionDescription: {
  readonly prototype: RTCSessionDescription;
  new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCStatsReport) */
interface RTCStatsReport {
  forEach(
    callbackfn: (value: unknown, key: string, parent: RTCStatsReport) => void,
    thisArg?: unknown,
  ): void;
}

declare var RTCStatsReport: {
  readonly prototype: RTCStatsReport;
  new (): RTCStatsReport;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent) */
interface RTCTrackEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver)
   */
  readonly receiver: RTCRtpReceiver;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams)
   */
  readonly streams: ReadonlyArray<MediaStream>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track)
   */
  readonly track: MediaStreamTrack;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver)
   */
  readonly transceiver: RTCRtpTransceiver;
}

declare var RTCTrackEvent: {
  readonly prototype: RTCTrackEvent;
  new (type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList) */
interface RadioNodeList extends NodeList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value)
   */
  readonly value: string;
}

declare var RadioNodeList: {
  readonly prototype: RadioNodeList;
  new (): RadioNodeList;
};

/**
 * A fragment of a document that can contain nodes and parts of text nodes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range)
 */
interface Range extends AbstractRange {
  /**
   * Returns the node, furthest away from the document, that is an ancestor of
   * both range's start node and end node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)
   */
  readonly commonAncestorContainer: Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneContents)
   */
  cloneContents(): DocumentFragment;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneRange)
   */
  cloneRange(): Range;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/collapse)
   */
  collapse(toStart?: boolean): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/compareBoundaryPoints)
   */
  compareBoundaryPoints(how: number, sourceRange: Range): number;
  /**
   * Returns −1 if the point is before the range, 0 if the point is in the
   * range, and 1 if the point is after the range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/comparePoint)
   */
  comparePoint(node: Node, offset: number): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/createContextualFragment)
   */
  createContextualFragment(fragment: string): DocumentFragment;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/deleteContents)
   */
  deleteContents(): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/detach) */
  detach(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/extractContents)
   */
  extractContents(): DocumentFragment;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/getBoundingClientRect)
   */
  getBoundingClientRect(): DOMRect;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/getClientRects)
   */
  getClientRects(): DOMRectList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/insertNode)
   */
  insertNode(node: Node): void;
  /**
   * Returns whether range intersects node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/intersectsNode)
   */
  intersectsNode(node: Node): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/isPointInRange)
   */
  isPointInRange(node: Node, offset: number): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNode)
   */
  selectNode(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNodeContents)
   */
  selectNodeContents(node: Node): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEnd) */
  setEnd(node: Node, offset: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndAfter)
   */
  setEndAfter(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndBefore)
   */
  setEndBefore(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/setStart)
   */
  setStart(node: Node, offset: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartAfter)
   */
  setStartAfter(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartBefore)
   */
  setStartBefore(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Range/surroundContents)
   */
  surroundContents(newParent: Node): void;
  toString(): string;
  readonly START_TO_START: 0;
  readonly START_TO_END: 1;
  readonly END_TO_END: 2;
  readonly END_TO_START: 3;
}

declare var Range: {
  readonly prototype: Range;
  new (): Range;
  readonly START_TO_START: 0;
  readonly START_TO_END: 1;
  readonly END_TO_END: 2;
  readonly END_TO_START: 3;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)
 */
interface ReadableByteStreamController {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)
   */
  readonly byobRequest: ReadableStreamBYOBRequest | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)
   */
  readonly desiredSize: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue)
   */
  enqueue(chunk: ArrayBufferView): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error)
   */
  error(e?: unknown): void;
}

declare var ReadableByteStreamController: {
  readonly prototype: ReadableByteStreamController;
  new (): ReadableByteStreamController;
};

/**
 * This Streams API interface represents a readable stream of byte data. The
 * Fetch API offers a concrete instance of a ReadableStream through the body
 * property of a Response object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
 */
interface ReadableStream<R = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)
   */
  readonly locked: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel)
   */
  cancel(reason?: unknown): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
   */
  getReader(options: { readonly mode: 'byob' }): ReadableStreamBYOBReader;
  getReader(): ReadableStreamDefaultReader<R>;
  getReader(options?: ReadableStreamGetReaderOptions): ReadableStreamReader<R>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough)
   */
  pipeThrough<T>(
    transform: ReadableWritablePair<T, R>,
    options?: StreamPipeOptions,
  ): ReadableStream<T>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo)
   */
  pipeTo(
    destination: WritableStream<R>,
    options?: StreamPipeOptions,
  ): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee)
   */
  tee(): readonly [ReadableStream<R>, ReadableStream<R>];
}

declare var ReadableStream: {
  readonly prototype: ReadableStream;
  new (
    underlyingSource: UnderlyingByteSource,
    strategy?: { readonly highWaterMark?: number },
  ): ReadableStream<Uint8Array>;
  new <R = unknown>(
    underlyingSource: UnderlyingDefaultSource<R>,
    strategy?: QueuingStrategy<R>,
  ): ReadableStream<R>;
  new <R = unknown>(
    underlyingSource?: UnderlyingSource<R>,
    strategy?: QueuingStrategy<R>,
  ): ReadableStream<R>;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)
 */
interface ReadableStreamBYOBReader extends ReadableStreamGenericReader {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read)
   */
  read<T extends ArrayBufferView>(
    view: T,
  ): Promise<ReadableStreamReadResult<T>>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock)
   */
  releaseLock(): void;
}

declare var ReadableStreamBYOBReader: {
  readonly prototype: ReadableStreamBYOBReader;
  new (stream: ReadableStream): ReadableStreamBYOBReader;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)
 */
interface ReadableStreamBYOBRequest {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)
   */
  readonly view: ArrayBufferView | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond)
   */
  respond(bytesWritten: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView)
   */
  respondWithNewView(view: ArrayBufferView): void;
}

declare var ReadableStreamBYOBRequest: {
  readonly prototype: ReadableStreamBYOBRequest;
  new (): ReadableStreamBYOBRequest;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController)
 */
interface ReadableStreamDefaultController<R = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize)
   */
  readonly desiredSize: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue)
   */
  enqueue(chunk?: R): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error)
   */
  error(e?: unknown): void;
}

declare var ReadableStreamDefaultController: {
  readonly prototype: ReadableStreamDefaultController;
  new (): ReadableStreamDefaultController;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader)
 */
interface ReadableStreamDefaultReader<R = unknown>
  extends ReadableStreamGenericReader {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read)
   */
  read(): Promise<ReadableStreamReadResult<R>>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock)
   */
  releaseLock(): void;
}

declare var ReadableStreamDefaultReader: {
  readonly prototype: ReadableStreamDefaultReader;
  new <R = unknown>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;
};

interface ReadableStreamGenericReader {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)
   */
  readonly closed: Promise<undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel)
   */
  cancel(reason?: unknown): Promise<void>;
}

interface RemotePlaybackEventMap {
  readonly connect: Event;
  readonly connecting: Event;
  readonly disconnect: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback) */
interface RemotePlayback extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event)
   */
  readonly onconnect: ((this: RemotePlayback, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event)
   */
  readonly onconnecting: ((this: RemotePlayback, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event)
   */
  readonly ondisconnect: ((this: RemotePlayback, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state)
   */
  readonly state: RemotePlaybackState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/cancelWatchAvailability)
   */
  cancelWatchAvailability(id?: number): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/prompt)
   */
  prompt(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/watchAvailability)
   */
  watchAvailability(
    callback: RemotePlaybackAvailabilityCallback,
  ): Promise<number>;
  addEventListener<K extends keyof RemotePlaybackEventMap>(
    type: K,
    listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof RemotePlaybackEventMap>(
    type: K,
    listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var RemotePlayback: {
  readonly prototype: RemotePlayback;
  new (): RemotePlayback;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report) */
interface Report {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body) */
  readonly body: ReportBody | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type) */
  readonly type: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url) */
  readonly url: string;
  toJSON(): unknown;
}

declare var Report: {
  readonly prototype: Report;
  new (): Report;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody) */
interface ReportBody {
  toJSON(): unknown;
}

declare var ReportBody: {
  readonly prototype: ReportBody;
  new (): ReportBody;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver) */
interface ReportingObserver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/disconnect)
   */
  disconnect(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/observe)
   */
  observe(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/takeRecords)
   */
  takeRecords(): ReportList;
}

declare var ReportingObserver: {
  readonly prototype: ReportingObserver;
  new (
    callback: ReportingObserverCallback,
    options?: ReportingObserverOptions,
  ): ReportingObserver;
};

/**
 * This Fetch API interface represents a resource request.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
 */
interface Request extends Body {
  /**
   * Returns the cache mode associated with request, which is a string
   * indicating how the request will interact with the browser's cache when
   * fetching.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)
   */
  readonly cache: RequestCache;
  /**
   * Returns the credentials mode associated with request, which is a string
   * indicating whether credentials will be sent with the request always,
   * never, or only when sent to a same-origin URL.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)
   */
  readonly credentials: RequestCredentials;
  /**
   * Returns the kind of resource requested by request, e.g., "document" or
   * "script".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)
   */
  readonly destination: RequestDestination;
  /**
   * Returns a Headers object consisting of the headers associated with
   * request. Note that headers added in the network layer by the user agent
   * will not be accounted for in this object, e.g., the "Host" header.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)
   */
  readonly headers: Headers;
  /**
   * Returns request's subresource integrity metadata, which is a
   * cryptographic hash of the resource being fetched. Its value consists of
   * multiple hashes separated by whitespace. [SRI]
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)
   */
  readonly integrity: string;
  /**
   * Returns a boolean indicating whether or not request can outlive the
   * global in which it was created.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
   */
  readonly keepalive: boolean;
  /**
   * Returns request's HTTP method, which is "GET" by default.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/method)
   */
  readonly method: string;
  /**
   * Returns the mode associated with request, which is a string indicating
   * whether the request will use CORS, or will be restricted to same-origin
   * URLs.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)
   */
  readonly mode: RequestMode;
  /**
   * Returns the redirect mode associated with request, which is a string
   * indicating how redirects for the request will be handled during fetching.
   * A request will follow redirects by default.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)
   */
  readonly redirect: RequestRedirect;
  /**
   * Returns the referrer of request. Its value can be a same-origin URL if
   * explicitly set in init, the empty string to indicate no referrer, and
   * "about:client" when defaulting to the global's default. This is used
   * during fetching to determine the value of the `Referer` header of the
   * request being made.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)
   */
  readonly referrer: string;
  /**
   * Returns the referrer policy associated with request. This is used during
   * fetching to compute the value of the request's referrer.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
   */
  readonly referrerPolicy: ReferrerPolicy;
  /**
   * Returns the signal associated with request, which is an AbortSignal
   * object indicating whether or not request has been aborted, and its abort
   * event handler.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)
   */
  readonly signal: AbortSignal;
  /**
   * Returns the URL of request as a string.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)
   */
  readonly url: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/clone) */
  clone(): Request;
}

declare var Request: {
  readonly prototype: Request;
  new (input: RequestInfo | URL, init?: RequestInit): Request;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver) */
interface ResizeObserver {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/disconnect)
   */
  disconnect(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/observe)
   */
  observe(target: Element, options?: ResizeObserverOptions): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/unobserve)
   */
  unobserve(target: Element): void;
}

declare var ResizeObserver: {
  readonly prototype: ResizeObserver;
  new (callback: ResizeObserverCallback): ResizeObserver;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry)
 */
interface ResizeObserverEntry {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize)
   */
  readonly borderBoxSize: ReadonlyArray<ResizeObserverSize>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize)
   */
  readonly contentBoxSize: ReadonlyArray<ResizeObserverSize>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect)
   */
  readonly contentRect: DOMRectReadOnly;
  readonly devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target)
   */
  readonly target: Element;
}

declare var ResizeObserverEntry: {
  readonly prototype: ResizeObserverEntry;
  new (): ResizeObserverEntry;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize)
 */
interface ResizeObserverSize {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize)
   */
  readonly blockSize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize)
   */
  readonly inlineSize: number;
}

declare var ResizeObserverSize: {
  readonly prototype: ResizeObserverSize;
  new (): ResizeObserverSize;
};

/**
 * This Fetch API interface represents the response to a request.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
 */
interface Response extends Body {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)
   */
  readonly headers: Headers;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok) */
  readonly ok: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)
   */
  readonly redirected: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/status)
   */
  readonly status: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)
   */
  readonly statusText: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type) */
  readonly type: ResponseType;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url) */
  readonly url: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/clone)
   */
  clone(): Response;
}

declare var Response: {
  readonly prototype: Response;
  new (body?: BodyInit | null, init?: ResponseInit): Response;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/error_static)
   */
  error(): Response;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/json_static)
   */
  json(data: unknown, init?: ResponseInit): Response;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Response/redirect_static)
   */
  redirect(url: string | URL, status?: number): Response;
};

/**
 * Provides access to the properties of <a> element, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement)
 */
interface SVGAElement extends SVGGraphicsElement, SVGURIReference {
  readonly rel: string;
  readonly relList: DOMTokenList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/target)
   */
  readonly target: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGAElement: {
  readonly prototype: SVGAElement;
  new (): SVGAElement;
};

/**
 * Used to represent a value that can be an <angle> or <number> value. An
 * SVGAngle reflected through the animVal attribute is always read only.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle)
 */
interface SVGAngle {
  readonly unitType: number;
  readonly value: number;
  readonly valueAsString: string;
  readonly valueInSpecifiedUnits: number;
  convertToSpecifiedUnits(unitType: number): void;
  newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
  readonly SVG_ANGLETYPE_UNKNOWN: 0;
  readonly SVG_ANGLETYPE_UNSPECIFIED: 1;
  readonly SVG_ANGLETYPE_DEG: 2;
  readonly SVG_ANGLETYPE_RAD: 3;
  readonly SVG_ANGLETYPE_GRAD: 4;
}

declare var SVGAngle: {
  readonly prototype: SVGAngle;
  new (): SVGAngle;
  readonly SVG_ANGLETYPE_UNKNOWN: 0;
  readonly SVG_ANGLETYPE_UNSPECIFIED: 1;
  readonly SVG_ANGLETYPE_DEG: 2;
  readonly SVG_ANGLETYPE_RAD: 3;
  readonly SVG_ANGLETYPE_GRAD: 4;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement) */
interface SVGAnimateElement extends SVGAnimationElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGAnimateElement: {
  readonly prototype: SVGAnimateElement;
  new (): SVGAnimateElement;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement)
 */
interface SVGAnimateMotionElement extends SVGAnimationElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGAnimateMotionElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGAnimateMotionElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGAnimateMotionElement: {
  readonly prototype: SVGAnimateMotionElement;
  new (): SVGAnimateMotionElement;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement)
 */
interface SVGAnimateTransformElement extends SVGAnimationElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGAnimateTransformElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGAnimateTransformElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGAnimateTransformElement: {
  readonly prototype: SVGAnimateTransformElement;
  new (): SVGAnimateTransformElement;
};

/**
 * Used for attributes of basic type <angle> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)
 */
interface SVGAnimatedAngle {
  readonly animVal: SVGAngle;
  readonly baseVal: SVGAngle;
}

declare var SVGAnimatedAngle: {
  readonly prototype: SVGAnimatedAngle;
  new (): SVGAnimatedAngle;
};

/**
 * Used for attributes of type boolean which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)
 */
interface SVGAnimatedBoolean {
  readonly animVal: boolean;
  readonly baseVal: boolean;
}

declare var SVGAnimatedBoolean: {
  readonly prototype: SVGAnimatedBoolean;
  new (): SVGAnimatedBoolean;
};

/**
 * Used for attributes whose value must be a constant from a particular
 * enumeration and which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)
 */
interface SVGAnimatedEnumeration {
  readonly animVal: number;
  readonly baseVal: number;
}

declare var SVGAnimatedEnumeration: {
  readonly prototype: SVGAnimatedEnumeration;
  new (): SVGAnimatedEnumeration;
};

/**
 * Used for attributes of basic type <integer> which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)
 */
interface SVGAnimatedInteger {
  readonly animVal: number;
  readonly baseVal: number;
}

declare var SVGAnimatedInteger: {
  readonly prototype: SVGAnimatedInteger;
  new (): SVGAnimatedInteger;
};

/**
 * Used for attributes of basic type <length> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)
 */
interface SVGAnimatedLength {
  readonly animVal: SVGLength;
  readonly baseVal: SVGLength;
}

declare var SVGAnimatedLength: {
  readonly prototype: SVGAnimatedLength;
  new (): SVGAnimatedLength;
};

/**
 * Used for attributes of type SVGLengthList which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)
 */
interface SVGAnimatedLengthList {
  readonly animVal: SVGLengthList;
  readonly baseVal: SVGLengthList;
}

declare var SVGAnimatedLengthList: {
  readonly prototype: SVGAnimatedLengthList;
  new (): SVGAnimatedLengthList;
};

/**
 * Used for attributes of basic type <Number> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)
 */
interface SVGAnimatedNumber {
  readonly animVal: number;
  readonly baseVal: number;
}

declare var SVGAnimatedNumber: {
  readonly prototype: SVGAnimatedNumber;
  new (): SVGAnimatedNumber;
};

/**
 * The SVGAnimatedNumber interface is used for attributes which take a list of
 * numbers and which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)
 */
interface SVGAnimatedNumberList {
  readonly animVal: SVGNumberList;
  readonly baseVal: SVGNumberList;
}

declare var SVGAnimatedNumberList: {
  readonly prototype: SVGAnimatedNumberList;
  new (): SVGAnimatedNumberList;
};

interface SVGAnimatedPoints {
  readonly animatedPoints: SVGPointList;
  readonly points: SVGPointList;
}

/**
 * Used for attributes of type SVGPreserveAspectRatio which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)
 */
interface SVGAnimatedPreserveAspectRatio {
  readonly animVal: SVGPreserveAspectRatio;
  readonly baseVal: SVGPreserveAspectRatio;
}

declare var SVGAnimatedPreserveAspectRatio: {
  readonly prototype: SVGAnimatedPreserveAspectRatio;
  new (): SVGAnimatedPreserveAspectRatio;
};

/**
 * Used for attributes of basic SVGRect which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)
 */
interface SVGAnimatedRect {
  readonly animVal: DOMRectReadOnly;
  readonly baseVal: DOMRect;
}

declare var SVGAnimatedRect: {
  readonly prototype: SVGAnimatedRect;
  new (): SVGAnimatedRect;
};

/**
 * The SVGAnimatedString interface represents string attributes which can be
 * animated from each SVG declaration. You need to create SVG attribute before
 * doing anything else, everything should be declared inside this.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)
 */
interface SVGAnimatedString {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal)
   */
  readonly animVal: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal)
   */
  readonly baseVal: string;
}

declare var SVGAnimatedString: {
  readonly prototype: SVGAnimatedString;
  new (): SVGAnimatedString;
};

/**
 * Used for attributes which take a list of numbers and which can be animated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)
 */
interface SVGAnimatedTransformList {
  readonly animVal: SVGTransformList;
  readonly baseVal: SVGTransformList;
}

declare var SVGAnimatedTransformList: {
  readonly prototype: SVGAnimatedTransformList;
  new (): SVGAnimatedTransformList;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement)
 */
interface SVGAnimationElement extends SVGElement, SVGTests {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement)
   */
  readonly targetElement: SVGElement | null;
  beginElement(): void;
  beginElementAt(offset: number): void;
  endElement(): void;
  endElementAt(offset: number): void;
  getCurrentTime(): number;
  getSimpleDuration(): number;
  getStartTime(): number;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGAnimationElement: {
  readonly prototype: SVGAnimationElement;
  new (): SVGAnimationElement;
};

/**
 * An interface for the <circle> element. The circle element is defined by the
 * cx and cy attributes that denote the coordinates of the centre of the
 * circle.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)
 */
interface SVGCircleElement extends SVGGeometryElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx)
   */
  readonly cx: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy)
   */
  readonly cy: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r)
   */
  readonly r: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGCircleElement: {
  readonly prototype: SVGCircleElement;
  new (): SVGCircleElement;
};

/**
 * Provides access to the properties of <clipPath> elements, as well as methods
 * to manipulate them.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)
 */
interface SVGClipPathElement extends SVGElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits)
   */
  readonly clipPathUnits: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform)
   */
  readonly transform: SVGAnimatedTransformList;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGClipPathElement: {
  readonly prototype: SVGClipPathElement;
  new (): SVGClipPathElement;
};

/**
 * A base interface used by the component transfer function interfaces.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)
 */
interface SVGComponentTransferFunctionElement extends SVGElement {
  readonly amplitude: SVGAnimatedNumber;
  readonly exponent: SVGAnimatedNumber;
  readonly intercept: SVGAnimatedNumber;
  readonly offset: SVGAnimatedNumber;
  readonly slope: SVGAnimatedNumber;
  readonly tableValues: SVGAnimatedNumberList;
  readonly type: SVGAnimatedEnumeration;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGComponentTransferFunctionElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGComponentTransferFunctionElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGComponentTransferFunctionElement: {
  readonly prototype: SVGComponentTransferFunctionElement;
  new (): SVGComponentTransferFunctionElement;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4;
  readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5;
};

/**
 * Corresponds to the <defs> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)
 */
interface SVGDefsElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGDefsElement: {
  readonly prototype: SVGDefsElement;
  new (): SVGDefsElement;
};

/**
 * Corresponds to the <desc> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDescElement)
 */
interface SVGDescElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGDescElement: {
  readonly prototype: SVGDescElement;
  new (): SVGDescElement;
};

interface SVGElementEventMap
  extends ElementEventMap,
    GlobalEventHandlersEventMap {}

/**
 * All of the SVG DOM interfaces that correspond directly to elements in the SVG
 * language derive from the SVGElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement)
 */
interface SVGElement
  extends Element,
    ElementCSSInlineStyle,
    GlobalEventHandlers,
    HTMLOrSVGElement {
  /** @deprecated */
  readonly className: unknown;
  readonly ownerSVGElement: SVGSVGElement | null;
  readonly viewportElement: SVGElement | null;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGElement: {
  readonly prototype: SVGElement;
  new (): SVGElement;
};

/**
 * Provides access to the properties of <ellipse> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)
 */
interface SVGEllipseElement extends SVGGeometryElement {
  readonly cx: SVGAnimatedLength;
  readonly cy: SVGAnimatedLength;
  readonly rx: SVGAnimatedLength;
  readonly ry: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGEllipseElement: {
  readonly prototype: SVGEllipseElement;
  new (): SVGEllipseElement;
};

/**
 * Corresponds to the <feBlend> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)
 */
interface SVGFEBlendElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly mode: SVGAnimatedEnumeration;
  readonly SVG_FEBLEND_MODE_UNKNOWN: 0;
  readonly SVG_FEBLEND_MODE_NORMAL: 1;
  readonly SVG_FEBLEND_MODE_MULTIPLY: 2;
  readonly SVG_FEBLEND_MODE_SCREEN: 3;
  readonly SVG_FEBLEND_MODE_DARKEN: 4;
  readonly SVG_FEBLEND_MODE_LIGHTEN: 5;
  readonly SVG_FEBLEND_MODE_OVERLAY: 6;
  readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7;
  readonly SVG_FEBLEND_MODE_COLOR_BURN: 8;
  readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9;
  readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10;
  readonly SVG_FEBLEND_MODE_DIFFERENCE: 11;
  readonly SVG_FEBLEND_MODE_EXCLUSION: 12;
  readonly SVG_FEBLEND_MODE_HUE: 13;
  readonly SVG_FEBLEND_MODE_SATURATION: 14;
  readonly SVG_FEBLEND_MODE_COLOR: 15;
  readonly SVG_FEBLEND_MODE_LUMINOSITY: 16;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEBlendElement: {
  readonly prototype: SVGFEBlendElement;
  new (): SVGFEBlendElement;
  readonly SVG_FEBLEND_MODE_UNKNOWN: 0;
  readonly SVG_FEBLEND_MODE_NORMAL: 1;
  readonly SVG_FEBLEND_MODE_MULTIPLY: 2;
  readonly SVG_FEBLEND_MODE_SCREEN: 3;
  readonly SVG_FEBLEND_MODE_DARKEN: 4;
  readonly SVG_FEBLEND_MODE_LIGHTEN: 5;
  readonly SVG_FEBLEND_MODE_OVERLAY: 6;
  readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7;
  readonly SVG_FEBLEND_MODE_COLOR_BURN: 8;
  readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9;
  readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10;
  readonly SVG_FEBLEND_MODE_DIFFERENCE: 11;
  readonly SVG_FEBLEND_MODE_EXCLUSION: 12;
  readonly SVG_FEBLEND_MODE_HUE: 13;
  readonly SVG_FEBLEND_MODE_SATURATION: 14;
  readonly SVG_FEBLEND_MODE_COLOR: 15;
  readonly SVG_FEBLEND_MODE_LUMINOSITY: 16;
};

/**
 * Corresponds to the <feColorMatrix> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)
 */
interface SVGFEColorMatrixElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1)
   */
  readonly in1: SVGAnimatedString;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type)
   */
  readonly type: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values)
   */
  readonly values: SVGAnimatedNumberList;
  readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0;
  readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1;
  readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2;
  readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3;
  readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEColorMatrixElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEColorMatrixElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEColorMatrixElement: {
  readonly prototype: SVGFEColorMatrixElement;
  new (): SVGFEColorMatrixElement;
  readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0;
  readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1;
  readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2;
  readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3;
  readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4;
};

/**
 * Corresponds to the <feComponentTransfer> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)
 */
interface SVGFEComponentTransferElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEComponentTransferElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEComponentTransferElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEComponentTransferElement: {
  readonly prototype: SVGFEComponentTransferElement;
  new (): SVGFEComponentTransferElement;
};

/**
 * Corresponds to the <feComposite> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)
 */
interface SVGFECompositeElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly k1: SVGAnimatedNumber;
  readonly k2: SVGAnimatedNumber;
  readonly k3: SVGAnimatedNumber;
  readonly k4: SVGAnimatedNumber;
  readonly operator: SVGAnimatedEnumeration;
  readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0;
  readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1;
  readonly SVG_FECOMPOSITE_OPERATOR_IN: 2;
  readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3;
  readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4;
  readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5;
  readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFECompositeElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFECompositeElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFECompositeElement: {
  readonly prototype: SVGFECompositeElement;
  new (): SVGFECompositeElement;
  readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0;
  readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1;
  readonly SVG_FECOMPOSITE_OPERATOR_IN: 2;
  readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3;
  readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4;
  readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5;
  readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6;
};

/**
 * Corresponds to the <feConvolveMatrix> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)
 */
interface SVGFEConvolveMatrixElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly bias: SVGAnimatedNumber;
  readonly divisor: SVGAnimatedNumber;
  readonly edgeMode: SVGAnimatedEnumeration;
  readonly in1: SVGAnimatedString;
  readonly kernelMatrix: SVGAnimatedNumberList;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly orderX: SVGAnimatedInteger;
  readonly orderY: SVGAnimatedInteger;
  readonly preserveAlpha: SVGAnimatedBoolean;
  readonly targetX: SVGAnimatedInteger;
  readonly targetY: SVGAnimatedInteger;
  readonly SVG_EDGEMODE_UNKNOWN: 0;
  readonly SVG_EDGEMODE_DUPLICATE: 1;
  readonly SVG_EDGEMODE_WRAP: 2;
  readonly SVG_EDGEMODE_NONE: 3;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEConvolveMatrixElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEConvolveMatrixElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEConvolveMatrixElement: {
  readonly prototype: SVGFEConvolveMatrixElement;
  new (): SVGFEConvolveMatrixElement;
  readonly SVG_EDGEMODE_UNKNOWN: 0;
  readonly SVG_EDGEMODE_DUPLICATE: 1;
  readonly SVG_EDGEMODE_WRAP: 2;
  readonly SVG_EDGEMODE_NONE: 3;
};

/**
 * Corresponds to the <feDiffuseLighting> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)
 */
interface SVGFEDiffuseLightingElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly diffuseConstant: SVGAnimatedNumber;
  readonly in1: SVGAnimatedString;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly surfaceScale: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDiffuseLightingElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDiffuseLightingElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEDiffuseLightingElement: {
  readonly prototype: SVGFEDiffuseLightingElement;
  new (): SVGFEDiffuseLightingElement;
};

/**
 * Corresponds to the <feDisplacementMap> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)
 */
interface SVGFEDisplacementMapElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly in2: SVGAnimatedString;
  readonly scale: SVGAnimatedNumber;
  readonly xChannelSelector: SVGAnimatedEnumeration;
  readonly yChannelSelector: SVGAnimatedEnumeration;
  readonly SVG_CHANNEL_UNKNOWN: 0;
  readonly SVG_CHANNEL_R: 1;
  readonly SVG_CHANNEL_G: 2;
  readonly SVG_CHANNEL_B: 3;
  readonly SVG_CHANNEL_A: 4;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDisplacementMapElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDisplacementMapElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEDisplacementMapElement: {
  readonly prototype: SVGFEDisplacementMapElement;
  new (): SVGFEDisplacementMapElement;
  readonly SVG_CHANNEL_UNKNOWN: 0;
  readonly SVG_CHANNEL_R: 1;
  readonly SVG_CHANNEL_G: 2;
  readonly SVG_CHANNEL_B: 3;
  readonly SVG_CHANNEL_A: 4;
};

/**
 * Corresponds to the <feDistantLight> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)
 */
interface SVGFEDistantLightElement extends SVGElement {
  readonly azimuth: SVGAnimatedNumber;
  readonly elevation: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDistantLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDistantLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEDistantLightElement: {
  readonly prototype: SVGFEDistantLightElement;
  new (): SVGFEDistantLightElement;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement)
 */
interface SVGFEDropShadowElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly dx: SVGAnimatedNumber;
  readonly dy: SVGAnimatedNumber;
  readonly in1: SVGAnimatedString;
  readonly stdDeviationX: SVGAnimatedNumber;
  readonly stdDeviationY: SVGAnimatedNumber;
  setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDropShadowElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEDropShadowElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEDropShadowElement: {
  readonly prototype: SVGFEDropShadowElement;
  new (): SVGFEDropShadowElement;
};

/**
 * Corresponds to the <feFlood> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)
 */
interface SVGFEFloodElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEFloodElement: {
  readonly prototype: SVGFEFloodElement;
  new (): SVGFEFloodElement;
};

/**
 * Corresponds to the <feFuncA> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)
 */
interface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEFuncAElement: {
  readonly prototype: SVGFEFuncAElement;
  new (): SVGFEFuncAElement;
};

/**
 * Corresponds to the <feFuncB> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)
 */
interface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEFuncBElement: {
  readonly prototype: SVGFEFuncBElement;
  new (): SVGFEFuncBElement;
};

/**
 * Corresponds to the <feFuncG> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)
 */
interface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEFuncGElement: {
  readonly prototype: SVGFEFuncGElement;
  new (): SVGFEFuncGElement;
};

/**
 * Corresponds to the <feFuncR> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)
 */
interface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEFuncRElement: {
  readonly prototype: SVGFEFuncRElement;
  new (): SVGFEFuncRElement;
};

/**
 * Corresponds to the <feGaussianBlur> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)
 */
interface SVGFEGaussianBlurElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly stdDeviationX: SVGAnimatedNumber;
  readonly stdDeviationY: SVGAnimatedNumber;
  setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEGaussianBlurElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEGaussianBlurElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEGaussianBlurElement: {
  readonly prototype: SVGFEGaussianBlurElement;
  new (): SVGFEGaussianBlurElement;
};

/**
 * Corresponds to the <feImage> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)
 */
interface SVGFEImageElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes,
    SVGURIReference {
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEImageElement: {
  readonly prototype: SVGFEImageElement;
  new (): SVGFEImageElement;
};

/**
 * Corresponds to the <feMerge> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)
 */
interface SVGFEMergeElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEMergeElement: {
  readonly prototype: SVGFEMergeElement;
  new (): SVGFEMergeElement;
};

/**
 * Corresponds to the <feMergeNode> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)
 */
interface SVGFEMergeNodeElement extends SVGElement {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEMergeNodeElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEMergeNodeElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEMergeNodeElement: {
  readonly prototype: SVGFEMergeNodeElement;
  new (): SVGFEMergeNodeElement;
};

/**
 * Corresponds to the <feMorphology> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)
 */
interface SVGFEMorphologyElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly operator: SVGAnimatedEnumeration;
  readonly radiusX: SVGAnimatedNumber;
  readonly radiusY: SVGAnimatedNumber;
  readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0;
  readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1;
  readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEMorphologyElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEMorphologyElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEMorphologyElement: {
  readonly prototype: SVGFEMorphologyElement;
  new (): SVGFEMorphologyElement;
  readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0;
  readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1;
  readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2;
};

/**
 * Corresponds to the <feOffset> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)
 */
interface SVGFEOffsetElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly dx: SVGAnimatedNumber;
  readonly dy: SVGAnimatedNumber;
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEOffsetElement: {
  readonly prototype: SVGFEOffsetElement;
  new (): SVGFEOffsetElement;
};

/**
 * Corresponds to the <fePointLight> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)
 */
interface SVGFEPointLightElement extends SVGElement {
  readonly x: SVGAnimatedNumber;
  readonly y: SVGAnimatedNumber;
  readonly z: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEPointLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFEPointLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFEPointLightElement: {
  readonly prototype: SVGFEPointLightElement;
  new (): SVGFEPointLightElement;
};

/**
 * Corresponds to the <feSpecularLighting> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)
 */
interface SVGFESpecularLightingElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  readonly kernelUnitLengthX: SVGAnimatedNumber;
  readonly kernelUnitLengthY: SVGAnimatedNumber;
  readonly specularConstant: SVGAnimatedNumber;
  readonly specularExponent: SVGAnimatedNumber;
  readonly surfaceScale: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFESpecularLightingElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFESpecularLightingElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFESpecularLightingElement: {
  readonly prototype: SVGFESpecularLightingElement;
  new (): SVGFESpecularLightingElement;
};

/**
 * Corresponds to the <feSpotLight> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)
 */
interface SVGFESpotLightElement extends SVGElement {
  readonly limitingConeAngle: SVGAnimatedNumber;
  readonly pointsAtX: SVGAnimatedNumber;
  readonly pointsAtY: SVGAnimatedNumber;
  readonly pointsAtZ: SVGAnimatedNumber;
  readonly specularExponent: SVGAnimatedNumber;
  readonly x: SVGAnimatedNumber;
  readonly y: SVGAnimatedNumber;
  readonly z: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFESpotLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFESpotLightElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFESpotLightElement: {
  readonly prototype: SVGFESpotLightElement;
  new (): SVGFESpotLightElement;
};

/**
 * Corresponds to the <feTile> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)
 */
interface SVGFETileElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly in1: SVGAnimatedString;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFETileElement: {
  readonly prototype: SVGFETileElement;
  new (): SVGFETileElement;
};

/**
 * Corresponds to the <feTurbulence> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)
 */
interface SVGFETurbulenceElement
  extends SVGElement,
    SVGFilterPrimitiveStandardAttributes {
  readonly baseFrequencyX: SVGAnimatedNumber;
  readonly baseFrequencyY: SVGAnimatedNumber;
  readonly numOctaves: SVGAnimatedInteger;
  readonly seed: SVGAnimatedNumber;
  readonly stitchTiles: SVGAnimatedEnumeration;
  readonly type: SVGAnimatedEnumeration;
  readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0;
  readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1;
  readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2;
  readonly SVG_STITCHTYPE_UNKNOWN: 0;
  readonly SVG_STITCHTYPE_STITCH: 1;
  readonly SVG_STITCHTYPE_NOSTITCH: 2;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFETurbulenceElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGFETurbulenceElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFETurbulenceElement: {
  readonly prototype: SVGFETurbulenceElement;
  new (): SVGFETurbulenceElement;
  readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0;
  readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1;
  readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2;
  readonly SVG_STITCHTYPE_UNKNOWN: 0;
  readonly SVG_STITCHTYPE_STITCH: 1;
  readonly SVG_STITCHTYPE_NOSTITCH: 2;
};

/**
 * Provides access to the properties of <filter> elements, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)
 */
interface SVGFilterElement extends SVGElement, SVGURIReference {
  readonly filterUnits: SVGAnimatedEnumeration;
  readonly height: SVGAnimatedLength;
  readonly primitiveUnits: SVGAnimatedEnumeration;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGFilterElement: {
  readonly prototype: SVGFilterElement;
  new (): SVGFilterElement;
};

interface SVGFilterPrimitiveStandardAttributes {
  readonly height: SVGAnimatedLength;
  readonly result: SVGAnimatedString;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
}

interface SVGFitToViewBox {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio)
   */
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox)
   */
  readonly viewBox: SVGAnimatedRect;
}

/**
 * Provides access to the properties of <foreignObject> elements, as well as
 * methods to manipulate them.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)
 */
interface SVGForeignObjectElement extends SVGGraphicsElement {
  readonly height: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGForeignObjectElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGForeignObjectElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGForeignObjectElement: {
  readonly prototype: SVGForeignObjectElement;
  new (): SVGForeignObjectElement;
};

/**
 * Corresponds to the <g> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGElement)
 */
interface SVGGElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGGElement: {
  readonly prototype: SVGGElement;
  new (): SVGGElement;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement)
 */
interface SVGGeometryElement extends SVGGraphicsElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength)
   */
  readonly pathLength: SVGAnimatedNumber;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getPointAtLength)
   */
  getPointAtLength(distance: number): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getTotalLength)
   */
  getTotalLength(): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInFill)
   */
  isPointInFill(point?: DOMPointInit): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInStroke)
   */
  isPointInStroke(point?: DOMPointInit): boolean;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGGeometryElement: {
  readonly prototype: SVGGeometryElement;
  new (): SVGGeometryElement;
};

/**
 * The SVGGradient interface is a base interface used by
 * SVGLinearGradientElement and SVGRadialGradientElement.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)
 */
interface SVGGradientElement extends SVGElement, SVGURIReference {
  readonly gradientTransform: SVGAnimatedTransformList;
  readonly gradientUnits: SVGAnimatedEnumeration;
  readonly spreadMethod: SVGAnimatedEnumeration;
  readonly SVG_SPREADMETHOD_UNKNOWN: 0;
  readonly SVG_SPREADMETHOD_PAD: 1;
  readonly SVG_SPREADMETHOD_REFLECT: 2;
  readonly SVG_SPREADMETHOD_REPEAT: 3;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGGradientElement: {
  readonly prototype: SVGGradientElement;
  new (): SVGGradientElement;
  readonly SVG_SPREADMETHOD_UNKNOWN: 0;
  readonly SVG_SPREADMETHOD_PAD: 1;
  readonly SVG_SPREADMETHOD_REFLECT: 2;
  readonly SVG_SPREADMETHOD_REPEAT: 3;
};

/**
 * SVG elements whose primary purpose is to directly render graphics into a
 * group.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)
 */
interface SVGGraphicsElement extends SVGElement, SVGTests {
  readonly transform: SVGAnimatedTransformList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getBBox)
   */
  getBBox(options?: SVGBoundingBoxOptions): DOMRect;
  getCTM(): DOMMatrix | null;
  getScreenCTM(): DOMMatrix | null;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGGraphicsElement: {
  readonly prototype: SVGGraphicsElement;
  new (): SVGGraphicsElement;
};

/**
 * Corresponds to the <image> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement)
 */
interface SVGImageElement extends SVGGraphicsElement, SVGURIReference {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossorigin)
   */
  readonly crossOrigin: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height)
   */
  readonly height: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio)
   */
  readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width)
   */
  readonly width: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x)
   */
  readonly x: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y)
   */
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGImageElement: {
  readonly prototype: SVGImageElement;
  new (): SVGImageElement;
};

/**
 * Correspond to the <length> basic data type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength)
 */
interface SVGLength {
  readonly unitType: number;
  readonly value: number;
  readonly valueAsString: string;
  readonly valueInSpecifiedUnits: number;
  convertToSpecifiedUnits(unitType: number): void;
  newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
  readonly SVG_LENGTHTYPE_UNKNOWN: 0;
  readonly SVG_LENGTHTYPE_NUMBER: 1;
  readonly SVG_LENGTHTYPE_PERCENTAGE: 2;
  readonly SVG_LENGTHTYPE_EMS: 3;
  readonly SVG_LENGTHTYPE_EXS: 4;
  readonly SVG_LENGTHTYPE_PX: 5;
  readonly SVG_LENGTHTYPE_CM: 6;
  readonly SVG_LENGTHTYPE_MM: 7;
  readonly SVG_LENGTHTYPE_IN: 8;
  readonly SVG_LENGTHTYPE_PT: 9;
  readonly SVG_LENGTHTYPE_PC: 10;
}

declare var SVGLength: {
  readonly prototype: SVGLength;
  new (): SVGLength;
  readonly SVG_LENGTHTYPE_UNKNOWN: 0;
  readonly SVG_LENGTHTYPE_NUMBER: 1;
  readonly SVG_LENGTHTYPE_PERCENTAGE: 2;
  readonly SVG_LENGTHTYPE_EMS: 3;
  readonly SVG_LENGTHTYPE_EXS: 4;
  readonly SVG_LENGTHTYPE_PX: 5;
  readonly SVG_LENGTHTYPE_CM: 6;
  readonly SVG_LENGTHTYPE_MM: 7;
  readonly SVG_LENGTHTYPE_IN: 8;
  readonly SVG_LENGTHTYPE_PT: 9;
  readonly SVG_LENGTHTYPE_PC: 10;
};

/**
 * The SVGLengthList defines a list of SVGLength objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList)
 */
interface SVGLengthList {
  readonly length: number;
  readonly numberOfItems: number;
  appendItem(newItem: SVGLength): SVGLength;
  clear(): void;
  getItem(index: number): SVGLength;
  initialize(newItem: SVGLength): SVGLength;
  insertItemBefore(newItem: SVGLength, index: number): SVGLength;
  removeItem(index: number): SVGLength;
  replaceItem(newItem: SVGLength, index: number): SVGLength;
  readonly [index: number]: SVGLength;
}

declare var SVGLengthList: {
  readonly prototype: SVGLengthList;
  new (): SVGLengthList;
};

/**
 * Provides access to the properties of <line> elements, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement)
 */
interface SVGLineElement extends SVGGeometryElement {
  readonly x1: SVGAnimatedLength;
  readonly x2: SVGAnimatedLength;
  readonly y1: SVGAnimatedLength;
  readonly y2: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGLineElement: {
  readonly prototype: SVGLineElement;
  new (): SVGLineElement;
};

/**
 * Corresponds to the <linearGradient> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)
 */
interface SVGLinearGradientElement extends SVGGradientElement {
  readonly x1: SVGAnimatedLength;
  readonly x2: SVGAnimatedLength;
  readonly y1: SVGAnimatedLength;
  readonly y2: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGLinearGradientElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGLinearGradientElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGLinearGradientElement: {
  readonly prototype: SVGLinearGradientElement;
  new (): SVGLinearGradientElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMPathElement) */
interface SVGMPathElement extends SVGElement, SVGURIReference {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGMPathElement: {
  readonly prototype: SVGMPathElement;
  new (): SVGMPathElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement) */
interface SVGMarkerElement extends SVGElement, SVGFitToViewBox {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight)
   */
  readonly markerHeight: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits)
   */
  readonly markerUnits: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth)
   */
  readonly markerWidth: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle)
   */
  readonly orientAngle: SVGAnimatedAngle;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType)
   */
  readonly orientType: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX)
   */
  readonly refX: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY)
   */
  readonly refY: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAngle)
   */
  setOrientToAngle(angle: SVGAngle): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAuto)
   */
  setOrientToAuto(): void;
  readonly SVG_MARKERUNITS_UNKNOWN: 0;
  readonly SVG_MARKERUNITS_USERSPACEONUSE: 1;
  readonly SVG_MARKERUNITS_STROKEWIDTH: 2;
  readonly SVG_MARKER_ORIENT_UNKNOWN: 0;
  readonly SVG_MARKER_ORIENT_AUTO: 1;
  readonly SVG_MARKER_ORIENT_ANGLE: 2;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGMarkerElement: {
  readonly prototype: SVGMarkerElement;
  new (): SVGMarkerElement;
  readonly SVG_MARKERUNITS_UNKNOWN: 0;
  readonly SVG_MARKERUNITS_USERSPACEONUSE: 1;
  readonly SVG_MARKERUNITS_STROKEWIDTH: 2;
  readonly SVG_MARKER_ORIENT_UNKNOWN: 0;
  readonly SVG_MARKER_ORIENT_AUTO: 1;
  readonly SVG_MARKER_ORIENT_ANGLE: 2;
};

/**
 * Provides access to the properties of <mask> elements, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)
 */
interface SVGMaskElement extends SVGElement {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height)
   */
  readonly height: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits)
   */
  readonly maskContentUnits: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits)
   */
  readonly maskUnits: SVGAnimatedEnumeration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width)
   */
  readonly width: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x)
   */
  readonly x: SVGAnimatedLength;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y)
   */
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGMaskElement: {
  readonly prototype: SVGMaskElement;
  new (): SVGMaskElement;
};

/**
 * Corresponds to the <metadata> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)
 */
interface SVGMetadataElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGMetadataElement: {
  readonly prototype: SVGMetadataElement;
  new (): SVGMetadataElement;
};

/**
 * Corresponds to the <number> basic data type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber)
 */
interface SVGNumber {
  readonly value: number;
}

declare var SVGNumber: {
  readonly prototype: SVGNumber;
  new (): SVGNumber;
};

/**
 * The SVGNumberList defines a list of SVGNumber objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList)
 */
interface SVGNumberList {
  readonly length: number;
  readonly numberOfItems: number;
  appendItem(newItem: SVGNumber): SVGNumber;
  clear(): void;
  getItem(index: number): SVGNumber;
  initialize(newItem: SVGNumber): SVGNumber;
  insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;
  removeItem(index: number): SVGNumber;
  replaceItem(newItem: SVGNumber, index: number): SVGNumber;
  readonly [index: number]: SVGNumber;
}

declare var SVGNumberList: {
  readonly prototype: SVGNumberList;
  new (): SVGNumberList;
};

/**
 * Corresponds to the <path> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement)
 */
interface SVGPathElement extends SVGGeometryElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGPathElement: {
  readonly prototype: SVGPathElement;
  new (): SVGPathElement;
};

/**
 * Corresponds to the <pattern> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)
 */
interface SVGPatternElement
  extends SVGElement,
    SVGFitToViewBox,
    SVGURIReference {
  readonly height: SVGAnimatedLength;
  readonly patternContentUnits: SVGAnimatedEnumeration;
  readonly patternTransform: SVGAnimatedTransformList;
  readonly patternUnits: SVGAnimatedEnumeration;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGPatternElement: {
  readonly prototype: SVGPatternElement;
  new (): SVGPatternElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList) */
interface SVGPointList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems)
   */
  readonly numberOfItems: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/appendItem)
   */
  appendItem(newItem: DOMPoint): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/clear)
   */
  clear(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/getItem)
   */
  getItem(index: number): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/initialize)
   */
  initialize(newItem: DOMPoint): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/insertItemBefore)
   */
  insertItemBefore(newItem: DOMPoint, index: number): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/removeItem)
   */
  removeItem(index: number): DOMPoint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/replaceItem)
   */
  replaceItem(newItem: DOMPoint, index: number): DOMPoint;
  readonly [index: number]: DOMPoint;
}

declare var SVGPointList: {
  readonly prototype: SVGPointList;
  new (): SVGPointList;
};

/**
 * Provides access to the properties of <polygon> elements, as well as methods
 * to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)
 */
interface SVGPolygonElement extends SVGGeometryElement, SVGAnimatedPoints {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGPolygonElement: {
  readonly prototype: SVGPolygonElement;
  new (): SVGPolygonElement;
};

/**
 * Provides access to the properties of <polyline> elements, as well as methods
 * to manipulate them.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)
 */
interface SVGPolylineElement extends SVGGeometryElement, SVGAnimatedPoints {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGPolylineElement: {
  readonly prototype: SVGPolylineElement;
  new (): SVGPolylineElement;
};

/**
 * Corresponds to the preserveAspectRatio attribute, which is available for some
 * of SVG's elements.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)
 */
interface SVGPreserveAspectRatio {
  readonly align: number;
  readonly meetOrSlice: number;
  readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0;
  readonly SVG_PRESERVEASPECTRATIO_NONE: 1;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10;
  readonly SVG_MEETORSLICE_UNKNOWN: 0;
  readonly SVG_MEETORSLICE_MEET: 1;
  readonly SVG_MEETORSLICE_SLICE: 2;
}

declare var SVGPreserveAspectRatio: {
  readonly prototype: SVGPreserveAspectRatio;
  new (): SVGPreserveAspectRatio;
  readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0;
  readonly SVG_PRESERVEASPECTRATIO_NONE: 1;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7;
  readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8;
  readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9;
  readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10;
  readonly SVG_MEETORSLICE_UNKNOWN: 0;
  readonly SVG_MEETORSLICE_MEET: 1;
  readonly SVG_MEETORSLICE_SLICE: 2;
};

/**
 * Corresponds to the <RadialGradient> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)
 */
interface SVGRadialGradientElement extends SVGGradientElement {
  readonly cx: SVGAnimatedLength;
  readonly cy: SVGAnimatedLength;
  readonly fr: SVGAnimatedLength;
  readonly fx: SVGAnimatedLength;
  readonly fy: SVGAnimatedLength;
  readonly r: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGRadialGradientElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGRadialGradientElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGRadialGradientElement: {
  readonly prototype: SVGRadialGradientElement;
  new (): SVGRadialGradientElement;
};

/**
 * Provides access to the properties of <rect> elements, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement)
 */
interface SVGRectElement extends SVGGeometryElement {
  readonly height: SVGAnimatedLength;
  readonly rx: SVGAnimatedLength;
  readonly ry: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGRectElement: {
  readonly prototype: SVGRectElement;
  new (): SVGRectElement;
};

interface SVGSVGElementEventMap
  extends SVGElementEventMap,
    WindowEventHandlersEventMap {}

/**
 * Provides access to the properties of <svg> elements, as well as methods to
 * manipulate them. This interface contains also various miscellaneous
 * commonly-used utility methods, such as matrix operations and the ability to
 * control the time of redraw on visual rendering devices.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)
 */
interface SVGSVGElement
  extends SVGGraphicsElement,
    SVGFitToViewBox,
    WindowEventHandlers {
  readonly currentScale: number;
  readonly currentTranslate: DOMPointReadOnly;
  readonly height: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  animationsPaused(): boolean;
  checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): boolean;
  checkIntersection(element: SVGElement, rect: DOMRectReadOnly): boolean;
  createSVGAngle(): SVGAngle;
  createSVGLength(): SVGLength;
  createSVGMatrix(): DOMMatrix;
  createSVGNumber(): SVGNumber;
  createSVGPoint(): DOMPoint;
  createSVGRect(): DOMRect;
  createSVGTransform(): SVGTransform;
  createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;
  deselectAll(): void;
  /** @deprecated */
  forceRedraw(): void;
  getCurrentTime(): number;
  getElementById(elementId: string): Element;
  getEnclosureList(
    rect: DOMRectReadOnly,
    referenceElement: SVGElement | null,
  ): NodeListOf<
    | SVGCircleElement
    | SVGEllipseElement
    | SVGImageElement
    | SVGLineElement
    | SVGPathElement
    | SVGPolygonElement
    | SVGPolylineElement
    | SVGRectElement
    | SVGTextElement
    | SVGUseElement
  >;
  getIntersectionList(
    rect: DOMRectReadOnly,
    referenceElement: SVGElement | null,
  ): NodeListOf<
    | SVGCircleElement
    | SVGEllipseElement
    | SVGImageElement
    | SVGLineElement
    | SVGPathElement
    | SVGPolygonElement
    | SVGPolylineElement
    | SVGRectElement
    | SVGTextElement
    | SVGUseElement
  >;
  pauseAnimations(): void;
  setCurrentTime(seconds: number): void;
  /** @deprecated */
  suspendRedraw(maxWaitMilliseconds: number): number;
  unpauseAnimations(): void;
  /** @deprecated */
  unsuspendRedraw(suspendHandleID: number): void;
  /** @deprecated */
  unsuspendRedrawAll(): void;
  addEventListener<K extends keyof SVGSVGElementEventMap>(
    type: K,
    listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGSVGElementEventMap>(
    type: K,
    listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGSVGElement: {
  readonly prototype: SVGSVGElement;
  new (): SVGSVGElement;
};

/**
 * Corresponds to the SVG <script> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)
 */
interface SVGScriptElement extends SVGElement, SVGURIReference {
  readonly type: string;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGScriptElement: {
  readonly prototype: SVGScriptElement;
  new (): SVGScriptElement;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSetElement) */
interface SVGSetElement extends SVGAnimationElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGSetElement: {
  readonly prototype: SVGSetElement;
  new (): SVGSetElement;
};

/**
 * Corresponds to the <stop> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement)
 */
interface SVGStopElement extends SVGElement {
  readonly offset: SVGAnimatedNumber;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGStopElement: {
  readonly prototype: SVGStopElement;
  new (): SVGStopElement;
};

/**
 * The SVGStringList defines a list of DOMString objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList)
 */
interface SVGStringList {
  readonly length: number;
  readonly numberOfItems: number;
  appendItem(newItem: string): string;
  clear(): void;
  getItem(index: number): string;
  initialize(newItem: string): string;
  insertItemBefore(newItem: string, index: number): string;
  removeItem(index: number): string;
  replaceItem(newItem: string, index: number): string;
  readonly [index: number]: string;
}

declare var SVGStringList: {
  readonly prototype: SVGStringList;
  new (): SVGStringList;
};

/**
 * Corresponds to the SVG <style> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)
 */
interface SVGStyleElement extends SVGElement, LinkStyle {
  readonly disabled: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media)
   */
  readonly media: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title)
   */
  readonly title: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type)
   */
  readonly type: string;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGStyleElement: {
  readonly prototype: SVGStyleElement;
  new (): SVGStyleElement;
};

/**
 * Corresponds to the <switch> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)
 */
interface SVGSwitchElement extends SVGGraphicsElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGSwitchElement: {
  readonly prototype: SVGSwitchElement;
  new (): SVGSwitchElement;
};

/**
 * Corresponds to the <symbol> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)
 */
interface SVGSymbolElement extends SVGElement, SVGFitToViewBox {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGSymbolElement: {
  readonly prototype: SVGSymbolElement;
  new (): SVGSymbolElement;
};

/**
 * A <tspan> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)
 */
interface SVGTSpanElement extends SVGTextPositioningElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTSpanElement: {
  readonly prototype: SVGTSpanElement;
  new (): SVGTSpanElement;
};

interface SVGTests {
  readonly requiredExtensions: SVGStringList;
  readonly systemLanguage: SVGStringList;
}

/**
 * Implemented by elements that support rendering child text content. It is
 * inherited by various text-related interfaces, such as SVGTextElement,
 * SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)
 */
interface SVGTextContentElement extends SVGGraphicsElement {
  readonly lengthAdjust: SVGAnimatedEnumeration;
  readonly textLength: SVGAnimatedLength;
  getCharNumAtPosition(point?: DOMPointInit): number;
  getComputedTextLength(): number;
  getEndPositionOfChar(charnum: number): DOMPoint;
  getExtentOfChar(charnum: number): DOMRect;
  getNumberOfChars(): number;
  getRotationOfChar(charnum: number): number;
  getStartPositionOfChar(charnum: number): DOMPoint;
  getSubStringLength(charnum: number, nchars: number): number;
  /** @deprecated */
  selectSubString(charnum: number, nchars: number): void;
  readonly LENGTHADJUST_UNKNOWN: 0;
  readonly LENGTHADJUST_SPACING: 1;
  readonly LENGTHADJUST_SPACINGANDGLYPHS: 2;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGTextContentElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGTextContentElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTextContentElement: {
  readonly prototype: SVGTextContentElement;
  new (): SVGTextContentElement;
  readonly LENGTHADJUST_UNKNOWN: 0;
  readonly LENGTHADJUST_SPACING: 1;
  readonly LENGTHADJUST_SPACINGANDGLYPHS: 2;
};

/**
 * Corresponds to the <text> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextElement)
 */
interface SVGTextElement extends SVGTextPositioningElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTextElement: {
  readonly prototype: SVGTextElement;
  new (): SVGTextElement;
};

/**
 * Corresponds to the <textPath> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)
 */
interface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {
  readonly method: SVGAnimatedEnumeration;
  readonly spacing: SVGAnimatedEnumeration;
  readonly startOffset: SVGAnimatedLength;
  readonly TEXTPATH_METHODTYPE_UNKNOWN: 0;
  readonly TEXTPATH_METHODTYPE_ALIGN: 1;
  readonly TEXTPATH_METHODTYPE_STRETCH: 2;
  readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0;
  readonly TEXTPATH_SPACINGTYPE_AUTO: 1;
  readonly TEXTPATH_SPACINGTYPE_EXACT: 2;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTextPathElement: {
  readonly prototype: SVGTextPathElement;
  new (): SVGTextPathElement;
  readonly TEXTPATH_METHODTYPE_UNKNOWN: 0;
  readonly TEXTPATH_METHODTYPE_ALIGN: 1;
  readonly TEXTPATH_METHODTYPE_STRETCH: 2;
  readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0;
  readonly TEXTPATH_SPACINGTYPE_AUTO: 1;
  readonly TEXTPATH_SPACINGTYPE_EXACT: 2;
};

/**
 * Implemented by elements that support attributes that position individual text
 * glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement
 * and SVGAltGlyphElement.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)
 */
interface SVGTextPositioningElement extends SVGTextContentElement {
  readonly dx: SVGAnimatedLengthList;
  readonly dy: SVGAnimatedLengthList;
  readonly rotate: SVGAnimatedNumberList;
  readonly x: SVGAnimatedLengthList;
  readonly y: SVGAnimatedLengthList;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGTextPositioningElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (
      this: SVGTextPositioningElement,
      ev: SVGElementEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTextPositioningElement: {
  readonly prototype: SVGTextPositioningElement;
  new (): SVGTextPositioningElement;
};

/**
 * Corresponds to the <title> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)
 */
interface SVGTitleElement extends SVGElement {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGTitleElement: {
  readonly prototype: SVGTitleElement;
  new (): SVGTitleElement;
};

/**
 * SVGTransform is the interface for one of the component transformations within
 * an SVGTransformList; thus, an SVGTransform object corresponds to a single
 * component (e.g., scale(…) or matrix(…)) within a transform attribute.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform)
 */
interface SVGTransform {
  readonly angle: number;
  readonly matrix: DOMMatrix;
  readonly type: number;
  setMatrix(matrix?: DOMMatrix2DInit): void;
  setRotate(angle: number, cx: number, cy: number): void;
  setScale(sx: number, sy: number): void;
  setSkewX(angle: number): void;
  setSkewY(angle: number): void;
  setTranslate(tx: number, ty: number): void;
  readonly SVG_TRANSFORM_UNKNOWN: 0;
  readonly SVG_TRANSFORM_MATRIX: 1;
  readonly SVG_TRANSFORM_TRANSLATE: 2;
  readonly SVG_TRANSFORM_SCALE: 3;
  readonly SVG_TRANSFORM_ROTATE: 4;
  readonly SVG_TRANSFORM_SKEWX: 5;
  readonly SVG_TRANSFORM_SKEWY: 6;
}

declare var SVGTransform: {
  readonly prototype: SVGTransform;
  new (): SVGTransform;
  readonly SVG_TRANSFORM_UNKNOWN: 0;
  readonly SVG_TRANSFORM_MATRIX: 1;
  readonly SVG_TRANSFORM_TRANSLATE: 2;
  readonly SVG_TRANSFORM_SCALE: 3;
  readonly SVG_TRANSFORM_ROTATE: 4;
  readonly SVG_TRANSFORM_SKEWX: 5;
  readonly SVG_TRANSFORM_SKEWY: 6;
};

/**
 * The SVGTransformList defines a list of SVGTransform objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList)
 */
interface SVGTransformList {
  readonly length: number;
  readonly numberOfItems: number;
  appendItem(newItem: SVGTransform): SVGTransform;
  clear(): void;
  consolidate(): SVGTransform | null;
  createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;
  getItem(index: number): SVGTransform;
  initialize(newItem: SVGTransform): SVGTransform;
  insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;
  removeItem(index: number): SVGTransform;
  replaceItem(newItem: SVGTransform, index: number): SVGTransform;
  readonly [index: number]: SVGTransform;
}

declare var SVGTransformList: {
  readonly prototype: SVGTransformList;
  new (): SVGTransformList;
};

interface SVGURIReference {
  readonly href: SVGAnimatedString;
}

/**
 * A commonly used set of constants used for reflecting gradientUnits,
 * patternContentUnits and other similar attributes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)
 */
interface SVGUnitTypes {
  readonly SVG_UNIT_TYPE_UNKNOWN: 0;
  readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1;
  readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2;
}

declare var SVGUnitTypes: {
  readonly prototype: SVGUnitTypes;
  new (): SVGUnitTypes;
  readonly SVG_UNIT_TYPE_UNKNOWN: 0;
  readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1;
  readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2;
};

/**
 * Corresponds to the <use> element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement)
 */
interface SVGUseElement extends SVGGraphicsElement, SVGURIReference {
  readonly height: SVGAnimatedLength;
  readonly width: SVGAnimatedLength;
  readonly x: SVGAnimatedLength;
  readonly y: SVGAnimatedLength;
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGUseElement: {
  readonly prototype: SVGUseElement;
  new (): SVGUseElement;
};

/**
 * Provides access to the properties of <view> elements, as well as methods to
 * manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGViewElement)
 */
interface SVGViewElement extends SVGElement, SVGFitToViewBox {
  addEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SVGElementEventMap>(
    type: K,
    listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SVGViewElement: {
  readonly prototype: SVGViewElement;
  new (): SVGViewElement;
};

/**
 * A screen, usually the one on which the current window is being rendered, and
 * is obtained using window.screen.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen)
 */
interface Screen {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight)
   */
  readonly availHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth)
   */
  readonly availWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth)
   */
  readonly colorDepth: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/height) */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation)
   */
  readonly orientation: ScreenOrientation;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth)
   */
  readonly pixelDepth: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/width) */
  readonly width: number;
}

declare var Screen: {
  readonly prototype: Screen;
  new (): Screen;
};

interface ScreenOrientationEventMap {
  readonly change: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation) */
interface ScreenOrientation extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle)
   */
  readonly angle: number;
  readonly onchange: ((this: ScreenOrientation, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type)
   */
  readonly type: OrientationType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/unlock)
   */
  unlock(): void;
  addEventListener<K extends keyof ScreenOrientationEventMap>(
    type: K,
    listener: (
      this: ScreenOrientation,
      ev: ScreenOrientationEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ScreenOrientationEventMap>(
    type: K,
    listener: (
      this: ScreenOrientation,
      ev: ScreenOrientationEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ScreenOrientation: {
  readonly prototype: ScreenOrientation;
  new (): ScreenOrientation;
};

interface ScriptProcessorNodeEventMap {
  readonly audioprocess: AudioProcessingEvent;
}

/**
 * Allows the generation, processing, or analyzing of audio using JavaScript.
 *
 * @deprecated As of the August 29 2014 Web Audio API spec publication, this
 *   feature has been marked as deprecated, and was replaced by AudioWorklet
 *   (see AudioWorkletNode).
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode)
 */
interface ScriptProcessorNode extends AudioNode {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/bufferSize)
   */
  readonly bufferSize: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event)
   */
  readonly onaudioprocess:
    | ((this: ScriptProcessorNode, ev: AudioProcessingEvent) => unknown)
    | null;
  addEventListener<K extends keyof ScriptProcessorNodeEventMap>(
    type: K,
    listener: (
      this: ScriptProcessorNode,
      ev: ScriptProcessorNodeEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ScriptProcessorNodeEventMap>(
    type: K,
    listener: (
      this: ScriptProcessorNode,
      ev: ScriptProcessorNodeEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

/** @deprecated */
declare var ScriptProcessorNode: {
  readonly prototype: ScriptProcessorNode;
  new (): ScriptProcessorNode;
};

/**
 * Inherits from Event, and represents the event object of an event sent on a
 * document or worker when its content security policy is violated.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
 */
interface SecurityPolicyViolationEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)
   */
  readonly blockedURI: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)
   */
  readonly columnNumber: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)
   */
  readonly disposition: SecurityPolicyViolationEventDisposition;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)
   */
  readonly documentURI: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)
   */
  readonly effectiveDirective: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)
   */
  readonly lineNumber: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)
   */
  readonly originalPolicy: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)
   */
  readonly referrer: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)
   */
  readonly sample: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)
   */
  readonly sourceFile: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)
   */
  readonly statusCode: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)
   */
  readonly violatedDirective: string;
}

declare var SecurityPolicyViolationEvent: {
  readonly prototype: SecurityPolicyViolationEvent;
  new (
    type: string,
    eventInitDict?: SecurityPolicyViolationEventInit,
  ): SecurityPolicyViolationEvent;
};

/**
 * A Selection object represents the range of text selected by the user or the
 * current position of the caret. To obtain a Selection object for examination
 * or modification, call Window.getSelection().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection)
 */
interface Selection {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode)
   */
  readonly anchorNode: Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset)
   */
  readonly anchorOffset: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusNode)
   */
  readonly focusNode: Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset)
   */
  readonly focusOffset: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed)
   */
  readonly isCollapsed: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount)
   */
  readonly rangeCount: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/type)
   */
  readonly type: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/addRange)
   */
  addRange(range: Range): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapse)
   */
  collapse(node: Node | null, offset?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToEnd)
   */
  collapseToEnd(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToStart)
   */
  collapseToStart(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/containsNode)
   */
  containsNode(node: Node, allowPartialContainment?: boolean): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/deleteFromDocument)
   */
  deleteFromDocument(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges)
   */
  empty(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/extend)
   */
  extend(node: Node, offset?: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/getRangeAt)
   */
  getRangeAt(index: number): Range;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/modify)
   */
  modify(alter?: string, direction?: string, granularity?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges)
   */
  removeAllRanges(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeRange)
   */
  removeRange(range: Range): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/selectAllChildren)
   */
  selectAllChildren(node: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/setBaseAndExtent)
   */
  setBaseAndExtent(
    anchorNode: Node,
    anchorOffset: number,
    focusNode: Node,
    focusOffset: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapse)
   */
  setPosition(node: Node | null, offset?: number): void;
  toString(): string;
}

declare var Selection: {
  readonly prototype: Selection;
  new (): Selection;
};

interface ServiceWorkerEventMap extends AbstractWorkerEventMap {
  readonly statechange: Event;
}

/**
 * This ServiceWorker API interface provides a reference to a service worker.
 * Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with
 * the same service worker, each through a unique ServiceWorker object.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
 */
interface ServiceWorker extends EventTarget, AbstractWorker {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)
   */
  readonly onstatechange: ((this: ServiceWorker, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)
   */
  readonly scriptURL: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)
   */
  readonly state: ServiceWorkerState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
   */
  postMessage(message: unknown, transfer: readonly Transferable[]): void;
  postMessage(message: unknown, options?: StructuredSerializeOptions): void;
  addEventListener<K extends keyof ServiceWorkerEventMap>(
    type: K,
    listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ServiceWorkerEventMap>(
    type: K,
    listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ServiceWorker: {
  readonly prototype: ServiceWorker;
  new (): ServiceWorker;
};

interface ServiceWorkerContainerEventMap {
  readonly controllerchange: Event;
  readonly message: MessageEvent;
  readonly messageerror: MessageEvent;
}

/**
 * The ServiceWorkerContainer interface of the ServiceWorker API provides an
 * object representing the service worker as an overall unit in the network
 * ecosystem, including facilities to register, unregister and update service
 * workers, and access the state of service workers and their registrations.
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
 */
interface ServiceWorkerContainer extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)
   */
  readonly controller: ServiceWorker | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)
   */
  readonly oncontrollerchange:
    | ((this: ServiceWorkerContainer, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)
   */
  readonly onmessage:
    | ((this: ServiceWorkerContainer, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event)
   */
  readonly onmessageerror:
    | ((this: ServiceWorkerContainer, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)
   */
  readonly ready: Promise<ServiceWorkerRegistration>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistration)
   */
  getRegistration(
    clientURL?: string | URL,
  ): Promise<ServiceWorkerRegistration | undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistrations)
   */
  getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/register)
   */
  register(
    scriptURL: string | URL,
    options?: RegistrationOptions,
  ): Promise<ServiceWorkerRegistration>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/startMessages)
   */
  startMessages(): void;
  addEventListener<K extends keyof ServiceWorkerContainerEventMap>(
    type: K,
    listener: (
      this: ServiceWorkerContainer,
      ev: ServiceWorkerContainerEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(
    type: K,
    listener: (
      this: ServiceWorkerContainer,
      ev: ServiceWorkerContainerEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ServiceWorkerContainer: {
  readonly prototype: ServiceWorkerContainer;
  new (): ServiceWorkerContainer;
};

interface ServiceWorkerRegistrationEventMap {
  readonly updatefound: Event;
}

/**
 * This ServiceWorker API interface represents the service worker registration.
 * You register a service worker to control one or more pages that share the
 * same origin. Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
 */
interface ServiceWorkerRegistration extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)
   */
  readonly active: ServiceWorker | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)
   */
  readonly installing: ServiceWorker | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)
   */
  readonly navigationPreload: NavigationPreloadManager;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)
   */
  readonly onupdatefound:
    | ((this: ServiceWorkerRegistration, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)
   */
  readonly pushManager: PushManager;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)
   */
  readonly scope: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)
   */
  readonly updateViaCache: ServiceWorkerUpdateViaCache;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)
   */
  readonly waiting: ServiceWorker | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/getNotifications)
   */
  getNotifications(
    filter?: GetNotificationOptions,
  ): Promise<readonly Notification[]>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/showNotification)
   */
  showNotification(title: string, options?: NotificationOptions): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/unregister)
   */
  unregister(): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/update)
   */
  update(): Promise<void>;
  addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(
    type: K,
    listener: (
      this: ServiceWorkerRegistration,
      ev: ServiceWorkerRegistrationEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(
    type: K,
    listener: (
      this: ServiceWorkerRegistration,
      ev: ServiceWorkerRegistrationEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ServiceWorkerRegistration: {
  readonly prototype: ServiceWorkerRegistration;
  new (): ServiceWorkerRegistration;
};

interface ShadowRootEventMap {
  readonly slotchange: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot) */
interface ShadowRoot extends DocumentFragment, DocumentOrShadowRoot, InnerHTML {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus)
   */
  readonly delegatesFocus: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host)
   */
  readonly host: Element;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode)
   */
  readonly mode: ShadowRootMode;
  readonly onslotchange: ((this: ShadowRoot, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment)
   */
  readonly slotAssignment: SlotAssignmentMode;
  /**
   * Throws a "NotSupportedError" DOMException if context object is a shadow
   * root.
   */
  addEventListener<K extends keyof ShadowRootEventMap>(
    type: K,
    listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof ShadowRootEventMap>(
    type: K,
    listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var ShadowRoot: {
  readonly prototype: ShadowRoot;
  new (): ShadowRoot;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker) */
interface SharedWorker extends EventTarget, AbstractWorker {
  /**
   * Returns sharedWorker's MessagePort object which can be used to
   * communicate with the global environment.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)
   */
  readonly port: MessagePort;
  addEventListener<K extends keyof AbstractWorkerEventMap>(
    type: K,
    listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof AbstractWorkerEventMap>(
    type: K,
    listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SharedWorker: {
  readonly prototype: SharedWorker;
  new (scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker;
};

interface Slottable {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)
   */
  readonly assignedSlot: HTMLSlotElement | null;
}

interface SourceBufferEventMap {
  readonly abort: Event;
  readonly error: Event;
  readonly update: Event;
  readonly updateend: Event;
  readonly updatestart: Event;
}

/**
 * A chunk of media to be passed into an HTMLMediaElement and played, via a
 * MediaSource object. This can be made up of one or several media segments.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer)
 */
interface SourceBuffer extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd)
   */
  readonly appendWindowEnd: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart)
   */
  readonly appendWindowStart: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered)
   */
  readonly buffered: TimeRanges;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode)
   */
  readonly mode: AppendMode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort_event)
   */
  readonly onabort: ((this: SourceBuffer, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/error_event)
   */
  readonly onerror: ((this: SourceBuffer, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/update_event)
   */
  readonly onupdate: ((this: SourceBuffer, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updateend_event)
   */
  readonly onupdateend: ((this: SourceBuffer, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updatestart_event)
   */
  readonly onupdatestart: ((this: SourceBuffer, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset)
   */
  readonly timestampOffset: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating)
   */
  readonly updating: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort)
   */
  abort(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendBuffer)
   */
  appendBuffer(data: BufferSource): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/changeType)
   */
  changeType(type: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/remove)
   */
  remove(start: number, end: number): void;
  addEventListener<K extends keyof SourceBufferEventMap>(
    type: K,
    listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SourceBufferEventMap>(
    type: K,
    listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SourceBuffer: {
  readonly prototype: SourceBuffer;
  new (): SourceBuffer;
};

interface SourceBufferListEventMap {
  readonly addsourcebuffer: Event;
  readonly removesourcebuffer: Event;
}

/**
 * A simple container list for multiple SourceBuffer objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList)
 */
interface SourceBufferList extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/addsourcebuffer_event)
   */
  readonly onaddsourcebuffer:
    | ((this: SourceBufferList, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/removesourcebuffer_event)
   */
  readonly onremovesourcebuffer:
    | ((this: SourceBufferList, ev: Event) => unknown)
    | null;
  addEventListener<K extends keyof SourceBufferListEventMap>(
    type: K,
    listener: (
      this: SourceBufferList,
      ev: SourceBufferListEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SourceBufferListEventMap>(
    type: K,
    listener: (
      this: SourceBufferList,
      ev: SourceBufferListEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
  readonly [index: number]: SourceBuffer;
}

declare var SourceBufferList: {
  readonly prototype: SourceBufferList;
  new (): SourceBufferList;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative)
 */
interface SpeechRecognitionAlternative {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence)
   */
  readonly confidence: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript)
   */
  readonly transcript: string;
}

declare var SpeechRecognitionAlternative: {
  readonly prototype: SpeechRecognitionAlternative;
  new (): SpeechRecognitionAlternative;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult)
 */
interface SpeechRecognitionResult {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal)
   */
  readonly isFinal: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/item)
   */
  item(index: number): SpeechRecognitionAlternative;
  readonly [index: number]: SpeechRecognitionAlternative;
}

declare var SpeechRecognitionResult: {
  readonly prototype: SpeechRecognitionResult;
  new (): SpeechRecognitionResult;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList)
 */
interface SpeechRecognitionResultList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/item)
   */
  item(index: number): SpeechRecognitionResult;
  readonly [index: number]: SpeechRecognitionResult;
}

declare var SpeechRecognitionResultList: {
  readonly prototype: SpeechRecognitionResultList;
  new (): SpeechRecognitionResultList;
};

interface SpeechSynthesisEventMap {
  readonly voiceschanged: Event;
}

/**
 * This Web Speech API interface is the controller interface for the speech
 * service; this can be used to retrieve information about the synthesis voices
 * available on the device, start and pause speech, and other commands besides.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)
 */
interface SpeechSynthesis extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event)
   */
  readonly onvoiceschanged:
    | ((this: SpeechSynthesis, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused)
   */
  readonly paused: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending)
   */
  readonly pending: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking)
   */
  readonly speaking: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/cancel)
   */
  cancel(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/getVoices)
   */
  getVoices(): readonly SpeechSynthesisVoice[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pause)
   */
  pause(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/resume)
   */
  resume(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speak)
   */
  speak(utterance: SpeechSynthesisUtterance): void;
  addEventListener<K extends keyof SpeechSynthesisEventMap>(
    type: K,
    listener: (
      this: SpeechSynthesis,
      ev: SpeechSynthesisEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SpeechSynthesisEventMap>(
    type: K,
    listener: (
      this: SpeechSynthesis,
      ev: SpeechSynthesisEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SpeechSynthesis: {
  readonly prototype: SpeechSynthesis;
  new (): SpeechSynthesis;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent)
 */
interface SpeechSynthesisErrorEvent extends SpeechSynthesisEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error)
   */
  readonly error: SpeechSynthesisErrorCode;
}

declare var SpeechSynthesisErrorEvent: {
  readonly prototype: SpeechSynthesisErrorEvent;
  new (
    type: string,
    eventInitDict: SpeechSynthesisErrorEventInit,
  ): SpeechSynthesisErrorEvent;
};

/**
 * This Web Speech API interface contains information about the current state of
 * SpeechSynthesisUtterance objects that have been processed in the speech
 * service.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)
 */
interface SpeechSynthesisEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex)
   */
  readonly charIndex: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength)
   */
  readonly charLength: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime)
   */
  readonly elapsedTime: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance)
   */
  readonly utterance: SpeechSynthesisUtterance;
}

declare var SpeechSynthesisEvent: {
  readonly prototype: SpeechSynthesisEvent;
  new (
    type: string,
    eventInitDict: SpeechSynthesisEventInit,
  ): SpeechSynthesisEvent;
};

interface SpeechSynthesisUtteranceEventMap {
  readonly boundary: SpeechSynthesisEvent;
  readonly end: SpeechSynthesisEvent;
  readonly error: SpeechSynthesisErrorEvent;
  readonly mark: SpeechSynthesisEvent;
  readonly pause: SpeechSynthesisEvent;
  readonly resume: SpeechSynthesisEvent;
  readonly start: SpeechSynthesisEvent;
}

/**
 * This Web Speech API interface represents a speech request. It contains the
 * content the speech service should read and information about how to read it
 * (e.g. language, pitch and volume.)
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)
 */
interface SpeechSynthesisUtterance extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang)
   */
  readonly lang: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event)
   */
  readonly onboundary:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event)
   */
  readonly onend:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event)
   */
  readonly onerror:
    | ((
        this: SpeechSynthesisUtterance,
        ev: SpeechSynthesisErrorEvent,
      ) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event)
   */
  readonly onmark:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event)
   */
  readonly onpause:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event)
   */
  readonly onresume:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event)
   */
  readonly onstart:
    | ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch)
   */
  readonly pitch: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate)
   */
  readonly rate: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text)
   */
  readonly text: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice)
   */
  readonly voice: SpeechSynthesisVoice | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume)
   */
  readonly volume: number;
  addEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(
    type: K,
    listener: (
      this: SpeechSynthesisUtterance,
      ev: SpeechSynthesisUtteranceEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(
    type: K,
    listener: (
      this: SpeechSynthesisUtterance,
      ev: SpeechSynthesisUtteranceEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var SpeechSynthesisUtterance: {
  readonly prototype: SpeechSynthesisUtterance;
  new (text?: string): SpeechSynthesisUtterance;
};

/**
 * This Web Speech API interface represents a voice that the system supports.
 * Every SpeechSynthesisVoice has its own relative speech service including
 * information about language, name and URI.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)
 */
interface SpeechSynthesisVoice {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default)
   */
  readonly default: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang)
   */
  readonly lang: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService)
   */
  readonly localService: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI)
   */
  readonly voiceURI: string;
}

declare var SpeechSynthesisVoice: {
  readonly prototype: SpeechSynthesisVoice;
  new (): SpeechSynthesisVoice;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/StaticRange) */
interface StaticRange extends AbstractRange {}

declare var StaticRange: {
  readonly prototype: StaticRange;
  new (init: StaticRangeInit): StaticRange;
};

/**
 * The pan property takes a unitless value between -1 (full left pan) and 1
 * (full right pan). This interface was introduced as a much simpler way to
 * apply a simple panning effect than having to use a full PannerNode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)
 */
interface StereoPannerNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan)
   */
  readonly pan: AudioParam;
}

declare var StereoPannerNode: {
  readonly prototype: StereoPannerNode;
  new (
    context: BaseAudioContext,
    options?: StereoPannerOptions,
  ): StereoPannerNode;
};

/**
 * This Web Storage API interface provides access to a particular domain's
 * session or local storage. It allows, for example, the addition, modification,
 * or deletion of stored data items.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)
 */
interface Storage {
  /**
   * Returns the number of key/value pairs.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)
   */
  readonly length: number;
  /**
   * Removes all key/value pairs, if there are any.
   *
   * Dispatches a storage event on Window objects holding an equivalent
   * Storage object.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/clear)
   */
  clear(): void;
  /**
   * Returns the current value associated with the given key, or null if the
   * given key does not exist.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
   */
  getItem(key: string): string | null;
  /**
   * Returns the name of the nth key, or null if n is greater than or equal to
   * the number of key/value pairs.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/key)
   */
  key(index: number): string | null;
  /**
   * Removes the key/value pair with the given key, if a key/value pair with
   * the given key exists.
   *
   * Dispatches a storage event on Window objects holding an equivalent
   * Storage object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
   */
  removeItem(key: string): void;
  /**
   * Sets the value of the pair identified by key to value, creating a new
   * key/value pair if none existed for key previously.
   *
   * Throws a "QuotaExceededError" DOMException exception if the new value
   * couldn't be set. (Setting could fail if, e.g., the user has disabled
   * storage for the site, or if the quota has been exceeded.)
   *
   * Dispatches a storage event on Window objects holding an equivalent
   * Storage object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
   */
  setItem(key: string, value: string): void;
  readonly [name: string]: unknown;
}

declare var Storage: {
  readonly prototype: Storage;
  new (): Storage;
};

/**
 * A StorageEvent is sent to a window when a storage area it has access to is
 * changed within the context of another document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent)
 */
interface StorageEvent extends Event {
  /**
   * Returns the key of the storage item being changed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)
   */
  readonly key: string | null;
  /**
   * Returns the new value of the key of the storage item whose value is being
   * changed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)
   */
  readonly newValue: string | null;
  /**
   * Returns the old value of the key of the storage item whose value is being
   * changed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)
   */
  readonly oldValue: string | null;
  /**
   * Returns the Storage object that was affected.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)
   */
  readonly storageArea: Storage | null;
  /**
   * Returns the URL of the document whose storage item changed.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)
   */
  readonly url: string;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/initStorageEvent)
   */
  initStorageEvent(
    type: string,
    bubbles?: boolean,
    cancelable?: boolean,
    key?: string | null,
    oldValue?: string | null,
    newValue?: string | null,
    url?: string | URL,
    storageArea?: Storage | null,
  ): void;
}

declare var StorageEvent: {
  readonly prototype: StorageEvent;
  new (type: string, eventInitDict?: StorageEventInit): StorageEvent;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
 */
interface StorageManager {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/estimate)
   */
  estimate(): Promise<StorageEstimate>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/getDirectory)
   */
  getDirectory(): Promise<FileSystemDirectoryHandle>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persist)
   */
  persist(): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persisted)
   */
  persisted(): Promise<boolean>;
}

declare var StorageManager: {
  readonly prototype: StorageManager;
  new (): StorageManager;
};

/** @deprecated */
interface StyleMedia {
  readonly type: string;
  matchMedium(mediaquery: string): boolean;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap) */
interface StylePropertyMap extends StylePropertyMapReadOnly {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/append)
   */
  append(
    property: string,
    ...values: readonly (CSSStyleValue | string)[]
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/clear)
   */
  clear(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/delete)
   */
  delete(property: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/set)
   */
  set(property: string, ...values: readonly (CSSStyleValue | string)[]): void;
}

declare var StylePropertyMap: {
  readonly prototype: StylePropertyMap;
  new (): StylePropertyMap;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)
 */
interface StylePropertyMapReadOnly {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)
   */
  readonly size: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/get)
   */
  get(property: string): undefined | CSSStyleValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/getAll)
   */
  getAll(property: string): readonly CSSStyleValue[];
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/has)
   */
  has(property: string): boolean;
  forEach(
    callbackfn: (
      value: readonly CSSStyleValue[],
      key: string,
      parent: StylePropertyMapReadOnly,
    ) => void,
    thisArg?: unknown,
  ): void;
}

declare var StylePropertyMapReadOnly: {
  readonly prototype: StylePropertyMapReadOnly;
  new (): StylePropertyMapReadOnly;
};

/**
 * A single style sheet. CSS style sheets will further implement the more
 * specialized CSSStyleSheet interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet)
 */
interface StyleSheet {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled)
   */
  readonly disabled: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/href)
   */
  readonly href: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/media)
   */
  readonly media: MediaList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode)
   */
  readonly ownerNode: Element | ProcessingInstruction | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet)
   */
  readonly parentStyleSheet: CSSStyleSheet | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/title)
   */
  readonly title: string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/type)
   */
  readonly type: string;
}

declare var StyleSheet: {
  readonly prototype: StyleSheet;
  new (): StyleSheet;
};

/**
 * A list of StyleSheet.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList)
 */
interface StyleSheetList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/item)
   */
  item(index: number): CSSStyleSheet | null;
  readonly [index: number]: CSSStyleSheet;
}

declare var StyleSheetList: {
  readonly prototype: StyleSheetList;
  new (): StyleSheetList;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent) */
interface SubmitEvent extends Event {
  /**
   * Returns the element representing the submit button that triggered the
   * form submission, or null if the submission was not triggered by a
   * button.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)
   */
  readonly submitter: HTMLElement | null;
}

declare var SubmitEvent: {
  readonly prototype: SubmitEvent;
  new (type: string, eventInitDict?: SubmitEventInit): SubmitEvent;
};

/**
 * This Web Crypto API interface provides a number of low-level cryptographic
 * functions. It is accessed via the Crypto.subtle properties available in a
 * window context (via Window.crypto). Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
 */
interface SubtleCrypto {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt)
   */
  decrypt(
    algorithm:
      | AlgorithmIdentifier
      | RsaOaepParams
      | AesCtrParams
      | AesCbcParams
      | AesGcmParams,
    key: CryptoKey,
    data: BufferSource,
  ): Promise<ArrayBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits)
   */
  deriveBits(
    algorithm:
      | AlgorithmIdentifier
      | EcdhKeyDeriveParams
      | HkdfParams
      | Pbkdf2Params,
    baseKey: CryptoKey,
    length: number,
  ): Promise<ArrayBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
   */
  deriveKey(
    algorithm:
      | AlgorithmIdentifier
      | EcdhKeyDeriveParams
      | HkdfParams
      | Pbkdf2Params,
    baseKey: CryptoKey,
    derivedKeyType:
      | AlgorithmIdentifier
      | AesDerivedKeyParams
      | HmacImportParams
      | HkdfParams
      | Pbkdf2Params,
    extractable: boolean,
    keyUsages: readonly KeyUsage[],
  ): Promise<CryptoKey>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest)
   */
  digest(
    algorithm: AlgorithmIdentifier,
    data: BufferSource,
  ): Promise<ArrayBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt)
   */
  encrypt(
    algorithm:
      | AlgorithmIdentifier
      | RsaOaepParams
      | AesCtrParams
      | AesCbcParams
      | AesGcmParams,
    key: CryptoKey,
    data: BufferSource,
  ): Promise<ArrayBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
   */
  exportKey(format: 'jwk', key: CryptoKey): Promise<JsonWebKey>;
  exportKey(
    format: Exclude<KeyFormat, 'jwk'>,
    key: CryptoKey,
  ): Promise<ArrayBuffer>;
  exportKey(
    format: KeyFormat,
    key: CryptoKey,
  ): Promise<ArrayBuffer | JsonWebKey>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
   */
  generateKey(
    algorithm: 'Ed25519',
    extractable: boolean,
    keyUsages: ReadonlyArray<'sign' | 'verify'>,
  ): Promise<CryptoKeyPair>;
  generateKey(
    algorithm: RsaHashedKeyGenParams | EcKeyGenParams,
    extractable: boolean,
    keyUsages: ReadonlyArray<KeyUsage>,
  ): Promise<CryptoKeyPair>;
  generateKey(
    algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params,
    extractable: boolean,
    keyUsages: ReadonlyArray<KeyUsage>,
  ): Promise<CryptoKey>;
  generateKey(
    algorithm: AlgorithmIdentifier,
    extractable: boolean,
    keyUsages: readonly KeyUsage[],
  ): Promise<CryptoKeyPair | CryptoKey>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
   */
  importKey(
    format: 'jwk',
    keyData: JsonWebKey,
    algorithm:
      | AlgorithmIdentifier
      | RsaHashedImportParams
      | EcKeyImportParams
      | HmacImportParams
      | AesKeyAlgorithm,
    extractable: boolean,
    keyUsages: ReadonlyArray<KeyUsage>,
  ): Promise<CryptoKey>;
  importKey(
    format: Exclude<KeyFormat, 'jwk'>,
    keyData: BufferSource,
    algorithm:
      | AlgorithmIdentifier
      | RsaHashedImportParams
      | EcKeyImportParams
      | HmacImportParams
      | AesKeyAlgorithm,
    extractable: boolean,
    keyUsages: readonly KeyUsage[],
  ): Promise<CryptoKey>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign)
   */
  sign(
    algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams,
    key: CryptoKey,
    data: BufferSource,
  ): Promise<ArrayBuffer>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
   */
  unwrapKey(
    format: KeyFormat,
    wrappedKey: BufferSource,
    unwrappingKey: CryptoKey,
    unwrapAlgorithm:
      | AlgorithmIdentifier
      | RsaOaepParams
      | AesCtrParams
      | AesCbcParams
      | AesGcmParams,
    unwrappedKeyAlgorithm:
      | AlgorithmIdentifier
      | RsaHashedImportParams
      | EcKeyImportParams
      | HmacImportParams
      | AesKeyAlgorithm,
    extractable: boolean,
    keyUsages: readonly KeyUsage[],
  ): Promise<CryptoKey>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify)
   */
  verify(
    algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams,
    key: CryptoKey,
    signature: BufferSource,
    data: BufferSource,
  ): Promise<boolean>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey)
   */
  wrapKey(
    format: KeyFormat,
    key: CryptoKey,
    wrappingKey: CryptoKey,
    wrapAlgorithm:
      | AlgorithmIdentifier
      | RsaOaepParams
      | AesCtrParams
      | AesCbcParams
      | AesGcmParams,
  ): Promise<ArrayBuffer>;
}

declare var SubtleCrypto: {
  readonly prototype: SubtleCrypto;
  new (): SubtleCrypto;
};

/**
 * The textual content of Element or Attr. If an element has no markup within
 * its content, it has a single child implementing Text that contains the
 * element's text. However, if the element contains markup, it is parsed into
 * information items and Text nodes that form its children.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text)
 */
interface Text extends CharacterData, Slottable {
  /**
   * Returns the combined data of all direct Text node siblings.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Text/wholeText)
   */
  readonly wholeText: string;
  /**
   * Splits data at the given offset and returns the remainder as Text node.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Text/splitText)
   */
  splitText(offset: number): Text;
}

declare var Text: {
  readonly prototype: Text;
  new (data?: string): Text;
};

/**
 * A decoder for a specific method, that is a specific character encoding, like
 * utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes
 * as input and emits a stream of code points. For a more scalable, non-native
 * library, see StringView – a C-like representation of strings based on typed
 * arrays.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
 */
interface TextDecoder extends TextDecoderCommon {
  /**
   * Returns the result of running encoding's decoder. The method can be
   * invoked zero or more times with options's stream set to true, and then
   * once without options's stream (or set to false), to process a fragmented
   * input. If the invocation without options's stream (or set to false) has
   * no input, it's clearest to omit both arguments.
   *
   *     var string = '',
   *       decoder = new TextDecoder(encoding),
   *       buffer;
   *     while ((buffer = next_chunk())) {
   *       string += decoder.decode(buffer, { stream: true });
   *     }
   *     string += decoder.decode(); // end-of-queue
   *
   * If the error mode is "fatal" and encoding's decoder returns error, throws
   * a TypeError.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/decode)
   */
  decode(input?: AllowSharedBufferSource, options?: TextDecodeOptions): string;
}

declare var TextDecoder: {
  readonly prototype: TextDecoder;
  new (label?: string, options?: TextDecoderOptions): TextDecoder;
};

interface TextDecoderCommon {
  /**
   * Returns encoding's name, lowercased.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
   */
  readonly encoding: string;
  /**
   * Returns true if error mode is "fatal", otherwise false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
   */
  readonly fatal: boolean;
  /**
   * Returns the value of ignore BOM.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
   */
  readonly ignoreBOM: boolean;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) */
interface TextDecoderStream extends GenericTransformStream, TextDecoderCommon {
  readonly readable: ReadableStream<string>;
  readonly writable: WritableStream<BufferSource>;
}

declare var TextDecoderStream: {
  readonly prototype: TextDecoderStream;
  new (label?: string, options?: TextDecoderOptions): TextDecoderStream;
};

/**
 * TextEncoder takes a stream of code points as input and emits a stream of
 * bytes. For a more scalable, non-native library, see StringView – a C-like
 * representation of strings based on typed arrays.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
 */
interface TextEncoder extends TextEncoderCommon {
  /**
   * Returns the result of running UTF-8's encoder.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encode)
   */
  encode(input?: string): Uint8Array;
  /**
   * Runs the UTF-8 encoder on source, stores the result of that operation
   * into destination, and returns the progress made as an object wherein read
   * is the number of converted code units of source and written is the number
   * of bytes modified in destination.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto)
   */
  encodeInto(
    source: string,
    destination: Uint8Array,
  ): TextEncoderEncodeIntoResult;
}

declare var TextEncoder: {
  readonly prototype: TextEncoder;
  new (): TextEncoder;
};

interface TextEncoderCommon {
  /**
   * Returns "utf-8".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
   */
  readonly encoding: string;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) */
interface TextEncoderStream extends GenericTransformStream, TextEncoderCommon {
  readonly readable: ReadableStream<Uint8Array>;
  readonly writable: WritableStream<string>;
}

declare var TextEncoderStream: {
  readonly prototype: TextEncoderStream;
  new (): TextEncoderStream;
};

/**
 * The dimensions of a piece of text in the canvas, as created by the
 * CanvasRenderingContext2D.measureText() method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
 */
interface TextMetrics {
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
   */
  readonly actualBoundingBoxAscent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
   */
  readonly actualBoundingBoxDescent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
   */
  readonly actualBoundingBoxLeft: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
   */
  readonly actualBoundingBoxRight: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)
   */
  readonly alphabeticBaseline: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)
   */
  readonly emHeightAscent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)
   */
  readonly emHeightDescent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
   */
  readonly fontBoundingBoxAscent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
   */
  readonly fontBoundingBoxDescent: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)
   */
  readonly hangingBaseline: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)
   */
  readonly ideographicBaseline: number;
  /**
   * Returns the measurement described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
   */
  readonly width: number;
}

declare var TextMetrics: {
  readonly prototype: TextMetrics;
  new (): TextMetrics;
};

interface TextTrackEventMap {
  readonly cuechange: Event;
}

/**
 * This interface also inherits properties from EventTarget.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack)
 */
interface TextTrack extends EventTarget {
  /**
   * Returns the text track cues from the text track list of cues that are
   * currently active (i.e. that start before the current playback position
   * and end after it), as a TextTrackCueList object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)
   */
  readonly activeCues: TextTrackCueList | null;
  /**
   * Returns the text track list of cues, as a TextTrackCueList object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)
   */
  readonly cues: TextTrackCueList | null;
  /**
   * Returns the ID of the given track.
   *
   * For in-band tracks, this is the ID that can be used with a fragment if
   * the format supports media fragment syntax, and that can be used with the
   * getTrackById() method.
   *
   * For TextTrack objects corresponding to track elements, this is the ID of
   * the track element.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/id)
   */
  readonly id: string;
  /**
   * Returns the text track in-band metadata track dispatch type string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)
   */
  readonly inBandMetadataTrackDispatchType: string;
  /**
   * Returns the text track kind string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)
   */
  readonly kind: TextTrackKind;
  /**
   * Returns the text track label, if there is one, or the empty string
   * otherwise (indicating that a custom label probably needs to be generated
   * from the other attributes of the object if the object is exposed to the
   * user).
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/label)
   */
  readonly label: string;
  /**
   * Returns the text track language string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/language)
   */
  readonly language: string;
  /**
   * Returns the text track mode, represented by a string from the following
   * list:
   *
   * Can be set, to change the mode.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)
   */
  readonly mode: TextTrackMode;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event)
   */
  readonly oncuechange: ((this: TextTrack, ev: Event) => unknown) | null;
  /**
   * Adds the given cue to textTrack's text track list of cues.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/addCue)
   */
  addCue(cue: TextTrackCue): void;
  /**
   * Removes the given cue from textTrack's text track list of cues.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/removeCue)
   */
  removeCue(cue: TextTrackCue): void;
  addEventListener<K extends keyof TextTrackEventMap>(
    type: K,
    listener: (this: TextTrack, ev: TextTrackEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof TextTrackEventMap>(
    type: K,
    listener: (this: TextTrack, ev: TextTrackEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var TextTrack: {
  readonly prototype: TextTrack;
  new (): TextTrack;
};

interface TextTrackCueEventMap {
  readonly enter: Event;
  readonly exit: Event;
}

/**
 * TextTrackCues represent a string of text that will be displayed for some
 * duration of time on a TextTrack. This includes the start and end times that
 * the cue will be displayed. A TextTrackCue cannot be used directly, instead
 * one of the derived types (e.g. VTTCue) must be used.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue)
 */
interface TextTrackCue extends EventTarget {
  /**
   * Returns the text track cue end time, in seconds.
   *
   * Can be set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)
   */
  readonly endTime: number;
  /**
   * Returns the text track cue identifier.
   *
   * Can be set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)
   */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event)
   */
  readonly onenter: ((this: TextTrackCue, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event)
   */
  readonly onexit: ((this: TextTrackCue, ev: Event) => unknown) | null;
  /**
   * Returns true if the text track cue pause-on-exit flag is set, false
   * otherwise.
   *
   * Can be set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)
   */
  readonly pauseOnExit: boolean;
  /**
   * Returns the text track cue start time, in seconds.
   *
   * Can be set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)
   */
  readonly startTime: number;
  /**
   * Returns the TextTrack object to which this text track cue belongs, if
   * any, or null otherwise.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)
   */
  readonly track: TextTrack | null;
  addEventListener<K extends keyof TextTrackCueEventMap>(
    type: K,
    listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof TextTrackCueEventMap>(
    type: K,
    listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var TextTrackCue: {
  readonly prototype: TextTrackCue;
  new (): TextTrackCue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList) */
interface TextTrackCueList {
  /**
   * Returns the number of cues in the list.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)
   */
  readonly length: number;
  /**
   * Returns the first text track cue (in text track cue order) with text
   * track cue identifier id.
   *
   * Returns null if none of the cues have the given identifier or if the
   * argument is the empty string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/getCueById)
   */
  getCueById(id: string): TextTrackCue | null;
  readonly [index: number]: TextTrackCue;
}

declare var TextTrackCueList: {
  readonly prototype: TextTrackCueList;
  new (): TextTrackCueList;
};

interface TextTrackListEventMap {
  readonly addtrack: TrackEvent;
  readonly change: Event;
  readonly removetrack: TrackEvent;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList) */
interface TextTrackList extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event)
   */
  readonly onaddtrack:
    | ((this: TextTrackList, ev: TrackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event)
   */
  readonly onchange: ((this: TextTrackList, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event)
   */
  readonly onremovetrack:
    | ((this: TextTrackList, ev: TrackEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/getTrackById)
   */
  getTrackById(id: string): TextTrack | null;
  addEventListener<K extends keyof TextTrackListEventMap>(
    type: K,
    listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof TextTrackListEventMap>(
    type: K,
    listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
  readonly [index: number]: TextTrack;
}

declare var TextTrackList: {
  readonly prototype: TextTrackList;
  new (): TextTrackList;
};

/**
 * Used to represent a set of time ranges, primarily for the purpose of tracking
 * which portions of media have been buffered when loading it for use by the
 * <audio> and <video> elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges)
 */
interface TimeRanges {
  /**
   * Returns the number of ranges in the object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)
   */
  readonly length: number;
  /**
   * Returns the time for the end of the range with the given index.
   *
   * Throws an "IndexSizeError" DOMException if the index is out of range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/end)
   */
  end(index: number): number;
  /**
   * Returns the time for the start of the range with the given index.
   *
   * Throws an "IndexSizeError" DOMException if the index is out of range.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/start)
   */
  start(index: number): number;
}

declare var TimeRanges: {
  readonly prototype: TimeRanges;
  new (): TimeRanges;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent) */
interface ToggleEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState)
   */
  readonly newState: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState)
   */
  readonly oldState: string;
}

declare var ToggleEvent: {
  readonly prototype: ToggleEvent;
  new (type: string, eventInitDict?: ToggleEventInit): ToggleEvent;
};

/**
 * A single contact point on a touch-sensitive device. The contact point is
 * commonly a finger or stylus and the device may be a touchscreen or trackpad.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)
 */
interface Touch {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX) */
  readonly clientX: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY) */
  readonly clientY: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force) */
  readonly force: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier)
   */
  readonly identifier: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX) */
  readonly pageX: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY) */
  readonly pageY: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX) */
  readonly radiusX: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY) */
  readonly radiusY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle)
   */
  readonly rotationAngle: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX) */
  readonly screenX: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY) */
  readonly screenY: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target) */
  readonly target: EventTarget;
}

declare var Touch: {
  readonly prototype: Touch;
  new (touchInitDict: TouchInit): Touch;
};

/**
 * An event sent when the state of contacts with a touch-sensitive surface
 * changes. This surface can be a touch screen or trackpad, for example. The
 * event can describe one or more points of contact with the screen and includes
 * support for detecting movement, addition and removal of contact points, and
 * so forth.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent)
 */
interface TouchEvent extends UIEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey)
   */
  readonly altKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches)
   */
  readonly changedTouches: TouchList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey)
   */
  readonly ctrlKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey)
   */
  readonly metaKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey)
   */
  readonly shiftKey: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches)
   */
  readonly targetTouches: TouchList;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches)
   */
  readonly touches: TouchList;
}

declare var TouchEvent: {
  readonly prototype: TouchEvent;
  new (type: string, eventInitDict?: TouchEventInit): TouchEvent;
};

/**
 * A list of contact points on a touch surface. For example, if the user has
 * three fingers on the touch surface (such as a screen or trackpad), the
 * corresponding TouchList object would have one Touch object for each finger,
 * for a total of three entries.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)
 */
interface TouchList {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length)
   */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TouchList/item)
   */
  item(index: number): Touch | null;
  readonly [index: number]: Touch;
}

declare var TouchList: {
  readonly prototype: TouchList;
  new (): TouchList;
};

/**
 * The TrackEvent interface, part of the HTML DOM specification, is used for
 * events which represent changes to the set of available tracks on an HTML
 * media element; these events are addtrack and removetrack.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent)
 */
interface TrackEvent extends Event {
  /**
   * Returns the track object (TextTrack, AudioTrack, or VideoTrack) to which
   * the event relates.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)
   */
  readonly track: TextTrack | null;
}

declare var TrackEvent: {
  readonly prototype: TrackEvent;
  new (type: string, eventInitDict?: TrackEventInit): TrackEvent;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream) */
interface TransformStream<I = unknown, O = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable)
   */
  readonly readable: ReadableStream<O>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable)
   */
  readonly writable: WritableStream<I>;
}

declare var TransformStream: {
  readonly prototype: TransformStream;
  new <I = unknown, O = unknown>(
    transformer?: Transformer<I, O>,
    writableStrategy?: QueuingStrategy<I>,
    readableStrategy?: QueuingStrategy<O>,
  ): TransformStream<I, O>;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController)
 */
interface TransformStreamDefaultController<O = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize)
   */
  readonly desiredSize: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue)
   */
  enqueue(chunk?: O): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error)
   */
  error(reason?: unknown): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate)
   */
  terminate(): void;
}

declare var TransformStreamDefaultController: {
  readonly prototype: TransformStreamDefaultController;
  new (): TransformStreamDefaultController;
};

/**
 * Events providing information related to transitions.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent)
 */
interface TransitionEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime)
   */
  readonly elapsedTime: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName)
   */
  readonly propertyName: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement)
   */
  readonly pseudoElement: string;
}

declare var TransitionEvent: {
  readonly prototype: TransitionEvent;
  new (
    type: string,
    transitionEventInitDict?: TransitionEventInit,
  ): TransitionEvent;
};

/**
 * The nodes of a document subtree and a position within them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker)
 */
interface TreeWalker {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode)
   */
  readonly currentNode: Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter)
   */
  readonly filter: NodeFilter | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/root)
   */
  readonly root: Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow)
   */
  readonly whatToShow: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/firstChild)
   */
  firstChild(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/lastChild)
   */
  lastChild(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextNode)
   */
  nextNode(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextSibling)
   */
  nextSibling(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/parentNode)
   */
  parentNode(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousNode)
   */
  previousNode(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousSibling)
   */
  previousSibling(): Node | null;
}

declare var TreeWalker: {
  readonly prototype: TreeWalker;
  new (): TreeWalker;
};

/**
 * Simple user interface events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent)
 */
interface UIEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/detail)
   */
  readonly detail: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/view) */
  readonly view: Window | null;
  /**
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/which)
   */
  readonly which: number;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/initUIEvent)
   */
  initUIEvent(
    typeArg: string,
    bubblesArg?: boolean,
    cancelableArg?: boolean,
    viewArg?: Window | null,
    detailArg?: number,
  ): void;
}

declare var UIEvent: {
  readonly prototype: UIEvent;
  new (type: string, eventInitDict?: UIEventInit): UIEvent;
};

/**
 * The URL interface represents an object providing static methods used for
 * creating object URLs.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
 */
interface URL {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash) */
  readonly hash: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host) */
  readonly host: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname) */
  readonly hostname: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href) */
  readonly href: string;
  toString(): string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin) */
  readonly origin: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password) */
  readonly password: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname) */
  readonly pathname: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port) */
  readonly port: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol) */
  readonly protocol: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search) */
  readonly search: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)
   */
  readonly searchParams: URLSearchParams;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username) */
  readonly username: string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/toJSON) */
  toJSON(): string;
}

declare var URL: {
  readonly prototype: URL;
  new (url: string | URL, base?: string | URL): URL;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URL/canParse_static)
   */
  canParse(url: string | URL, base?: string): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL_static)
   */
  createObjectURL(obj: Blob | MediaSource): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL_static)
   */
  revokeObjectURL(url: string): void;
};

type webkitURL = URL;
declare var webkitURL: typeof URL;

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams) */
interface URLSearchParams {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)
   */
  readonly size: number;
  /**
   * Appends a specified key/value pair as a new search parameter.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
   */
  append(name: string, value: string): void;
  /**
   * Deletes the given search parameter, and its associated value, from the
   * list of all search parameters.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
   */
  delete(name: string, value?: string): void;
  /**
   * Returns the first value associated to the given search parameter.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
   */
  get(name: string): string | null;
  /**
   * Returns all the values association with a given search parameter.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
   */
  getAll(name: string): readonly string[];
  /**
   * Returns a Boolean indicating if such a search parameter exists.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
   */
  has(name: string, value?: string): boolean;
  /**
   * Sets the value associated to a given search parameter to the given value.
   * If there were several values, delete the others.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/set)
   */
  set(name: string, value: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort)
   */
  sort(): void;
  /**
   * Returns a string containing a query string suitable for use in a URL.
   * Does not include the question mark.
   */
  toString(): string;
  forEach(
    callbackfn: (value: string, key: string, parent: URLSearchParams) => void,
    thisArg?: unknown,
  ): void;
}

declare var URLSearchParams: {
  readonly prototype: URLSearchParams;
  new (
    init?:
      | readonly (readonly string[])[]
      | Record<string, string>
      | string
      | URLSearchParams,
  ): URLSearchParams;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation) */
interface UserActivation {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)
   */
  readonly hasBeenActive: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)
   */
  readonly isActive: boolean;
}

declare var UserActivation: {
  readonly prototype: UserActivation;
  new (): UserActivation;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue) */
interface VTTCue extends TextTrackCue {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/align) */
  readonly align: AlignSetting;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/line) */
  readonly line: LineAndPositionSetting;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign)
   */
  readonly lineAlign: LineAlignSetting;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/position)
   */
  readonly position: LineAndPositionSetting;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign)
   */
  readonly positionAlign: PositionAlignSetting;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/region) */
  readonly region: VTTRegion | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/size) */
  readonly size: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines)
   */
  readonly snapToLines: boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/text) */
  readonly text: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical)
   */
  readonly vertical: DirectionSetting;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/getCueAsHTML)
   */
  getCueAsHTML(): DocumentFragment;
  addEventListener<K extends keyof TextTrackCueEventMap>(
    type: K,
    listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof TextTrackCueEventMap>(
    type: K,
    listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var VTTCue: {
  readonly prototype: VTTCue;
  new (startTime: number, endTime: number, text: string): VTTCue;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion) */
interface VTTRegion {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/id) */
  readonly id: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/lines)
   */
  readonly lines: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorX)
   */
  readonly regionAnchorX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorY)
   */
  readonly regionAnchorY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/scroll)
   */
  readonly scroll: ScrollSetting;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorX)
   */
  readonly viewportAnchorX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorY)
   */
  readonly viewportAnchorY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/width)
   */
  readonly width: number;
}

declare var VTTRegion: {
  readonly prototype: VTTRegion;
  new (): VTTRegion;
};

/**
 * The validity states that an element can be in, with respect to constraint
 * validation. Together, they help explain why an element's value fails to
 * validate, if it's not valid.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState)
 */
interface ValidityState {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput)
   */
  readonly badInput: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/customError)
   */
  readonly customError: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch)
   */
  readonly patternMismatch: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow)
   */
  readonly rangeOverflow: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow)
   */
  readonly rangeUnderflow: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch)
   */
  readonly stepMismatch: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong)
   */
  readonly tooLong: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort)
   */
  readonly tooShort: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch)
   */
  readonly typeMismatch: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valid)
   */
  readonly valid: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing)
   */
  readonly valueMissing: boolean;
}

declare var ValidityState: {
  readonly prototype: ValidityState;
  new (): ValidityState;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace) */
interface VideoColorSpace {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)
   */
  readonly fullRange: boolean | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)
   */
  readonly matrix: VideoMatrixCoefficients | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)
   */
  readonly primaries: VideoColorPrimaries | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)
   */
  readonly transfer: VideoTransferCharacteristics | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/toJSON)
   */
  toJSON(): VideoColorSpaceInit;
}

declare var VideoColorSpace: {
  readonly prototype: VideoColorSpace;
  new (init?: VideoColorSpaceInit): VideoColorSpace;
};

interface VideoDecoderEventMap {
  readonly dequeue: Event;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
 */
interface VideoDecoder extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)
   */
  readonly decodeQueueSize: number;
  readonly ondequeue: ((this: VideoDecoder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)
   */
  readonly state: CodecState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/configure)
   */
  configure(config: VideoDecoderConfig): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decode)
   */
  decode(chunk: EncodedVideoChunk): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/flush)
   */
  flush(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/reset)
   */
  reset(): void;
  addEventListener<K extends keyof VideoDecoderEventMap>(
    type: K,
    listener: (this: VideoDecoder, ev: VideoDecoderEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof VideoDecoderEventMap>(
    type: K,
    listener: (this: VideoDecoder, ev: VideoDecoderEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var VideoDecoder: {
  readonly prototype: VideoDecoder;
  new (init: VideoDecoderInit): VideoDecoder;
  isConfigSupported(config: VideoDecoderConfig): Promise<VideoDecoderSupport>;
};

interface VideoEncoderEventMap {
  readonly dequeue: Event;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
 */
interface VideoEncoder extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)
   */
  readonly encodeQueueSize: number;
  readonly ondequeue: ((this: VideoEncoder, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)
   */
  readonly state: CodecState;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/configure)
   */
  configure(config: VideoEncoderConfig): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encode)
   */
  encode(frame: VideoFrame, options?: VideoEncoderEncodeOptions): void;
  flush(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/reset)
   */
  reset(): void;
  addEventListener<K extends keyof VideoEncoderEventMap>(
    type: K,
    listener: (this: VideoEncoder, ev: VideoEncoderEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof VideoEncoderEventMap>(
    type: K,
    listener: (this: VideoEncoder, ev: VideoEncoderEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var VideoEncoder: {
  readonly prototype: VideoEncoder;
  new (init: VideoEncoderInit): VideoEncoder;
  isConfigSupported(config: VideoEncoderConfig): Promise<VideoEncoderSupport>;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame) */
interface VideoFrame {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)
   */
  readonly codedHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)
   */
  readonly codedRect: DOMRectReadOnly | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)
   */
  readonly codedWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)
   */
  readonly colorSpace: VideoColorSpace;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)
   */
  readonly displayHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)
   */
  readonly displayWidth: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)
   */
  readonly duration: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)
   */
  readonly format: VideoPixelFormat | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)
   */
  readonly timestamp: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)
   */
  readonly visibleRect: DOMRectReadOnly | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/allocationSize)
   */
  allocationSize(options?: VideoFrameCopyToOptions): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/clone)
   */
  clone(): VideoFrame;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/close)
   */
  close(): void;
  copyTo(
    destination: AllowSharedBufferSource,
    options?: VideoFrameCopyToOptions,
  ): Promise<readonly PlaneLayout[]>;
}

declare var VideoFrame: {
  readonly prototype: VideoFrame;
  new (image: CanvasImageSource, init?: VideoFrameInit): VideoFrame;
  new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame;
};

/**
 * Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and
 * contains metrics that can be used to determine the playback quality of a
 * video.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)
 */
interface VideoPlaybackQuality {
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames)
   */
  readonly corruptedVideoFrames: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime)
   */
  readonly creationTime: DOMHighResTimeStamp;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames)
   */
  readonly droppedVideoFrames: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames)
   */
  readonly totalVideoFrames: number;
}

declare var VideoPlaybackQuality: {
  readonly prototype: VideoPlaybackQuality;
  new (): VideoPlaybackQuality;
};

interface VisualViewportEventMap {
  readonly resize: Event;
  readonly scroll: Event;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport) */
interface VisualViewport extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/height)
   */
  readonly height: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft)
   */
  readonly offsetLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop)
   */
  readonly offsetTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event)
   */
  readonly onresize: ((this: VisualViewport, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event)
   */
  readonly onscroll: ((this: VisualViewport, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft)
   */
  readonly pageLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop)
   */
  readonly pageTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale)
   */
  readonly scale: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/width)
   */
  readonly width: number;
  addEventListener<K extends keyof VisualViewportEventMap>(
    type: K,
    listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof VisualViewportEventMap>(
    type: K,
    listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var VisualViewport: {
  readonly prototype: VisualViewport;
  new (): VisualViewport;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float)
 */
interface WEBGL_color_buffer_float {
  readonly RGBA32F_EXT: 0x8814;
  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211;
  readonly UNSIGNED_NORMALIZED_EXT: 0x8c17;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc)
 */
interface WEBGL_compressed_texture_astc {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles)
   */
  getSupportedProfiles(): readonly string[];
  readonly COMPRESSED_RGBA_ASTC_4x4_KHR: 0x93b0;
  readonly COMPRESSED_RGBA_ASTC_5x4_KHR: 0x93b1;
  readonly COMPRESSED_RGBA_ASTC_5x5_KHR: 0x93b2;
  readonly COMPRESSED_RGBA_ASTC_6x5_KHR: 0x93b3;
  readonly COMPRESSED_RGBA_ASTC_6x6_KHR: 0x93b4;
  readonly COMPRESSED_RGBA_ASTC_8x5_KHR: 0x93b5;
  readonly COMPRESSED_RGBA_ASTC_8x6_KHR: 0x93b6;
  readonly COMPRESSED_RGBA_ASTC_8x8_KHR: 0x93b7;
  readonly COMPRESSED_RGBA_ASTC_10x5_KHR: 0x93b8;
  readonly COMPRESSED_RGBA_ASTC_10x6_KHR: 0x93b9;
  readonly COMPRESSED_RGBA_ASTC_10x8_KHR: 0x93ba;
  readonly COMPRESSED_RGBA_ASTC_10x10_KHR: 0x93bb;
  readonly COMPRESSED_RGBA_ASTC_12x10_KHR: 0x93bc;
  readonly COMPRESSED_RGBA_ASTC_12x12_KHR: 0x93bd;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: 0x93d0;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: 0x93d1;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: 0x93d2;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: 0x93d3;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: 0x93d4;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: 0x93d5;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: 0x93d6;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: 0x93d7;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: 0x93d8;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: 0x93d9;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: 0x93da;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: 0x93db;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: 0x93dc;
  readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: 0x93dd;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc)
 */
interface WEBGL_compressed_texture_etc {
  readonly COMPRESSED_R11_EAC: 0x9270;
  readonly COMPRESSED_SIGNED_R11_EAC: 0x9271;
  readonly COMPRESSED_RG11_EAC: 0x9272;
  readonly COMPRESSED_SIGNED_RG11_EAC: 0x9273;
  readonly COMPRESSED_RGB8_ETC2: 0x9274;
  readonly COMPRESSED_SRGB8_ETC2: 0x9275;
  readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9276;
  readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9277;
  readonly COMPRESSED_RGBA8_ETC2_EAC: 0x9278;
  readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9279;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1)
 */
interface WEBGL_compressed_texture_etc1 {
  readonly COMPRESSED_RGB_ETC1_WEBGL: 0x8d64;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc)
 */
interface WEBGL_compressed_texture_pvrtc {
  readonly COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00;
  readonly COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01;
  readonly COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02;
  readonly COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03;
}

/**
 * The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and
 * exposes four S3TC compressed texture formats.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
 */
interface WEBGL_compressed_texture_s3tc {
  readonly COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0;
  readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1;
  readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2;
  readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb)
 */
interface WEBGL_compressed_texture_s3tc_srgb {
  readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: 0x8c4c;
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 0x8c4d;
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 0x8c4e;
  readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 0x8c4f;
}

/**
 * The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes
 * two constants with information about the graphics driver for debugging
 * purposes.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
 */
interface WEBGL_debug_renderer_info {
  readonly UNMASKED_VENDOR_WEBGL: 0x9245;
  readonly UNMASKED_RENDERER_WEBGL: 0x9246;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders)
 */
interface WEBGL_debug_shaders {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource)
   */
  getTranslatedShaderSource(shader: WebGLShader): string;
}

/**
 * The WEBGL_depth_texture extension is part of the WebGL API and defines 2D
 * depth and depth-stencil textures.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
 */
interface WEBGL_depth_texture {
  readonly UNSIGNED_INT_24_8_WEBGL: 0x84fa;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers)
 */
interface WEBGL_draw_buffers {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
   */
  drawBuffersWEBGL(buffers: readonly GLenum[]): void;
  readonly COLOR_ATTACHMENT0_WEBGL: 0x8ce0;
  readonly COLOR_ATTACHMENT1_WEBGL: 0x8ce1;
  readonly COLOR_ATTACHMENT2_WEBGL: 0x8ce2;
  readonly COLOR_ATTACHMENT3_WEBGL: 0x8ce3;
  readonly COLOR_ATTACHMENT4_WEBGL: 0x8ce4;
  readonly COLOR_ATTACHMENT5_WEBGL: 0x8ce5;
  readonly COLOR_ATTACHMENT6_WEBGL: 0x8ce6;
  readonly COLOR_ATTACHMENT7_WEBGL: 0x8ce7;
  readonly COLOR_ATTACHMENT8_WEBGL: 0x8ce8;
  readonly COLOR_ATTACHMENT9_WEBGL: 0x8ce9;
  readonly COLOR_ATTACHMENT10_WEBGL: 0x8cea;
  readonly COLOR_ATTACHMENT11_WEBGL: 0x8ceb;
  readonly COLOR_ATTACHMENT12_WEBGL: 0x8cec;
  readonly COLOR_ATTACHMENT13_WEBGL: 0x8ced;
  readonly COLOR_ATTACHMENT14_WEBGL: 0x8cee;
  readonly COLOR_ATTACHMENT15_WEBGL: 0x8cef;
  readonly DRAW_BUFFER0_WEBGL: 0x8825;
  readonly DRAW_BUFFER1_WEBGL: 0x8826;
  readonly DRAW_BUFFER2_WEBGL: 0x8827;
  readonly DRAW_BUFFER3_WEBGL: 0x8828;
  readonly DRAW_BUFFER4_WEBGL: 0x8829;
  readonly DRAW_BUFFER5_WEBGL: 0x882a;
  readonly DRAW_BUFFER6_WEBGL: 0x882b;
  readonly DRAW_BUFFER7_WEBGL: 0x882c;
  readonly DRAW_BUFFER8_WEBGL: 0x882d;
  readonly DRAW_BUFFER9_WEBGL: 0x882e;
  readonly DRAW_BUFFER10_WEBGL: 0x882f;
  readonly DRAW_BUFFER11_WEBGL: 0x8830;
  readonly DRAW_BUFFER12_WEBGL: 0x8831;
  readonly DRAW_BUFFER13_WEBGL: 0x8832;
  readonly DRAW_BUFFER14_WEBGL: 0x8833;
  readonly DRAW_BUFFER15_WEBGL: 0x8834;
  readonly MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf;
  readonly MAX_DRAW_BUFFERS_WEBGL: 0x8824;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context)
 */
interface WEBGL_lose_context {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/loseContext)
   */
  loseContext(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/restoreContext)
   */
  restoreContext(): void;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw) */
interface WEBGL_multi_draw {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
   */
  multiDrawArraysInstancedWEBGL(
    mode: GLenum,
    firstsList: Int32Array | readonly GLint[],
    firstsOffset: number,
    countsList: Int32Array | readonly GLsizei[],
    countsOffset: number,
    instanceCountsList: Int32Array | readonly GLsizei[],
    instanceCountsOffset: number,
    drawcount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
   */
  multiDrawArraysWEBGL(
    mode: GLenum,
    firstsList: Int32Array | readonly GLint[],
    firstsOffset: number,
    countsList: Int32Array | readonly GLsizei[],
    countsOffset: number,
    drawcount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
   */
  multiDrawElementsInstancedWEBGL(
    mode: GLenum,
    countsList: Int32Array | readonly GLsizei[],
    countsOffset: number,
    type: GLenum,
    offsetsList: Int32Array | readonly GLsizei[],
    offsetsOffset: number,
    instanceCountsList: Int32Array | readonly GLsizei[],
    instanceCountsOffset: number,
    drawcount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
   */
  multiDrawElementsWEBGL(
    mode: GLenum,
    countsList: Int32Array | readonly GLsizei[],
    countsOffset: number,
    type: GLenum,
    offsetsList: Int32Array | readonly GLsizei[],
    offsetsOffset: number,
    drawcount: GLsizei,
  ): void;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock)
 */
interface WakeLock {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WakeLock/request)
   */
  request(type?: WakeLockType): Promise<WakeLockSentinel>;
}

declare var WakeLock: {
  readonly prototype: WakeLock;
  new (): WakeLock;
};

interface WakeLockSentinelEventMap {
  readonly release: Event;
}

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)
 */
interface WakeLockSentinel extends EventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event)
   */
  readonly onrelease: ((this: WakeLockSentinel, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released)
   */
  readonly released: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type)
   */
  readonly type: WakeLockType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release)
   */
  release(): Promise<void>;
  addEventListener<K extends keyof WakeLockSentinelEventMap>(
    type: K,
    listener: (
      this: WakeLockSentinel,
      ev: WakeLockSentinelEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof WakeLockSentinelEventMap>(
    type: K,
    listener: (
      this: WakeLockSentinel,
      ev: WakeLockSentinelEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var WakeLockSentinel: {
  readonly prototype: WakeLockSentinel;
  new (): WakeLockSentinel;
};

/**
 * A WaveShaperNode always has exactly one input and one output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)
 */
interface WaveShaperNode extends AudioNode {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve)
   */
  readonly curve: Float32Array | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample)
   */
  readonly oversample: OverSampleType;
}

declare var WaveShaperNode: {
  readonly prototype: WaveShaperNode;
  new (context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)
 */
interface WebGL2RenderingContext
  extends WebGL2RenderingContextBase,
    WebGL2RenderingContextOverloads,
    WebGLRenderingContextBase {}

declare var WebGL2RenderingContext: {
  readonly prototype: WebGL2RenderingContext;
  new (): WebGL2RenderingContext;
  readonly READ_BUFFER: 0x0c02;
  readonly UNPACK_ROW_LENGTH: 0x0cf2;
  readonly UNPACK_SKIP_ROWS: 0x0cf3;
  readonly UNPACK_SKIP_PIXELS: 0x0cf4;
  readonly PACK_ROW_LENGTH: 0x0d02;
  readonly PACK_SKIP_ROWS: 0x0d03;
  readonly PACK_SKIP_PIXELS: 0x0d04;
  readonly COLOR: 0x1800;
  readonly DEPTH: 0x1801;
  readonly STENCIL: 0x1802;
  readonly RED: 0x1903;
  readonly RGB8: 0x8051;
  readonly RGB10_A2: 0x8059;
  readonly TEXTURE_BINDING_3D: 0x806a;
  readonly UNPACK_SKIP_IMAGES: 0x806d;
  readonly UNPACK_IMAGE_HEIGHT: 0x806e;
  readonly TEXTURE_3D: 0x806f;
  readonly TEXTURE_WRAP_R: 0x8072;
  readonly MAX_3D_TEXTURE_SIZE: 0x8073;
  readonly UNSIGNED_INT_2_10_10_10_REV: 0x8368;
  readonly MAX_ELEMENTS_VERTICES: 0x80e8;
  readonly MAX_ELEMENTS_INDICES: 0x80e9;
  readonly TEXTURE_MIN_LOD: 0x813a;
  readonly TEXTURE_MAX_LOD: 0x813b;
  readonly TEXTURE_BASE_LEVEL: 0x813c;
  readonly TEXTURE_MAX_LEVEL: 0x813d;
  readonly MIN: 0x8007;
  readonly MAX: 0x8008;
  readonly DEPTH_COMPONENT24: 0x81a6;
  readonly MAX_TEXTURE_LOD_BIAS: 0x84fd;
  readonly TEXTURE_COMPARE_MODE: 0x884c;
  readonly TEXTURE_COMPARE_FUNC: 0x884d;
  readonly CURRENT_QUERY: 0x8865;
  readonly QUERY_RESULT: 0x8866;
  readonly QUERY_RESULT_AVAILABLE: 0x8867;
  readonly STREAM_READ: 0x88e1;
  readonly STREAM_COPY: 0x88e2;
  readonly STATIC_READ: 0x88e5;
  readonly STATIC_COPY: 0x88e6;
  readonly DYNAMIC_READ: 0x88e9;
  readonly DYNAMIC_COPY: 0x88ea;
  readonly MAX_DRAW_BUFFERS: 0x8824;
  readonly DRAW_BUFFER0: 0x8825;
  readonly DRAW_BUFFER1: 0x8826;
  readonly DRAW_BUFFER2: 0x8827;
  readonly DRAW_BUFFER3: 0x8828;
  readonly DRAW_BUFFER4: 0x8829;
  readonly DRAW_BUFFER5: 0x882a;
  readonly DRAW_BUFFER6: 0x882b;
  readonly DRAW_BUFFER7: 0x882c;
  readonly DRAW_BUFFER8: 0x882d;
  readonly DRAW_BUFFER9: 0x882e;
  readonly DRAW_BUFFER10: 0x882f;
  readonly DRAW_BUFFER11: 0x8830;
  readonly DRAW_BUFFER12: 0x8831;
  readonly DRAW_BUFFER13: 0x8832;
  readonly DRAW_BUFFER14: 0x8833;
  readonly DRAW_BUFFER15: 0x8834;
  readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49;
  readonly MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a;
  readonly SAMPLER_3D: 0x8b5f;
  readonly SAMPLER_2D_SHADOW: 0x8b62;
  readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b;
  readonly PIXEL_PACK_BUFFER: 0x88eb;
  readonly PIXEL_UNPACK_BUFFER: 0x88ec;
  readonly PIXEL_PACK_BUFFER_BINDING: 0x88ed;
  readonly PIXEL_UNPACK_BUFFER_BINDING: 0x88ef;
  readonly FLOAT_MAT2x3: 0x8b65;
  readonly FLOAT_MAT2x4: 0x8b66;
  readonly FLOAT_MAT3x2: 0x8b67;
  readonly FLOAT_MAT3x4: 0x8b68;
  readonly FLOAT_MAT4x2: 0x8b69;
  readonly FLOAT_MAT4x3: 0x8b6a;
  readonly SRGB: 0x8c40;
  readonly SRGB8: 0x8c41;
  readonly SRGB8_ALPHA8: 0x8c43;
  readonly COMPARE_REF_TO_TEXTURE: 0x884e;
  readonly RGBA32F: 0x8814;
  readonly RGB32F: 0x8815;
  readonly RGBA16F: 0x881a;
  readonly RGB16F: 0x881b;
  readonly VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd;
  readonly MAX_ARRAY_TEXTURE_LAYERS: 0x88ff;
  readonly MIN_PROGRAM_TEXEL_OFFSET: 0x8904;
  readonly MAX_PROGRAM_TEXEL_OFFSET: 0x8905;
  readonly MAX_VARYING_COMPONENTS: 0x8b4b;
  readonly TEXTURE_2D_ARRAY: 0x8c1a;
  readonly TEXTURE_BINDING_2D_ARRAY: 0x8c1d;
  readonly R11F_G11F_B10F: 0x8c3a;
  readonly UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b;
  readonly RGB9_E5: 0x8c3d;
  readonly UNSIGNED_INT_5_9_9_9_REV: 0x8c3e;
  readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f;
  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80;
  readonly TRANSFORM_FEEDBACK_VARYINGS: 0x8c83;
  readonly TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84;
  readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85;
  readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88;
  readonly RASTERIZER_DISCARD: 0x8c89;
  readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a;
  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b;
  readonly INTERLEAVED_ATTRIBS: 0x8c8c;
  readonly SEPARATE_ATTRIBS: 0x8c8d;
  readonly TRANSFORM_FEEDBACK_BUFFER: 0x8c8e;
  readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f;
  readonly RGBA32UI: 0x8d70;
  readonly RGB32UI: 0x8d71;
  readonly RGBA16UI: 0x8d76;
  readonly RGB16UI: 0x8d77;
  readonly RGBA8UI: 0x8d7c;
  readonly RGB8UI: 0x8d7d;
  readonly RGBA32I: 0x8d82;
  readonly RGB32I: 0x8d83;
  readonly RGBA16I: 0x8d88;
  readonly RGB16I: 0x8d89;
  readonly RGBA8I: 0x8d8e;
  readonly RGB8I: 0x8d8f;
  readonly RED_INTEGER: 0x8d94;
  readonly RGB_INTEGER: 0x8d98;
  readonly RGBA_INTEGER: 0x8d99;
  readonly SAMPLER_2D_ARRAY: 0x8dc1;
  readonly SAMPLER_2D_ARRAY_SHADOW: 0x8dc4;
  readonly SAMPLER_CUBE_SHADOW: 0x8dc5;
  readonly UNSIGNED_INT_VEC2: 0x8dc6;
  readonly UNSIGNED_INT_VEC3: 0x8dc7;
  readonly UNSIGNED_INT_VEC4: 0x8dc8;
  readonly INT_SAMPLER_2D: 0x8dca;
  readonly INT_SAMPLER_3D: 0x8dcb;
  readonly INT_SAMPLER_CUBE: 0x8dcc;
  readonly INT_SAMPLER_2D_ARRAY: 0x8dcf;
  readonly UNSIGNED_INT_SAMPLER_2D: 0x8dd2;
  readonly UNSIGNED_INT_SAMPLER_3D: 0x8dd3;
  readonly UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4;
  readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7;
  readonly DEPTH_COMPONENT32F: 0x8cac;
  readonly DEPTH32F_STENCIL8: 0x8cad;
  readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad;
  readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210;
  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211;
  readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212;
  readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213;
  readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214;
  readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215;
  readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216;
  readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217;
  readonly FRAMEBUFFER_DEFAULT: 0x8218;
  readonly UNSIGNED_INT_24_8: 0x84fa;
  readonly DEPTH24_STENCIL8: 0x88f0;
  readonly UNSIGNED_NORMALIZED: 0x8c17;
  readonly DRAW_FRAMEBUFFER_BINDING: 0x8ca6;
  readonly READ_FRAMEBUFFER: 0x8ca8;
  readonly DRAW_FRAMEBUFFER: 0x8ca9;
  readonly READ_FRAMEBUFFER_BINDING: 0x8caa;
  readonly RENDERBUFFER_SAMPLES: 0x8cab;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4;
  readonly MAX_COLOR_ATTACHMENTS: 0x8cdf;
  readonly COLOR_ATTACHMENT1: 0x8ce1;
  readonly COLOR_ATTACHMENT2: 0x8ce2;
  readonly COLOR_ATTACHMENT3: 0x8ce3;
  readonly COLOR_ATTACHMENT4: 0x8ce4;
  readonly COLOR_ATTACHMENT5: 0x8ce5;
  readonly COLOR_ATTACHMENT6: 0x8ce6;
  readonly COLOR_ATTACHMENT7: 0x8ce7;
  readonly COLOR_ATTACHMENT8: 0x8ce8;
  readonly COLOR_ATTACHMENT9: 0x8ce9;
  readonly COLOR_ATTACHMENT10: 0x8cea;
  readonly COLOR_ATTACHMENT11: 0x8ceb;
  readonly COLOR_ATTACHMENT12: 0x8cec;
  readonly COLOR_ATTACHMENT13: 0x8ced;
  readonly COLOR_ATTACHMENT14: 0x8cee;
  readonly COLOR_ATTACHMENT15: 0x8cef;
  readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56;
  readonly MAX_SAMPLES: 0x8d57;
  readonly HALF_FLOAT: 0x140b;
  readonly RG: 0x8227;
  readonly RG_INTEGER: 0x8228;
  readonly R8: 0x8229;
  readonly RG8: 0x822b;
  readonly R16F: 0x822d;
  readonly R32F: 0x822e;
  readonly RG16F: 0x822f;
  readonly RG32F: 0x8230;
  readonly R8I: 0x8231;
  readonly R8UI: 0x8232;
  readonly R16I: 0x8233;
  readonly R16UI: 0x8234;
  readonly R32I: 0x8235;
  readonly R32UI: 0x8236;
  readonly RG8I: 0x8237;
  readonly RG8UI: 0x8238;
  readonly RG16I: 0x8239;
  readonly RG16UI: 0x823a;
  readonly RG32I: 0x823b;
  readonly RG32UI: 0x823c;
  readonly VERTEX_ARRAY_BINDING: 0x85b5;
  readonly R8_SNORM: 0x8f94;
  readonly RG8_SNORM: 0x8f95;
  readonly RGB8_SNORM: 0x8f96;
  readonly RGBA8_SNORM: 0x8f97;
  readonly SIGNED_NORMALIZED: 0x8f9c;
  readonly COPY_READ_BUFFER: 0x8f36;
  readonly COPY_WRITE_BUFFER: 0x8f37;
  readonly COPY_READ_BUFFER_BINDING: 0x8f36;
  readonly COPY_WRITE_BUFFER_BINDING: 0x8f37;
  readonly UNIFORM_BUFFER: 0x8a11;
  readonly UNIFORM_BUFFER_BINDING: 0x8a28;
  readonly UNIFORM_BUFFER_START: 0x8a29;
  readonly UNIFORM_BUFFER_SIZE: 0x8a2a;
  readonly MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b;
  readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d;
  readonly MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e;
  readonly MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f;
  readonly MAX_UNIFORM_BLOCK_SIZE: 0x8a30;
  readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31;
  readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33;
  readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34;
  readonly ACTIVE_UNIFORM_BLOCKS: 0x8a36;
  readonly UNIFORM_TYPE: 0x8a37;
  readonly UNIFORM_SIZE: 0x8a38;
  readonly UNIFORM_BLOCK_INDEX: 0x8a3a;
  readonly UNIFORM_OFFSET: 0x8a3b;
  readonly UNIFORM_ARRAY_STRIDE: 0x8a3c;
  readonly UNIFORM_MATRIX_STRIDE: 0x8a3d;
  readonly UNIFORM_IS_ROW_MAJOR: 0x8a3e;
  readonly UNIFORM_BLOCK_BINDING: 0x8a3f;
  readonly UNIFORM_BLOCK_DATA_SIZE: 0x8a40;
  readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42;
  readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43;
  readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44;
  readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46;
  readonly INVALID_INDEX: 0xffffffff;
  readonly MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122;
  readonly MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125;
  readonly MAX_SERVER_WAIT_TIMEOUT: 0x9111;
  readonly OBJECT_TYPE: 0x9112;
  readonly SYNC_CONDITION: 0x9113;
  readonly SYNC_STATUS: 0x9114;
  readonly SYNC_FLAGS: 0x9115;
  readonly SYNC_FENCE: 0x9116;
  readonly SYNC_GPU_COMMANDS_COMPLETE: 0x9117;
  readonly UNSIGNALED: 0x9118;
  readonly SIGNALED: 0x9119;
  readonly ALREADY_SIGNALED: 0x911a;
  readonly TIMEOUT_EXPIRED: 0x911b;
  readonly CONDITION_SATISFIED: 0x911c;
  readonly WAIT_FAILED: 0x911d;
  readonly SYNC_FLUSH_COMMANDS_BIT: 0x00000001;
  readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe;
  readonly ANY_SAMPLES_PASSED: 0x8c2f;
  readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a;
  readonly SAMPLER_BINDING: 0x8919;
  readonly RGB10_A2UI: 0x906f;
  readonly INT_2_10_10_10_REV: 0x8d9f;
  readonly TRANSFORM_FEEDBACK: 0x8e22;
  readonly TRANSFORM_FEEDBACK_PAUSED: 0x8e23;
  readonly TRANSFORM_FEEDBACK_ACTIVE: 0x8e24;
  readonly TRANSFORM_FEEDBACK_BINDING: 0x8e25;
  readonly TEXTURE_IMMUTABLE_FORMAT: 0x912f;
  readonly MAX_ELEMENT_INDEX: 0x8d6b;
  readonly TEXTURE_IMMUTABLE_LEVELS: 0x82df;
  readonly TIMEOUT_IGNORED: -1;
  readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247;
  readonly DEPTH_BUFFER_BIT: 0x00000100;
  readonly STENCIL_BUFFER_BIT: 0x00000400;
  readonly COLOR_BUFFER_BIT: 0x00004000;
  readonly POINTS: 0x0000;
  readonly LINES: 0x0001;
  readonly LINE_LOOP: 0x0002;
  readonly LINE_STRIP: 0x0003;
  readonly TRIANGLES: 0x0004;
  readonly TRIANGLE_STRIP: 0x0005;
  readonly TRIANGLE_FAN: 0x0006;
  readonly ZERO: 0;
  readonly ONE: 1;
  readonly SRC_COLOR: 0x0300;
  readonly ONE_MINUS_SRC_COLOR: 0x0301;
  readonly SRC_ALPHA: 0x0302;
  readonly ONE_MINUS_SRC_ALPHA: 0x0303;
  readonly DST_ALPHA: 0x0304;
  readonly ONE_MINUS_DST_ALPHA: 0x0305;
  readonly DST_COLOR: 0x0306;
  readonly ONE_MINUS_DST_COLOR: 0x0307;
  readonly SRC_ALPHA_SATURATE: 0x0308;
  readonly FUNC_ADD: 0x8006;
  readonly BLEND_EQUATION: 0x8009;
  readonly BLEND_EQUATION_RGB: 0x8009;
  readonly BLEND_EQUATION_ALPHA: 0x883d;
  readonly FUNC_SUBTRACT: 0x800a;
  readonly FUNC_REVERSE_SUBTRACT: 0x800b;
  readonly BLEND_DST_RGB: 0x80c8;
  readonly BLEND_SRC_RGB: 0x80c9;
  readonly BLEND_DST_ALPHA: 0x80ca;
  readonly BLEND_SRC_ALPHA: 0x80cb;
  readonly CONSTANT_COLOR: 0x8001;
  readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
  readonly CONSTANT_ALPHA: 0x8003;
  readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
  readonly BLEND_COLOR: 0x8005;
  readonly ARRAY_BUFFER: 0x8892;
  readonly ELEMENT_ARRAY_BUFFER: 0x8893;
  readonly ARRAY_BUFFER_BINDING: 0x8894;
  readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
  readonly STREAM_DRAW: 0x88e0;
  readonly STATIC_DRAW: 0x88e4;
  readonly DYNAMIC_DRAW: 0x88e8;
  readonly BUFFER_SIZE: 0x8764;
  readonly BUFFER_USAGE: 0x8765;
  readonly CURRENT_VERTEX_ATTRIB: 0x8626;
  readonly FRONT: 0x0404;
  readonly BACK: 0x0405;
  readonly FRONT_AND_BACK: 0x0408;
  readonly CULL_FACE: 0x0b44;
  readonly BLEND: 0x0be2;
  readonly DITHER: 0x0bd0;
  readonly STENCIL_TEST: 0x0b90;
  readonly DEPTH_TEST: 0x0b71;
  readonly SCISSOR_TEST: 0x0c11;
  readonly POLYGON_OFFSET_FILL: 0x8037;
  readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809e;
  readonly SAMPLE_COVERAGE: 0x80a0;
  readonly NO_ERROR: 0;
  readonly INVALID_ENUM: 0x0500;
  readonly INVALID_VALUE: 0x0501;
  readonly INVALID_OPERATION: 0x0502;
  readonly OUT_OF_MEMORY: 0x0505;
  readonly CW: 0x0900;
  readonly CCW: 0x0901;
  readonly LINE_WIDTH: 0x0b21;
  readonly ALIASED_POINT_SIZE_RANGE: 0x846d;
  readonly ALIASED_LINE_WIDTH_RANGE: 0x846e;
  readonly CULL_FACE_MODE: 0x0b45;
  readonly FRONT_FACE: 0x0b46;
  readonly DEPTH_RANGE: 0x0b70;
  readonly DEPTH_WRITEMASK: 0x0b72;
  readonly DEPTH_CLEAR_VALUE: 0x0b73;
  readonly DEPTH_FUNC: 0x0b74;
  readonly STENCIL_CLEAR_VALUE: 0x0b91;
  readonly STENCIL_FUNC: 0x0b92;
  readonly STENCIL_FAIL: 0x0b94;
  readonly STENCIL_PASS_DEPTH_FAIL: 0x0b95;
  readonly STENCIL_PASS_DEPTH_PASS: 0x0b96;
  readonly STENCIL_REF: 0x0b97;
  readonly STENCIL_VALUE_MASK: 0x0b93;
  readonly STENCIL_WRITEMASK: 0x0b98;
  readonly STENCIL_BACK_FUNC: 0x8800;
  readonly STENCIL_BACK_FAIL: 0x8801;
  readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
  readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
  readonly STENCIL_BACK_REF: 0x8ca3;
  readonly STENCIL_BACK_VALUE_MASK: 0x8ca4;
  readonly STENCIL_BACK_WRITEMASK: 0x8ca5;
  readonly VIEWPORT: 0x0ba2;
  readonly SCISSOR_BOX: 0x0c10;
  readonly COLOR_CLEAR_VALUE: 0x0c22;
  readonly COLOR_WRITEMASK: 0x0c23;
  readonly UNPACK_ALIGNMENT: 0x0cf5;
  readonly PACK_ALIGNMENT: 0x0d05;
  readonly MAX_TEXTURE_SIZE: 0x0d33;
  readonly MAX_VIEWPORT_DIMS: 0x0d3a;
  readonly SUBPIXEL_BITS: 0x0d50;
  readonly RED_BITS: 0x0d52;
  readonly GREEN_BITS: 0x0d53;
  readonly BLUE_BITS: 0x0d54;
  readonly ALPHA_BITS: 0x0d55;
  readonly DEPTH_BITS: 0x0d56;
  readonly STENCIL_BITS: 0x0d57;
  readonly POLYGON_OFFSET_UNITS: 0x2a00;
  readonly POLYGON_OFFSET_FACTOR: 0x8038;
  readonly TEXTURE_BINDING_2D: 0x8069;
  readonly SAMPLE_BUFFERS: 0x80a8;
  readonly SAMPLES: 0x80a9;
  readonly SAMPLE_COVERAGE_VALUE: 0x80aa;
  readonly SAMPLE_COVERAGE_INVERT: 0x80ab;
  readonly COMPRESSED_TEXTURE_FORMATS: 0x86a3;
  readonly DONT_CARE: 0x1100;
  readonly FASTEST: 0x1101;
  readonly NICEST: 0x1102;
  readonly GENERATE_MIPMAP_HINT: 0x8192;
  readonly BYTE: 0x1400;
  readonly UNSIGNED_BYTE: 0x1401;
  readonly SHORT: 0x1402;
  readonly UNSIGNED_SHORT: 0x1403;
  readonly INT: 0x1404;
  readonly UNSIGNED_INT: 0x1405;
  readonly FLOAT: 0x1406;
  readonly DEPTH_COMPONENT: 0x1902;
  readonly ALPHA: 0x1906;
  readonly RGB: 0x1907;
  readonly RGBA: 0x1908;
  readonly LUMINANCE: 0x1909;
  readonly LUMINANCE_ALPHA: 0x190a;
  readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
  readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
  readonly UNSIGNED_SHORT_5_6_5: 0x8363;
  readonly FRAGMENT_SHADER: 0x8b30;
  readonly VERTEX_SHADER: 0x8b31;
  readonly MAX_VERTEX_ATTRIBS: 0x8869;
  readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb;
  readonly MAX_VARYING_VECTORS: 0x8dfc;
  readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d;
  readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c;
  readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
  readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd;
  readonly SHADER_TYPE: 0x8b4f;
  readonly DELETE_STATUS: 0x8b80;
  readonly LINK_STATUS: 0x8b82;
  readonly VALIDATE_STATUS: 0x8b83;
  readonly ATTACHED_SHADERS: 0x8b85;
  readonly ACTIVE_UNIFORMS: 0x8b86;
  readonly ACTIVE_ATTRIBUTES: 0x8b89;
  readonly SHADING_LANGUAGE_VERSION: 0x8b8c;
  readonly CURRENT_PROGRAM: 0x8b8d;
  readonly NEVER: 0x0200;
  readonly LESS: 0x0201;
  readonly EQUAL: 0x0202;
  readonly LEQUAL: 0x0203;
  readonly GREATER: 0x0204;
  readonly NOTEQUAL: 0x0205;
  readonly GEQUAL: 0x0206;
  readonly ALWAYS: 0x0207;
  readonly KEEP: 0x1e00;
  readonly REPLACE: 0x1e01;
  readonly INCR: 0x1e02;
  readonly DECR: 0x1e03;
  readonly INVERT: 0x150a;
  readonly INCR_WRAP: 0x8507;
  readonly DECR_WRAP: 0x8508;
  readonly VENDOR: 0x1f00;
  readonly RENDERER: 0x1f01;
  readonly VERSION: 0x1f02;
  readonly NEAREST: 0x2600;
  readonly LINEAR: 0x2601;
  readonly NEAREST_MIPMAP_NEAREST: 0x2700;
  readonly LINEAR_MIPMAP_NEAREST: 0x2701;
  readonly NEAREST_MIPMAP_LINEAR: 0x2702;
  readonly LINEAR_MIPMAP_LINEAR: 0x2703;
  readonly TEXTURE_MAG_FILTER: 0x2800;
  readonly TEXTURE_MIN_FILTER: 0x2801;
  readonly TEXTURE_WRAP_S: 0x2802;
  readonly TEXTURE_WRAP_T: 0x2803;
  readonly TEXTURE_2D: 0x0de1;
  readonly TEXTURE: 0x1702;
  readonly TEXTURE_CUBE_MAP: 0x8513;
  readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
  readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a;
  readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c;
  readonly TEXTURE0: 0x84c0;
  readonly TEXTURE1: 0x84c1;
  readonly TEXTURE2: 0x84c2;
  readonly TEXTURE3: 0x84c3;
  readonly TEXTURE4: 0x84c4;
  readonly TEXTURE5: 0x84c5;
  readonly TEXTURE6: 0x84c6;
  readonly TEXTURE7: 0x84c7;
  readonly TEXTURE8: 0x84c8;
  readonly TEXTURE9: 0x84c9;
  readonly TEXTURE10: 0x84ca;
  readonly TEXTURE11: 0x84cb;
  readonly TEXTURE12: 0x84cc;
  readonly TEXTURE13: 0x84cd;
  readonly TEXTURE14: 0x84ce;
  readonly TEXTURE15: 0x84cf;
  readonly TEXTURE16: 0x84d0;
  readonly TEXTURE17: 0x84d1;
  readonly TEXTURE18: 0x84d2;
  readonly TEXTURE19: 0x84d3;
  readonly TEXTURE20: 0x84d4;
  readonly TEXTURE21: 0x84d5;
  readonly TEXTURE22: 0x84d6;
  readonly TEXTURE23: 0x84d7;
  readonly TEXTURE24: 0x84d8;
  readonly TEXTURE25: 0x84d9;
  readonly TEXTURE26: 0x84da;
  readonly TEXTURE27: 0x84db;
  readonly TEXTURE28: 0x84dc;
  readonly TEXTURE29: 0x84dd;
  readonly TEXTURE30: 0x84de;
  readonly TEXTURE31: 0x84df;
  readonly ACTIVE_TEXTURE: 0x84e0;
  readonly REPEAT: 0x2901;
  readonly CLAMP_TO_EDGE: 0x812f;
  readonly MIRRORED_REPEAT: 0x8370;
  readonly FLOAT_VEC2: 0x8b50;
  readonly FLOAT_VEC3: 0x8b51;
  readonly FLOAT_VEC4: 0x8b52;
  readonly INT_VEC2: 0x8b53;
  readonly INT_VEC3: 0x8b54;
  readonly INT_VEC4: 0x8b55;
  readonly BOOL: 0x8b56;
  readonly BOOL_VEC2: 0x8b57;
  readonly BOOL_VEC3: 0x8b58;
  readonly BOOL_VEC4: 0x8b59;
  readonly FLOAT_MAT2: 0x8b5a;
  readonly FLOAT_MAT3: 0x8b5b;
  readonly FLOAT_MAT4: 0x8b5c;
  readonly SAMPLER_2D: 0x8b5e;
  readonly SAMPLER_CUBE: 0x8b60;
  readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
  readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
  readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
  readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
  readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a;
  readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
  readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f;
  readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a;
  readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b;
  readonly COMPILE_STATUS: 0x8b81;
  readonly LOW_FLOAT: 0x8df0;
  readonly MEDIUM_FLOAT: 0x8df1;
  readonly HIGH_FLOAT: 0x8df2;
  readonly LOW_INT: 0x8df3;
  readonly MEDIUM_INT: 0x8df4;
  readonly HIGH_INT: 0x8df5;
  readonly FRAMEBUFFER: 0x8d40;
  readonly RENDERBUFFER: 0x8d41;
  readonly RGBA4: 0x8056;
  readonly RGB5_A1: 0x8057;
  readonly RGBA8: 0x8058;
  readonly RGB565: 0x8d62;
  readonly DEPTH_COMPONENT16: 0x81a5;
  readonly STENCIL_INDEX8: 0x8d48;
  readonly DEPTH_STENCIL: 0x84f9;
  readonly RENDERBUFFER_WIDTH: 0x8d42;
  readonly RENDERBUFFER_HEIGHT: 0x8d43;
  readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8d44;
  readonly RENDERBUFFER_RED_SIZE: 0x8d50;
  readonly RENDERBUFFER_GREEN_SIZE: 0x8d51;
  readonly RENDERBUFFER_BLUE_SIZE: 0x8d52;
  readonly RENDERBUFFER_ALPHA_SIZE: 0x8d53;
  readonly RENDERBUFFER_DEPTH_SIZE: 0x8d54;
  readonly RENDERBUFFER_STENCIL_SIZE: 0x8d55;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3;
  readonly COLOR_ATTACHMENT0: 0x8ce0;
  readonly DEPTH_ATTACHMENT: 0x8d00;
  readonly STENCIL_ATTACHMENT: 0x8d20;
  readonly DEPTH_STENCIL_ATTACHMENT: 0x821a;
  readonly NONE: 0;
  readonly FRAMEBUFFER_COMPLETE: 0x8cd5;
  readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6;
  readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7;
  readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9;
  readonly FRAMEBUFFER_UNSUPPORTED: 0x8cdd;
  readonly FRAMEBUFFER_BINDING: 0x8ca6;
  readonly RENDERBUFFER_BINDING: 0x8ca7;
  readonly MAX_RENDERBUFFER_SIZE: 0x84e8;
  readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
  readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
  readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
  readonly CONTEXT_LOST_WEBGL: 0x9242;
  readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
  readonly BROWSER_DEFAULT_WEBGL: 0x9244;
};

interface WebGL2RenderingContextBase {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginQuery)
   */
  beginQuery(target: GLenum, query: WebGLQuery): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback)
   */
  beginTransformFeedback(primitiveMode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferBase)
   */
  bindBufferBase(
    target: GLenum,
    index: GLuint,
    buffer: WebGLBuffer | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferRange)
   */
  bindBufferRange(
    target: GLenum,
    index: GLuint,
    buffer: WebGLBuffer | null,
    offset: GLintptr,
    size: GLsizeiptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindSampler)
   */
  bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback)
   */
  bindTransformFeedback(
    target: GLenum,
    tf: WebGLTransformFeedback | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindVertexArray)
   */
  bindVertexArray(array: WebGLVertexArrayObject | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/blitFramebuffer)
   */
  blitFramebuffer(
    srcX0: GLint,
    srcY0: GLint,
    srcX1: GLint,
    srcY1: GLint,
    dstX0: GLint,
    dstY0: GLint,
    dstX1: GLint,
    dstY1: GLint,
    mask: GLbitfield,
    filter: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
   */
  clearBufferfi(
    buffer: GLenum,
    drawbuffer: GLint,
    depth: GLfloat,
    stencil: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
   */
  clearBufferfv(
    buffer: GLenum,
    drawbuffer: GLint,
    values: Float32List,
    srcOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
   */
  clearBufferiv(
    buffer: GLenum,
    drawbuffer: GLint,
    values: Int32List,
    srcOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
   */
  clearBufferuiv(
    buffer: GLenum,
    drawbuffer: GLint,
    values: Uint32List,
    srcOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clientWaitSync)
   */
  clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
   */
  compressedTexImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    imageSize: GLsizei,
    offset: GLintptr,
  ): void;
  compressedTexImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    srcData: ArrayBufferView,
    srcOffset?: number,
    srcLengthOverride?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
   */
  compressedTexSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    format: GLenum,
    imageSize: GLsizei,
    offset: GLintptr,
  ): void;
  compressedTexSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    format: GLenum,
    srcData: ArrayBufferView,
    srcOffset?: number,
    srcLengthOverride?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyBufferSubData)
   */
  copyBufferSubData(
    readTarget: GLenum,
    writeTarget: GLenum,
    readOffset: GLintptr,
    writeOffset: GLintptr,
    size: GLsizeiptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D)
   */
  copyTexSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createQuery)
   */
  createQuery(): WebGLQuery | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createSampler)
   */
  createSampler(): WebGLSampler | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createTransformFeedback)
   */
  createTransformFeedback(): WebGLTransformFeedback | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createVertexArray)
   */
  createVertexArray(): WebGLVertexArrayObject | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteQuery)
   */
  deleteQuery(query: WebGLQuery | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSampler)
   */
  deleteSampler(sampler: WebGLSampler | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSync)
   */
  deleteSync(sync: WebGLSync | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback)
   */
  deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteVertexArray)
   */
  deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced)
   */
  drawArraysInstanced(
    mode: GLenum,
    first: GLint,
    count: GLsizei,
    instanceCount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
   */
  drawBuffers(buffers: readonly GLenum[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced)
   */
  drawElementsInstanced(
    mode: GLenum,
    count: GLsizei,
    type: GLenum,
    offset: GLintptr,
    instanceCount: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawRangeElements)
   */
  drawRangeElements(
    mode: GLenum,
    start: GLuint,
    end: GLuint,
    count: GLsizei,
    type: GLenum,
    offset: GLintptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endQuery)
   */
  endQuery(target: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endTransformFeedback)
   */
  endTransformFeedback(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/fenceSync)
   */
  fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer)
   */
  framebufferTextureLayer(
    target: GLenum,
    attachment: GLenum,
    texture: WebGLTexture | null,
    level: GLint,
    layer: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName)
   */
  getActiveUniformBlockName(
    program: WebGLProgram,
    uniformBlockIndex: GLuint,
  ): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter)
   */
  getActiveUniformBlockParameter(
    program: WebGLProgram,
    uniformBlockIndex: GLuint,
    pname: GLenum,
  ): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
   */
  getActiveUniforms(
    program: WebGLProgram,
    uniformIndices: readonly GLuint[],
    pname: GLenum,
  ): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getBufferSubData)
   */
  getBufferSubData(
    target: GLenum,
    srcByteOffset: GLintptr,
    dstBuffer: ArrayBufferView,
    dstOffset?: number,
    length?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getFragDataLocation)
   */
  getFragDataLocation(program: WebGLProgram, name: string): GLint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getIndexedParameter)
   */
  getIndexedParameter(target: GLenum, index: GLuint): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter)
   */
  getInternalformatParameter(
    target: GLenum,
    internalformat: GLenum,
    pname: GLenum,
  ): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQuery)
   */
  getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQueryParameter)
   */
  getQueryParameter(query: WebGLQuery, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSamplerParameter)
   */
  getSamplerParameter(sampler: WebGLSampler, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSyncParameter)
   */
  getSyncParameter(sync: WebGLSync, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying)
   */
  getTransformFeedbackVarying(
    program: WebGLProgram,
    index: GLuint,
  ): WebGLActiveInfo | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex)
   */
  getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
   */
  getUniformIndices(
    program: WebGLProgram,
    uniformNames: readonly string[],
  ): readonly GLuint[] | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
   */
  invalidateFramebuffer(target: GLenum, attachments: readonly GLenum[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
   */
  invalidateSubFramebuffer(
    target: GLenum,
    attachments: readonly GLenum[],
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isQuery)
   */
  isQuery(query: WebGLQuery | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSampler)
   */
  isSampler(sampler: WebGLSampler | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSync)
   */
  isSync(sync: WebGLSync | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isTransformFeedback)
   */
  isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isVertexArray)
   */
  isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback)
   */
  pauseTransformFeedback(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/readBuffer)
   */
  readBuffer(src: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample)
   */
  renderbufferStorageMultisample(
    target: GLenum,
    samples: GLsizei,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback)
   */
  resumeTransformFeedback(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
   */
  samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
   */
  samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
   */
  texImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    pboOffset: GLintptr,
  ): void;
  texImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    srcData: ArrayBufferView | null,
  ): void;
  texImage3D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    srcData: ArrayBufferView,
    srcOffset: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage2D)
   */
  texStorage2D(
    target: GLenum,
    levels: GLsizei,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage3D)
   */
  texStorage3D(
    target: GLenum,
    levels: GLsizei,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
   */
  texSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    format: GLenum,
    type: GLenum,
    pboOffset: GLintptr,
  ): void;
  texSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texSubImage3D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    zoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
    format: GLenum,
    type: GLenum,
    srcData: ArrayBufferView | null,
    srcOffset?: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
   */
  transformFeedbackVaryings(
    program: WebGLProgram,
    varyings: readonly string[],
    bufferMode: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform1uiv(
    location: WebGLUniformLocation | null,
    data: Uint32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform2ui(
    location: WebGLUniformLocation | null,
    v0: GLuint,
    v1: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform2uiv(
    location: WebGLUniformLocation | null,
    data: Uint32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform3ui(
    location: WebGLUniformLocation | null,
    v0: GLuint,
    v1: GLuint,
    v2: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform3uiv(
    location: WebGLUniformLocation | null,
    data: Uint32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform4ui(
    location: WebGLUniformLocation | null,
    v0: GLuint,
    v1: GLuint,
    v2: GLuint,
    v3: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
   */
  uniform4uiv(
    location: WebGLUniformLocation | null,
    data: Uint32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding)
   */
  uniformBlockBinding(
    program: WebGLProgram,
    uniformBlockIndex: GLuint,
    uniformBlockBinding: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix2x3fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix2x4fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix3x2fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix3x4fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix4x2fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
   */
  uniformMatrix4x3fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor)
   */
  vertexAttribDivisor(index: GLuint, divisor: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
   */
  vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
   */
  vertexAttribI4iv(index: GLuint, values: Int32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
   */
  vertexAttribI4ui(
    index: GLuint,
    x: GLuint,
    y: GLuint,
    z: GLuint,
    w: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
   */
  vertexAttribI4uiv(index: GLuint, values: Uint32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer)
   */
  vertexAttribIPointer(
    index: GLuint,
    size: GLint,
    type: GLenum,
    stride: GLsizei,
    offset: GLintptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/waitSync)
   */
  waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;
  readonly READ_BUFFER: 0x0c02;
  readonly UNPACK_ROW_LENGTH: 0x0cf2;
  readonly UNPACK_SKIP_ROWS: 0x0cf3;
  readonly UNPACK_SKIP_PIXELS: 0x0cf4;
  readonly PACK_ROW_LENGTH: 0x0d02;
  readonly PACK_SKIP_ROWS: 0x0d03;
  readonly PACK_SKIP_PIXELS: 0x0d04;
  readonly COLOR: 0x1800;
  readonly DEPTH: 0x1801;
  readonly STENCIL: 0x1802;
  readonly RED: 0x1903;
  readonly RGB8: 0x8051;
  readonly RGB10_A2: 0x8059;
  readonly TEXTURE_BINDING_3D: 0x806a;
  readonly UNPACK_SKIP_IMAGES: 0x806d;
  readonly UNPACK_IMAGE_HEIGHT: 0x806e;
  readonly TEXTURE_3D: 0x806f;
  readonly TEXTURE_WRAP_R: 0x8072;
  readonly MAX_3D_TEXTURE_SIZE: 0x8073;
  readonly UNSIGNED_INT_2_10_10_10_REV: 0x8368;
  readonly MAX_ELEMENTS_VERTICES: 0x80e8;
  readonly MAX_ELEMENTS_INDICES: 0x80e9;
  readonly TEXTURE_MIN_LOD: 0x813a;
  readonly TEXTURE_MAX_LOD: 0x813b;
  readonly TEXTURE_BASE_LEVEL: 0x813c;
  readonly TEXTURE_MAX_LEVEL: 0x813d;
  readonly MIN: 0x8007;
  readonly MAX: 0x8008;
  readonly DEPTH_COMPONENT24: 0x81a6;
  readonly MAX_TEXTURE_LOD_BIAS: 0x84fd;
  readonly TEXTURE_COMPARE_MODE: 0x884c;
  readonly TEXTURE_COMPARE_FUNC: 0x884d;
  readonly CURRENT_QUERY: 0x8865;
  readonly QUERY_RESULT: 0x8866;
  readonly QUERY_RESULT_AVAILABLE: 0x8867;
  readonly STREAM_READ: 0x88e1;
  readonly STREAM_COPY: 0x88e2;
  readonly STATIC_READ: 0x88e5;
  readonly STATIC_COPY: 0x88e6;
  readonly DYNAMIC_READ: 0x88e9;
  readonly DYNAMIC_COPY: 0x88ea;
  readonly MAX_DRAW_BUFFERS: 0x8824;
  readonly DRAW_BUFFER0: 0x8825;
  readonly DRAW_BUFFER1: 0x8826;
  readonly DRAW_BUFFER2: 0x8827;
  readonly DRAW_BUFFER3: 0x8828;
  readonly DRAW_BUFFER4: 0x8829;
  readonly DRAW_BUFFER5: 0x882a;
  readonly DRAW_BUFFER6: 0x882b;
  readonly DRAW_BUFFER7: 0x882c;
  readonly DRAW_BUFFER8: 0x882d;
  readonly DRAW_BUFFER9: 0x882e;
  readonly DRAW_BUFFER10: 0x882f;
  readonly DRAW_BUFFER11: 0x8830;
  readonly DRAW_BUFFER12: 0x8831;
  readonly DRAW_BUFFER13: 0x8832;
  readonly DRAW_BUFFER14: 0x8833;
  readonly DRAW_BUFFER15: 0x8834;
  readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49;
  readonly MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a;
  readonly SAMPLER_3D: 0x8b5f;
  readonly SAMPLER_2D_SHADOW: 0x8b62;
  readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b;
  readonly PIXEL_PACK_BUFFER: 0x88eb;
  readonly PIXEL_UNPACK_BUFFER: 0x88ec;
  readonly PIXEL_PACK_BUFFER_BINDING: 0x88ed;
  readonly PIXEL_UNPACK_BUFFER_BINDING: 0x88ef;
  readonly FLOAT_MAT2x3: 0x8b65;
  readonly FLOAT_MAT2x4: 0x8b66;
  readonly FLOAT_MAT3x2: 0x8b67;
  readonly FLOAT_MAT3x4: 0x8b68;
  readonly FLOAT_MAT4x2: 0x8b69;
  readonly FLOAT_MAT4x3: 0x8b6a;
  readonly SRGB: 0x8c40;
  readonly SRGB8: 0x8c41;
  readonly SRGB8_ALPHA8: 0x8c43;
  readonly COMPARE_REF_TO_TEXTURE: 0x884e;
  readonly RGBA32F: 0x8814;
  readonly RGB32F: 0x8815;
  readonly RGBA16F: 0x881a;
  readonly RGB16F: 0x881b;
  readonly VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd;
  readonly MAX_ARRAY_TEXTURE_LAYERS: 0x88ff;
  readonly MIN_PROGRAM_TEXEL_OFFSET: 0x8904;
  readonly MAX_PROGRAM_TEXEL_OFFSET: 0x8905;
  readonly MAX_VARYING_COMPONENTS: 0x8b4b;
  readonly TEXTURE_2D_ARRAY: 0x8c1a;
  readonly TEXTURE_BINDING_2D_ARRAY: 0x8c1d;
  readonly R11F_G11F_B10F: 0x8c3a;
  readonly UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b;
  readonly RGB9_E5: 0x8c3d;
  readonly UNSIGNED_INT_5_9_9_9_REV: 0x8c3e;
  readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f;
  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80;
  readonly TRANSFORM_FEEDBACK_VARYINGS: 0x8c83;
  readonly TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84;
  readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85;
  readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88;
  readonly RASTERIZER_DISCARD: 0x8c89;
  readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a;
  readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b;
  readonly INTERLEAVED_ATTRIBS: 0x8c8c;
  readonly SEPARATE_ATTRIBS: 0x8c8d;
  readonly TRANSFORM_FEEDBACK_BUFFER: 0x8c8e;
  readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f;
  readonly RGBA32UI: 0x8d70;
  readonly RGB32UI: 0x8d71;
  readonly RGBA16UI: 0x8d76;
  readonly RGB16UI: 0x8d77;
  readonly RGBA8UI: 0x8d7c;
  readonly RGB8UI: 0x8d7d;
  readonly RGBA32I: 0x8d82;
  readonly RGB32I: 0x8d83;
  readonly RGBA16I: 0x8d88;
  readonly RGB16I: 0x8d89;
  readonly RGBA8I: 0x8d8e;
  readonly RGB8I: 0x8d8f;
  readonly RED_INTEGER: 0x8d94;
  readonly RGB_INTEGER: 0x8d98;
  readonly RGBA_INTEGER: 0x8d99;
  readonly SAMPLER_2D_ARRAY: 0x8dc1;
  readonly SAMPLER_2D_ARRAY_SHADOW: 0x8dc4;
  readonly SAMPLER_CUBE_SHADOW: 0x8dc5;
  readonly UNSIGNED_INT_VEC2: 0x8dc6;
  readonly UNSIGNED_INT_VEC3: 0x8dc7;
  readonly UNSIGNED_INT_VEC4: 0x8dc8;
  readonly INT_SAMPLER_2D: 0x8dca;
  readonly INT_SAMPLER_3D: 0x8dcb;
  readonly INT_SAMPLER_CUBE: 0x8dcc;
  readonly INT_SAMPLER_2D_ARRAY: 0x8dcf;
  readonly UNSIGNED_INT_SAMPLER_2D: 0x8dd2;
  readonly UNSIGNED_INT_SAMPLER_3D: 0x8dd3;
  readonly UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4;
  readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7;
  readonly DEPTH_COMPONENT32F: 0x8cac;
  readonly DEPTH32F_STENCIL8: 0x8cad;
  readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad;
  readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210;
  readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211;
  readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212;
  readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213;
  readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214;
  readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215;
  readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216;
  readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217;
  readonly FRAMEBUFFER_DEFAULT: 0x8218;
  readonly UNSIGNED_INT_24_8: 0x84fa;
  readonly DEPTH24_STENCIL8: 0x88f0;
  readonly UNSIGNED_NORMALIZED: 0x8c17;
  readonly DRAW_FRAMEBUFFER_BINDING: 0x8ca6;
  readonly READ_FRAMEBUFFER: 0x8ca8;
  readonly DRAW_FRAMEBUFFER: 0x8ca9;
  readonly READ_FRAMEBUFFER_BINDING: 0x8caa;
  readonly RENDERBUFFER_SAMPLES: 0x8cab;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4;
  readonly MAX_COLOR_ATTACHMENTS: 0x8cdf;
  readonly COLOR_ATTACHMENT1: 0x8ce1;
  readonly COLOR_ATTACHMENT2: 0x8ce2;
  readonly COLOR_ATTACHMENT3: 0x8ce3;
  readonly COLOR_ATTACHMENT4: 0x8ce4;
  readonly COLOR_ATTACHMENT5: 0x8ce5;
  readonly COLOR_ATTACHMENT6: 0x8ce6;
  readonly COLOR_ATTACHMENT7: 0x8ce7;
  readonly COLOR_ATTACHMENT8: 0x8ce8;
  readonly COLOR_ATTACHMENT9: 0x8ce9;
  readonly COLOR_ATTACHMENT10: 0x8cea;
  readonly COLOR_ATTACHMENT11: 0x8ceb;
  readonly COLOR_ATTACHMENT12: 0x8cec;
  readonly COLOR_ATTACHMENT13: 0x8ced;
  readonly COLOR_ATTACHMENT14: 0x8cee;
  readonly COLOR_ATTACHMENT15: 0x8cef;
  readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56;
  readonly MAX_SAMPLES: 0x8d57;
  readonly HALF_FLOAT: 0x140b;
  readonly RG: 0x8227;
  readonly RG_INTEGER: 0x8228;
  readonly R8: 0x8229;
  readonly RG8: 0x822b;
  readonly R16F: 0x822d;
  readonly R32F: 0x822e;
  readonly RG16F: 0x822f;
  readonly RG32F: 0x8230;
  readonly R8I: 0x8231;
  readonly R8UI: 0x8232;
  readonly R16I: 0x8233;
  readonly R16UI: 0x8234;
  readonly R32I: 0x8235;
  readonly R32UI: 0x8236;
  readonly RG8I: 0x8237;
  readonly RG8UI: 0x8238;
  readonly RG16I: 0x8239;
  readonly RG16UI: 0x823a;
  readonly RG32I: 0x823b;
  readonly RG32UI: 0x823c;
  readonly VERTEX_ARRAY_BINDING: 0x85b5;
  readonly R8_SNORM: 0x8f94;
  readonly RG8_SNORM: 0x8f95;
  readonly RGB8_SNORM: 0x8f96;
  readonly RGBA8_SNORM: 0x8f97;
  readonly SIGNED_NORMALIZED: 0x8f9c;
  readonly COPY_READ_BUFFER: 0x8f36;
  readonly COPY_WRITE_BUFFER: 0x8f37;
  readonly COPY_READ_BUFFER_BINDING: 0x8f36;
  readonly COPY_WRITE_BUFFER_BINDING: 0x8f37;
  readonly UNIFORM_BUFFER: 0x8a11;
  readonly UNIFORM_BUFFER_BINDING: 0x8a28;
  readonly UNIFORM_BUFFER_START: 0x8a29;
  readonly UNIFORM_BUFFER_SIZE: 0x8a2a;
  readonly MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b;
  readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d;
  readonly MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e;
  readonly MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f;
  readonly MAX_UNIFORM_BLOCK_SIZE: 0x8a30;
  readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31;
  readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33;
  readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34;
  readonly ACTIVE_UNIFORM_BLOCKS: 0x8a36;
  readonly UNIFORM_TYPE: 0x8a37;
  readonly UNIFORM_SIZE: 0x8a38;
  readonly UNIFORM_BLOCK_INDEX: 0x8a3a;
  readonly UNIFORM_OFFSET: 0x8a3b;
  readonly UNIFORM_ARRAY_STRIDE: 0x8a3c;
  readonly UNIFORM_MATRIX_STRIDE: 0x8a3d;
  readonly UNIFORM_IS_ROW_MAJOR: 0x8a3e;
  readonly UNIFORM_BLOCK_BINDING: 0x8a3f;
  readonly UNIFORM_BLOCK_DATA_SIZE: 0x8a40;
  readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42;
  readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43;
  readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44;
  readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46;
  readonly INVALID_INDEX: 0xffffffff;
  readonly MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122;
  readonly MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125;
  readonly MAX_SERVER_WAIT_TIMEOUT: 0x9111;
  readonly OBJECT_TYPE: 0x9112;
  readonly SYNC_CONDITION: 0x9113;
  readonly SYNC_STATUS: 0x9114;
  readonly SYNC_FLAGS: 0x9115;
  readonly SYNC_FENCE: 0x9116;
  readonly SYNC_GPU_COMMANDS_COMPLETE: 0x9117;
  readonly UNSIGNALED: 0x9118;
  readonly SIGNALED: 0x9119;
  readonly ALREADY_SIGNALED: 0x911a;
  readonly TIMEOUT_EXPIRED: 0x911b;
  readonly CONDITION_SATISFIED: 0x911c;
  readonly WAIT_FAILED: 0x911d;
  readonly SYNC_FLUSH_COMMANDS_BIT: 0x00000001;
  readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe;
  readonly ANY_SAMPLES_PASSED: 0x8c2f;
  readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a;
  readonly SAMPLER_BINDING: 0x8919;
  readonly RGB10_A2UI: 0x906f;
  readonly INT_2_10_10_10_REV: 0x8d9f;
  readonly TRANSFORM_FEEDBACK: 0x8e22;
  readonly TRANSFORM_FEEDBACK_PAUSED: 0x8e23;
  readonly TRANSFORM_FEEDBACK_ACTIVE: 0x8e24;
  readonly TRANSFORM_FEEDBACK_BINDING: 0x8e25;
  readonly TEXTURE_IMMUTABLE_FORMAT: 0x912f;
  readonly MAX_ELEMENT_INDEX: 0x8d6b;
  readonly TEXTURE_IMMUTABLE_LEVELS: 0x82df;
  readonly TIMEOUT_IGNORED: -1;
  readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247;
}

interface WebGL2RenderingContextOverloads {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
   */
  bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;
  bufferData(
    target: GLenum,
    srcData: AllowSharedBufferSource | null,
    usage: GLenum,
  ): void;
  bufferData(
    target: GLenum,
    srcData: ArrayBufferView,
    usage: GLenum,
    srcOffset: number,
    length?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
   */
  bufferSubData(
    target: GLenum,
    dstByteOffset: GLintptr,
    srcData: AllowSharedBufferSource,
  ): void;
  bufferSubData(
    target: GLenum,
    dstByteOffset: GLintptr,
    srcData: ArrayBufferView,
    srcOffset: number,
    length?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
   */
  compressedTexImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    imageSize: GLsizei,
    offset: GLintptr,
  ): void;
  compressedTexImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    srcData: ArrayBufferView,
    srcOffset?: number,
    srcLengthOverride?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
   */
  compressedTexSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    imageSize: GLsizei,
    offset: GLintptr,
  ): void;
  compressedTexSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    srcData: ArrayBufferView,
    srcOffset?: number,
    srcLengthOverride?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
   */
  readPixels(
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    dstData: ArrayBufferView | null,
  ): void;
  readPixels(
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    offset: GLintptr,
  ): void;
  readPixels(
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    dstData: ArrayBufferView,
    dstOffset: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
   */
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    pixels: ArrayBufferView | null,
  ): void;
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    pboOffset: GLintptr,
  ): void;
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    srcData: ArrayBufferView,
    srcOffset: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
   */
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    pixels: ArrayBufferView | null,
  ): void;
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    pboOffset: GLintptr,
  ): void;
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    srcData: ArrayBufferView,
    srcOffset: number,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1fv(
    location: WebGLUniformLocation | null,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1iv(
    location: WebGLUniformLocation | null,
    data: Int32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2fv(
    location: WebGLUniformLocation | null,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2iv(
    location: WebGLUniformLocation | null,
    data: Int32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3fv(
    location: WebGLUniformLocation | null,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3iv(
    location: WebGLUniformLocation | null,
    data: Int32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4fv(
    location: WebGLUniformLocation | null,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4iv(
    location: WebGLUniformLocation | null,
    data: Int32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix2fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix3fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix4fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    data: Float32List,
    srcOffset?: number,
    srcLength?: GLuint,
  ): void;
}

/**
 * Part of the WebGL API and represents the information returned by calling the
 * WebGLRenderingContext.getActiveAttrib() and
 * WebGLRenderingContext.getActiveUniform() methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
 */
interface WebGLActiveInfo {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)
   */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)
   */
  readonly size: GLint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)
   */
  readonly type: GLenum;
}

declare var WebGLActiveInfo: {
  readonly prototype: WebGLActiveInfo;
  new (): WebGLActiveInfo;
};

/**
 * Part of the WebGL API and represents an opaque buffer object storing data
 * such as vertices or colors.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
 */
interface WebGLBuffer {}

declare var WebGLBuffer: {
  readonly prototype: WebGLBuffer;
  new (): WebGLBuffer;
};

/**
 * The WebContextEvent interface is part of the WebGL API and is an interface
 * for an event that is generated in response to a status change to the WebGL
 * rendering context.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
 */
interface WebGLContextEvent extends Event {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)
   */
  readonly statusMessage: string;
}

declare var WebGLContextEvent: {
  readonly prototype: WebGLContextEvent;
  new (type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;
};

/**
 * Part of the WebGL API and represents a collection of buffers that serve as a
 * rendering destination.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
 */
interface WebGLFramebuffer {}

declare var WebGLFramebuffer: {
  readonly prototype: WebGLFramebuffer;
  new (): WebGLFramebuffer;
};

/**
 * The WebGLProgram is part of the WebGL API and is a combination of two
 * compiled WebGLShaders consisting of a vertex shader and a fragment shader
 * (both written in GLSL).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
 */
interface WebGLProgram {}

declare var WebGLProgram: {
  readonly prototype: WebGLProgram;
  new (): WebGLProgram;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery) */
interface WebGLQuery {}

declare var WebGLQuery: {
  readonly prototype: WebGLQuery;
  new (): WebGLQuery;
};

/**
 * Part of the WebGL API and represents a buffer that can contain an image, or
 * can be source or target of an rendering operation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
 */
interface WebGLRenderbuffer {}

declare var WebGLRenderbuffer: {
  readonly prototype: WebGLRenderbuffer;
  new (): WebGLRenderbuffer;
};

/**
 * Provides an interface to the OpenGL ES 2.0 graphics rendering context for the
 * drawing surface of an HTML <canvas> element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
 */
interface WebGLRenderingContext
  extends WebGLRenderingContextBase,
    WebGLRenderingContextOverloads {}

declare var WebGLRenderingContext: {
  readonly prototype: WebGLRenderingContext;
  new (): WebGLRenderingContext;
  readonly DEPTH_BUFFER_BIT: 0x00000100;
  readonly STENCIL_BUFFER_BIT: 0x00000400;
  readonly COLOR_BUFFER_BIT: 0x00004000;
  readonly POINTS: 0x0000;
  readonly LINES: 0x0001;
  readonly LINE_LOOP: 0x0002;
  readonly LINE_STRIP: 0x0003;
  readonly TRIANGLES: 0x0004;
  readonly TRIANGLE_STRIP: 0x0005;
  readonly TRIANGLE_FAN: 0x0006;
  readonly ZERO: 0;
  readonly ONE: 1;
  readonly SRC_COLOR: 0x0300;
  readonly ONE_MINUS_SRC_COLOR: 0x0301;
  readonly SRC_ALPHA: 0x0302;
  readonly ONE_MINUS_SRC_ALPHA: 0x0303;
  readonly DST_ALPHA: 0x0304;
  readonly ONE_MINUS_DST_ALPHA: 0x0305;
  readonly DST_COLOR: 0x0306;
  readonly ONE_MINUS_DST_COLOR: 0x0307;
  readonly SRC_ALPHA_SATURATE: 0x0308;
  readonly FUNC_ADD: 0x8006;
  readonly BLEND_EQUATION: 0x8009;
  readonly BLEND_EQUATION_RGB: 0x8009;
  readonly BLEND_EQUATION_ALPHA: 0x883d;
  readonly FUNC_SUBTRACT: 0x800a;
  readonly FUNC_REVERSE_SUBTRACT: 0x800b;
  readonly BLEND_DST_RGB: 0x80c8;
  readonly BLEND_SRC_RGB: 0x80c9;
  readonly BLEND_DST_ALPHA: 0x80ca;
  readonly BLEND_SRC_ALPHA: 0x80cb;
  readonly CONSTANT_COLOR: 0x8001;
  readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
  readonly CONSTANT_ALPHA: 0x8003;
  readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
  readonly BLEND_COLOR: 0x8005;
  readonly ARRAY_BUFFER: 0x8892;
  readonly ELEMENT_ARRAY_BUFFER: 0x8893;
  readonly ARRAY_BUFFER_BINDING: 0x8894;
  readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
  readonly STREAM_DRAW: 0x88e0;
  readonly STATIC_DRAW: 0x88e4;
  readonly DYNAMIC_DRAW: 0x88e8;
  readonly BUFFER_SIZE: 0x8764;
  readonly BUFFER_USAGE: 0x8765;
  readonly CURRENT_VERTEX_ATTRIB: 0x8626;
  readonly FRONT: 0x0404;
  readonly BACK: 0x0405;
  readonly FRONT_AND_BACK: 0x0408;
  readonly CULL_FACE: 0x0b44;
  readonly BLEND: 0x0be2;
  readonly DITHER: 0x0bd0;
  readonly STENCIL_TEST: 0x0b90;
  readonly DEPTH_TEST: 0x0b71;
  readonly SCISSOR_TEST: 0x0c11;
  readonly POLYGON_OFFSET_FILL: 0x8037;
  readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809e;
  readonly SAMPLE_COVERAGE: 0x80a0;
  readonly NO_ERROR: 0;
  readonly INVALID_ENUM: 0x0500;
  readonly INVALID_VALUE: 0x0501;
  readonly INVALID_OPERATION: 0x0502;
  readonly OUT_OF_MEMORY: 0x0505;
  readonly CW: 0x0900;
  readonly CCW: 0x0901;
  readonly LINE_WIDTH: 0x0b21;
  readonly ALIASED_POINT_SIZE_RANGE: 0x846d;
  readonly ALIASED_LINE_WIDTH_RANGE: 0x846e;
  readonly CULL_FACE_MODE: 0x0b45;
  readonly FRONT_FACE: 0x0b46;
  readonly DEPTH_RANGE: 0x0b70;
  readonly DEPTH_WRITEMASK: 0x0b72;
  readonly DEPTH_CLEAR_VALUE: 0x0b73;
  readonly DEPTH_FUNC: 0x0b74;
  readonly STENCIL_CLEAR_VALUE: 0x0b91;
  readonly STENCIL_FUNC: 0x0b92;
  readonly STENCIL_FAIL: 0x0b94;
  readonly STENCIL_PASS_DEPTH_FAIL: 0x0b95;
  readonly STENCIL_PASS_DEPTH_PASS: 0x0b96;
  readonly STENCIL_REF: 0x0b97;
  readonly STENCIL_VALUE_MASK: 0x0b93;
  readonly STENCIL_WRITEMASK: 0x0b98;
  readonly STENCIL_BACK_FUNC: 0x8800;
  readonly STENCIL_BACK_FAIL: 0x8801;
  readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
  readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
  readonly STENCIL_BACK_REF: 0x8ca3;
  readonly STENCIL_BACK_VALUE_MASK: 0x8ca4;
  readonly STENCIL_BACK_WRITEMASK: 0x8ca5;
  readonly VIEWPORT: 0x0ba2;
  readonly SCISSOR_BOX: 0x0c10;
  readonly COLOR_CLEAR_VALUE: 0x0c22;
  readonly COLOR_WRITEMASK: 0x0c23;
  readonly UNPACK_ALIGNMENT: 0x0cf5;
  readonly PACK_ALIGNMENT: 0x0d05;
  readonly MAX_TEXTURE_SIZE: 0x0d33;
  readonly MAX_VIEWPORT_DIMS: 0x0d3a;
  readonly SUBPIXEL_BITS: 0x0d50;
  readonly RED_BITS: 0x0d52;
  readonly GREEN_BITS: 0x0d53;
  readonly BLUE_BITS: 0x0d54;
  readonly ALPHA_BITS: 0x0d55;
  readonly DEPTH_BITS: 0x0d56;
  readonly STENCIL_BITS: 0x0d57;
  readonly POLYGON_OFFSET_UNITS: 0x2a00;
  readonly POLYGON_OFFSET_FACTOR: 0x8038;
  readonly TEXTURE_BINDING_2D: 0x8069;
  readonly SAMPLE_BUFFERS: 0x80a8;
  readonly SAMPLES: 0x80a9;
  readonly SAMPLE_COVERAGE_VALUE: 0x80aa;
  readonly SAMPLE_COVERAGE_INVERT: 0x80ab;
  readonly COMPRESSED_TEXTURE_FORMATS: 0x86a3;
  readonly DONT_CARE: 0x1100;
  readonly FASTEST: 0x1101;
  readonly NICEST: 0x1102;
  readonly GENERATE_MIPMAP_HINT: 0x8192;
  readonly BYTE: 0x1400;
  readonly UNSIGNED_BYTE: 0x1401;
  readonly SHORT: 0x1402;
  readonly UNSIGNED_SHORT: 0x1403;
  readonly INT: 0x1404;
  readonly UNSIGNED_INT: 0x1405;
  readonly FLOAT: 0x1406;
  readonly DEPTH_COMPONENT: 0x1902;
  readonly ALPHA: 0x1906;
  readonly RGB: 0x1907;
  readonly RGBA: 0x1908;
  readonly LUMINANCE: 0x1909;
  readonly LUMINANCE_ALPHA: 0x190a;
  readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
  readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
  readonly UNSIGNED_SHORT_5_6_5: 0x8363;
  readonly FRAGMENT_SHADER: 0x8b30;
  readonly VERTEX_SHADER: 0x8b31;
  readonly MAX_VERTEX_ATTRIBS: 0x8869;
  readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb;
  readonly MAX_VARYING_VECTORS: 0x8dfc;
  readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d;
  readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c;
  readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
  readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd;
  readonly SHADER_TYPE: 0x8b4f;
  readonly DELETE_STATUS: 0x8b80;
  readonly LINK_STATUS: 0x8b82;
  readonly VALIDATE_STATUS: 0x8b83;
  readonly ATTACHED_SHADERS: 0x8b85;
  readonly ACTIVE_UNIFORMS: 0x8b86;
  readonly ACTIVE_ATTRIBUTES: 0x8b89;
  readonly SHADING_LANGUAGE_VERSION: 0x8b8c;
  readonly CURRENT_PROGRAM: 0x8b8d;
  readonly NEVER: 0x0200;
  readonly LESS: 0x0201;
  readonly EQUAL: 0x0202;
  readonly LEQUAL: 0x0203;
  readonly GREATER: 0x0204;
  readonly NOTEQUAL: 0x0205;
  readonly GEQUAL: 0x0206;
  readonly ALWAYS: 0x0207;
  readonly KEEP: 0x1e00;
  readonly REPLACE: 0x1e01;
  readonly INCR: 0x1e02;
  readonly DECR: 0x1e03;
  readonly INVERT: 0x150a;
  readonly INCR_WRAP: 0x8507;
  readonly DECR_WRAP: 0x8508;
  readonly VENDOR: 0x1f00;
  readonly RENDERER: 0x1f01;
  readonly VERSION: 0x1f02;
  readonly NEAREST: 0x2600;
  readonly LINEAR: 0x2601;
  readonly NEAREST_MIPMAP_NEAREST: 0x2700;
  readonly LINEAR_MIPMAP_NEAREST: 0x2701;
  readonly NEAREST_MIPMAP_LINEAR: 0x2702;
  readonly LINEAR_MIPMAP_LINEAR: 0x2703;
  readonly TEXTURE_MAG_FILTER: 0x2800;
  readonly TEXTURE_MIN_FILTER: 0x2801;
  readonly TEXTURE_WRAP_S: 0x2802;
  readonly TEXTURE_WRAP_T: 0x2803;
  readonly TEXTURE_2D: 0x0de1;
  readonly TEXTURE: 0x1702;
  readonly TEXTURE_CUBE_MAP: 0x8513;
  readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
  readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a;
  readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c;
  readonly TEXTURE0: 0x84c0;
  readonly TEXTURE1: 0x84c1;
  readonly TEXTURE2: 0x84c2;
  readonly TEXTURE3: 0x84c3;
  readonly TEXTURE4: 0x84c4;
  readonly TEXTURE5: 0x84c5;
  readonly TEXTURE6: 0x84c6;
  readonly TEXTURE7: 0x84c7;
  readonly TEXTURE8: 0x84c8;
  readonly TEXTURE9: 0x84c9;
  readonly TEXTURE10: 0x84ca;
  readonly TEXTURE11: 0x84cb;
  readonly TEXTURE12: 0x84cc;
  readonly TEXTURE13: 0x84cd;
  readonly TEXTURE14: 0x84ce;
  readonly TEXTURE15: 0x84cf;
  readonly TEXTURE16: 0x84d0;
  readonly TEXTURE17: 0x84d1;
  readonly TEXTURE18: 0x84d2;
  readonly TEXTURE19: 0x84d3;
  readonly TEXTURE20: 0x84d4;
  readonly TEXTURE21: 0x84d5;
  readonly TEXTURE22: 0x84d6;
  readonly TEXTURE23: 0x84d7;
  readonly TEXTURE24: 0x84d8;
  readonly TEXTURE25: 0x84d9;
  readonly TEXTURE26: 0x84da;
  readonly TEXTURE27: 0x84db;
  readonly TEXTURE28: 0x84dc;
  readonly TEXTURE29: 0x84dd;
  readonly TEXTURE30: 0x84de;
  readonly TEXTURE31: 0x84df;
  readonly ACTIVE_TEXTURE: 0x84e0;
  readonly REPEAT: 0x2901;
  readonly CLAMP_TO_EDGE: 0x812f;
  readonly MIRRORED_REPEAT: 0x8370;
  readonly FLOAT_VEC2: 0x8b50;
  readonly FLOAT_VEC3: 0x8b51;
  readonly FLOAT_VEC4: 0x8b52;
  readonly INT_VEC2: 0x8b53;
  readonly INT_VEC3: 0x8b54;
  readonly INT_VEC4: 0x8b55;
  readonly BOOL: 0x8b56;
  readonly BOOL_VEC2: 0x8b57;
  readonly BOOL_VEC3: 0x8b58;
  readonly BOOL_VEC4: 0x8b59;
  readonly FLOAT_MAT2: 0x8b5a;
  readonly FLOAT_MAT3: 0x8b5b;
  readonly FLOAT_MAT4: 0x8b5c;
  readonly SAMPLER_2D: 0x8b5e;
  readonly SAMPLER_CUBE: 0x8b60;
  readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
  readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
  readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
  readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
  readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a;
  readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
  readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f;
  readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a;
  readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b;
  readonly COMPILE_STATUS: 0x8b81;
  readonly LOW_FLOAT: 0x8df0;
  readonly MEDIUM_FLOAT: 0x8df1;
  readonly HIGH_FLOAT: 0x8df2;
  readonly LOW_INT: 0x8df3;
  readonly MEDIUM_INT: 0x8df4;
  readonly HIGH_INT: 0x8df5;
  readonly FRAMEBUFFER: 0x8d40;
  readonly RENDERBUFFER: 0x8d41;
  readonly RGBA4: 0x8056;
  readonly RGB5_A1: 0x8057;
  readonly RGBA8: 0x8058;
  readonly RGB565: 0x8d62;
  readonly DEPTH_COMPONENT16: 0x81a5;
  readonly STENCIL_INDEX8: 0x8d48;
  readonly DEPTH_STENCIL: 0x84f9;
  readonly RENDERBUFFER_WIDTH: 0x8d42;
  readonly RENDERBUFFER_HEIGHT: 0x8d43;
  readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8d44;
  readonly RENDERBUFFER_RED_SIZE: 0x8d50;
  readonly RENDERBUFFER_GREEN_SIZE: 0x8d51;
  readonly RENDERBUFFER_BLUE_SIZE: 0x8d52;
  readonly RENDERBUFFER_ALPHA_SIZE: 0x8d53;
  readonly RENDERBUFFER_DEPTH_SIZE: 0x8d54;
  readonly RENDERBUFFER_STENCIL_SIZE: 0x8d55;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3;
  readonly COLOR_ATTACHMENT0: 0x8ce0;
  readonly DEPTH_ATTACHMENT: 0x8d00;
  readonly STENCIL_ATTACHMENT: 0x8d20;
  readonly DEPTH_STENCIL_ATTACHMENT: 0x821a;
  readonly NONE: 0;
  readonly FRAMEBUFFER_COMPLETE: 0x8cd5;
  readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6;
  readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7;
  readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9;
  readonly FRAMEBUFFER_UNSUPPORTED: 0x8cdd;
  readonly FRAMEBUFFER_BINDING: 0x8ca6;
  readonly RENDERBUFFER_BINDING: 0x8ca7;
  readonly MAX_RENDERBUFFER_SIZE: 0x84e8;
  readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
  readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
  readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
  readonly CONTEXT_LOST_WEBGL: 0x9242;
  readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
  readonly BROWSER_DEFAULT_WEBGL: 0x9244;
};

interface WebGLRenderingContextBase {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas)
   */
  readonly canvas: HTMLCanvasElement | OffscreenCanvas;
  readonly drawingBufferColorSpace: PredefinedColorSpace;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)
   */
  readonly drawingBufferHeight: GLsizei;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)
   */
  readonly drawingBufferWidth: GLsizei;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/activeTexture)
   */
  activeTexture(texture: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/attachShader)
   */
  attachShader(program: WebGLProgram, shader: WebGLShader): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindAttribLocation)
   */
  bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindBuffer)
   */
  bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindFramebuffer)
   */
  bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindRenderbuffer)
   */
  bindRenderbuffer(
    target: GLenum,
    renderbuffer: WebGLRenderbuffer | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindTexture)
   */
  bindTexture(target: GLenum, texture: WebGLTexture | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendColor)
   */
  blendColor(
    red: GLclampf,
    green: GLclampf,
    blue: GLclampf,
    alpha: GLclampf,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquation)
   */
  blendEquation(mode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquationSeparate)
   */
  blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFunc)
   */
  blendFunc(sfactor: GLenum, dfactor: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFuncSeparate)
   */
  blendFuncSeparate(
    srcRGB: GLenum,
    dstRGB: GLenum,
    srcAlpha: GLenum,
    dstAlpha: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus)
   */
  checkFramebufferStatus(target: GLenum): GLenum;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clear)
   */
  clear(mask: GLbitfield): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearColor)
   */
  clearColor(
    red: GLclampf,
    green: GLclampf,
    blue: GLclampf,
    alpha: GLclampf,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearDepth)
   */
  clearDepth(depth: GLclampf): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearStencil)
   */
  clearStencil(s: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/colorMask)
   */
  colorMask(
    red: GLboolean,
    green: GLboolean,
    blue: GLboolean,
    alpha: GLboolean,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compileShader)
   */
  compileShader(shader: WebGLShader): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexImage2D)
   */
  copyTexImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D)
   */
  copyTexSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createBuffer)
   */
  createBuffer(): WebGLBuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createFramebuffer)
   */
  createFramebuffer(): WebGLFramebuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createProgram)
   */
  createProgram(): WebGLProgram | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createRenderbuffer)
   */
  createRenderbuffer(): WebGLRenderbuffer | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createShader)
   */
  createShader(type: GLenum): WebGLShader | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createTexture)
   */
  createTexture(): WebGLTexture | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/cullFace)
   */
  cullFace(mode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteBuffer)
   */
  deleteBuffer(buffer: WebGLBuffer | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteFramebuffer)
   */
  deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteProgram)
   */
  deleteProgram(program: WebGLProgram | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer)
   */
  deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteShader)
   */
  deleteShader(shader: WebGLShader | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteTexture)
   */
  deleteTexture(texture: WebGLTexture | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthFunc)
   */
  depthFunc(func: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthMask)
   */
  depthMask(flag: GLboolean): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthRange)
   */
  depthRange(zNear: GLclampf, zFar: GLclampf): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/detachShader)
   */
  detachShader(program: WebGLProgram, shader: WebGLShader): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disable)
   */
  disable(cap: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray)
   */
  disableVertexAttribArray(index: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawArrays)
   */
  drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawElements)
   */
  drawElements(
    mode: GLenum,
    count: GLsizei,
    type: GLenum,
    offset: GLintptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enable)
   */
  enable(cap: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray)
   */
  enableVertexAttribArray(index: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/finish)
   */
  finish(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/flush)
   */
  flush(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer)
   */
  framebufferRenderbuffer(
    target: GLenum,
    attachment: GLenum,
    renderbuffertarget: GLenum,
    renderbuffer: WebGLRenderbuffer | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferTexture2D)
   */
  framebufferTexture2D(
    target: GLenum,
    attachment: GLenum,
    textarget: GLenum,
    texture: WebGLTexture | null,
    level: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/frontFace)
   */
  frontFace(mode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/generateMipmap)
   */
  generateMipmap(target: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveAttrib)
   */
  getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveUniform)
   */
  getActiveUniform(
    program: WebGLProgram,
    index: GLuint,
  ): WebGLActiveInfo | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttachedShaders)
   */
  getAttachedShaders(program: WebGLProgram): readonly WebGLShader[] | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttribLocation)
   */
  getAttribLocation(program: WebGLProgram, name: string): GLint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getBufferParameter)
   */
  getBufferParameter(target: GLenum, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getContextAttributes)
   */
  getContextAttributes(): WebGLContextAttributes | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getError)
   */
  getError(): GLenum;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
   */
  getExtension(
    extensionName: 'ANGLE_instanced_arrays',
  ): ANGLE_instanced_arrays | null;
  getExtension(extensionName: 'EXT_blend_minmax'): EXT_blend_minmax | null;
  getExtension(
    extensionName: 'EXT_color_buffer_float',
  ): EXT_color_buffer_float | null;
  getExtension(
    extensionName: 'EXT_color_buffer_half_float',
  ): EXT_color_buffer_half_float | null;
  getExtension(extensionName: 'EXT_float_blend'): EXT_float_blend | null;
  getExtension(extensionName: 'EXT_frag_depth'): EXT_frag_depth | null;
  getExtension(extensionName: 'EXT_sRGB'): EXT_sRGB | null;
  getExtension(
    extensionName: 'EXT_shader_texture_lod',
  ): EXT_shader_texture_lod | null;
  getExtension(
    extensionName: 'EXT_texture_compression_bptc',
  ): EXT_texture_compression_bptc | null;
  getExtension(
    extensionName: 'EXT_texture_compression_rgtc',
  ): EXT_texture_compression_rgtc | null;
  getExtension(
    extensionName: 'EXT_texture_filter_anisotropic',
  ): EXT_texture_filter_anisotropic | null;
  getExtension(
    extensionName: 'KHR_parallel_shader_compile',
  ): KHR_parallel_shader_compile | null;
  getExtension(
    extensionName: 'OES_element_index_uint',
  ): OES_element_index_uint | null;
  getExtension(
    extensionName: 'OES_fbo_render_mipmap',
  ): OES_fbo_render_mipmap | null;
  getExtension(
    extensionName: 'OES_standard_derivatives',
  ): OES_standard_derivatives | null;
  getExtension(extensionName: 'OES_texture_float'): OES_texture_float | null;
  getExtension(
    extensionName: 'OES_texture_float_linear',
  ): OES_texture_float_linear | null;
  getExtension(
    extensionName: 'OES_texture_half_float',
  ): OES_texture_half_float | null;
  getExtension(
    extensionName: 'OES_texture_half_float_linear',
  ): OES_texture_half_float_linear | null;
  getExtension(
    extensionName: 'OES_vertex_array_object',
  ): OES_vertex_array_object | null;
  getExtension(extensionName: 'OVR_multiview2'): OVR_multiview2 | null;
  getExtension(
    extensionName: 'WEBGL_color_buffer_float',
  ): WEBGL_color_buffer_float | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_astc',
  ): WEBGL_compressed_texture_astc | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_etc',
  ): WEBGL_compressed_texture_etc | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_etc1',
  ): WEBGL_compressed_texture_etc1 | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_pvrtc',
  ): WEBGL_compressed_texture_pvrtc | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_s3tc',
  ): WEBGL_compressed_texture_s3tc | null;
  getExtension(
    extensionName: 'WEBGL_compressed_texture_s3tc_srgb',
  ): WEBGL_compressed_texture_s3tc_srgb | null;
  getExtension(
    extensionName: 'WEBGL_debug_renderer_info',
  ): WEBGL_debug_renderer_info | null;
  getExtension(
    extensionName: 'WEBGL_debug_shaders',
  ): WEBGL_debug_shaders | null;
  getExtension(
    extensionName: 'WEBGL_depth_texture',
  ): WEBGL_depth_texture | null;
  getExtension(extensionName: 'WEBGL_draw_buffers'): WEBGL_draw_buffers | null;
  getExtension(extensionName: 'WEBGL_lose_context'): WEBGL_lose_context | null;
  getExtension(extensionName: 'WEBGL_multi_draw'): WEBGL_multi_draw | null;
  getExtension(name: string): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter)
   */
  getFramebufferAttachmentParameter(
    target: GLenum,
    attachment: GLenum,
    pname: GLenum,
  ): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getParameter)
   */
  getParameter(pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramInfoLog)
   */
  getProgramInfoLog(program: WebGLProgram): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramParameter)
   */
  getProgramParameter(program: WebGLProgram, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter)
   */
  getRenderbufferParameter(target: GLenum, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderInfoLog)
   */
  getShaderInfoLog(shader: WebGLShader): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderParameter)
   */
  getShaderParameter(shader: WebGLShader, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat)
   */
  getShaderPrecisionFormat(
    shadertype: GLenum,
    precisiontype: GLenum,
  ): WebGLShaderPrecisionFormat | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderSource)
   */
  getShaderSource(shader: WebGLShader): string | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getSupportedExtensions)
   */
  getSupportedExtensions(): readonly string[] | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getTexParameter)
   */
  getTexParameter(target: GLenum, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniform)
   */
  getUniform(program: WebGLProgram, location: WebGLUniformLocation): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniformLocation)
   */
  getUniformLocation(
    program: WebGLProgram,
    name: string,
  ): WebGLUniformLocation | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttrib)
   */
  getVertexAttrib(index: GLuint, pname: GLenum): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset)
   */
  getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/hint)
   */
  hint(target: GLenum, mode: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isBuffer)
   */
  isBuffer(buffer: WebGLBuffer | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isContextLost)
   */
  isContextLost(): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isEnabled)
   */
  isEnabled(cap: GLenum): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isFramebuffer)
   */
  isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isProgram)
   */
  isProgram(program: WebGLProgram | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isRenderbuffer)
   */
  isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isShader)
   */
  isShader(shader: WebGLShader | null): GLboolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isTexture)
   */
  isTexture(texture: WebGLTexture | null): GLboolean;
  lineWidth(width: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/linkProgram)
   */
  linkProgram(program: WebGLProgram): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/pixelStorei)
   */
  pixelStorei(pname: GLenum, param: GLint | GLboolean): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/polygonOffset)
   */
  polygonOffset(factor: GLfloat, units: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/renderbufferStorage)
   */
  renderbufferStorage(
    target: GLenum,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/sampleCoverage)
   */
  sampleCoverage(value: GLclampf, invert: GLboolean): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/scissor)
   */
  scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/shaderSource)
   */
  shaderSource(shader: WebGLShader, source: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFunc)
   */
  stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate)
   */
  stencilFuncSeparate(
    face: GLenum,
    func: GLenum,
    ref: GLint,
    mask: GLuint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMask)
   */
  stencilMask(mask: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate)
   */
  stencilMaskSeparate(face: GLenum, mask: GLuint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOp)
   */
  stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOpSeparate)
   */
  stencilOpSeparate(
    face: GLenum,
    fail: GLenum,
    zfail: GLenum,
    zpass: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
   */
  texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
   */
  texParameteri(target: GLenum, pname: GLenum, param: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1i(location: WebGLUniformLocation | null, x: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2f(
    location: WebGLUniformLocation | null,
    x: GLfloat,
    y: GLfloat,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3f(
    location: WebGLUniformLocation | null,
    x: GLfloat,
    y: GLfloat,
    z: GLfloat,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3i(
    location: WebGLUniformLocation | null,
    x: GLint,
    y: GLint,
    z: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4f(
    location: WebGLUniformLocation | null,
    x: GLfloat,
    y: GLfloat,
    z: GLfloat,
    w: GLfloat,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4i(
    location: WebGLUniformLocation | null,
    x: GLint,
    y: GLint,
    z: GLint,
    w: GLint,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/useProgram)
   */
  useProgram(program: WebGLProgram | null): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/validateProgram)
   */
  validateProgram(program: WebGLProgram): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib1f(index: GLuint, x: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib1fv(index: GLuint, values: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib2fv(index: GLuint, values: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib3fv(index: GLuint, values: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib4f(
    index: GLuint,
    x: GLfloat,
    y: GLfloat,
    z: GLfloat,
    w: GLfloat,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
   */
  vertexAttrib4fv(index: GLuint, values: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)
   */
  vertexAttribPointer(
    index: GLuint,
    size: GLint,
    type: GLenum,
    normalized: GLboolean,
    stride: GLsizei,
    offset: GLintptr,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/viewport)
   */
  viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
  readonly DEPTH_BUFFER_BIT: 0x00000100;
  readonly STENCIL_BUFFER_BIT: 0x00000400;
  readonly COLOR_BUFFER_BIT: 0x00004000;
  readonly POINTS: 0x0000;
  readonly LINES: 0x0001;
  readonly LINE_LOOP: 0x0002;
  readonly LINE_STRIP: 0x0003;
  readonly TRIANGLES: 0x0004;
  readonly TRIANGLE_STRIP: 0x0005;
  readonly TRIANGLE_FAN: 0x0006;
  readonly ZERO: 0;
  readonly ONE: 1;
  readonly SRC_COLOR: 0x0300;
  readonly ONE_MINUS_SRC_COLOR: 0x0301;
  readonly SRC_ALPHA: 0x0302;
  readonly ONE_MINUS_SRC_ALPHA: 0x0303;
  readonly DST_ALPHA: 0x0304;
  readonly ONE_MINUS_DST_ALPHA: 0x0305;
  readonly DST_COLOR: 0x0306;
  readonly ONE_MINUS_DST_COLOR: 0x0307;
  readonly SRC_ALPHA_SATURATE: 0x0308;
  readonly FUNC_ADD: 0x8006;
  readonly BLEND_EQUATION: 0x8009;
  readonly BLEND_EQUATION_RGB: 0x8009;
  readonly BLEND_EQUATION_ALPHA: 0x883d;
  readonly FUNC_SUBTRACT: 0x800a;
  readonly FUNC_REVERSE_SUBTRACT: 0x800b;
  readonly BLEND_DST_RGB: 0x80c8;
  readonly BLEND_SRC_RGB: 0x80c9;
  readonly BLEND_DST_ALPHA: 0x80ca;
  readonly BLEND_SRC_ALPHA: 0x80cb;
  readonly CONSTANT_COLOR: 0x8001;
  readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
  readonly CONSTANT_ALPHA: 0x8003;
  readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
  readonly BLEND_COLOR: 0x8005;
  readonly ARRAY_BUFFER: 0x8892;
  readonly ELEMENT_ARRAY_BUFFER: 0x8893;
  readonly ARRAY_BUFFER_BINDING: 0x8894;
  readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
  readonly STREAM_DRAW: 0x88e0;
  readonly STATIC_DRAW: 0x88e4;
  readonly DYNAMIC_DRAW: 0x88e8;
  readonly BUFFER_SIZE: 0x8764;
  readonly BUFFER_USAGE: 0x8765;
  readonly CURRENT_VERTEX_ATTRIB: 0x8626;
  readonly FRONT: 0x0404;
  readonly BACK: 0x0405;
  readonly FRONT_AND_BACK: 0x0408;
  readonly CULL_FACE: 0x0b44;
  readonly BLEND: 0x0be2;
  readonly DITHER: 0x0bd0;
  readonly STENCIL_TEST: 0x0b90;
  readonly DEPTH_TEST: 0x0b71;
  readonly SCISSOR_TEST: 0x0c11;
  readonly POLYGON_OFFSET_FILL: 0x8037;
  readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809e;
  readonly SAMPLE_COVERAGE: 0x80a0;
  readonly NO_ERROR: 0;
  readonly INVALID_ENUM: 0x0500;
  readonly INVALID_VALUE: 0x0501;
  readonly INVALID_OPERATION: 0x0502;
  readonly OUT_OF_MEMORY: 0x0505;
  readonly CW: 0x0900;
  readonly CCW: 0x0901;
  readonly LINE_WIDTH: 0x0b21;
  readonly ALIASED_POINT_SIZE_RANGE: 0x846d;
  readonly ALIASED_LINE_WIDTH_RANGE: 0x846e;
  readonly CULL_FACE_MODE: 0x0b45;
  readonly FRONT_FACE: 0x0b46;
  readonly DEPTH_RANGE: 0x0b70;
  readonly DEPTH_WRITEMASK: 0x0b72;
  readonly DEPTH_CLEAR_VALUE: 0x0b73;
  readonly DEPTH_FUNC: 0x0b74;
  readonly STENCIL_CLEAR_VALUE: 0x0b91;
  readonly STENCIL_FUNC: 0x0b92;
  readonly STENCIL_FAIL: 0x0b94;
  readonly STENCIL_PASS_DEPTH_FAIL: 0x0b95;
  readonly STENCIL_PASS_DEPTH_PASS: 0x0b96;
  readonly STENCIL_REF: 0x0b97;
  readonly STENCIL_VALUE_MASK: 0x0b93;
  readonly STENCIL_WRITEMASK: 0x0b98;
  readonly STENCIL_BACK_FUNC: 0x8800;
  readonly STENCIL_BACK_FAIL: 0x8801;
  readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
  readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
  readonly STENCIL_BACK_REF: 0x8ca3;
  readonly STENCIL_BACK_VALUE_MASK: 0x8ca4;
  readonly STENCIL_BACK_WRITEMASK: 0x8ca5;
  readonly VIEWPORT: 0x0ba2;
  readonly SCISSOR_BOX: 0x0c10;
  readonly COLOR_CLEAR_VALUE: 0x0c22;
  readonly COLOR_WRITEMASK: 0x0c23;
  readonly UNPACK_ALIGNMENT: 0x0cf5;
  readonly PACK_ALIGNMENT: 0x0d05;
  readonly MAX_TEXTURE_SIZE: 0x0d33;
  readonly MAX_VIEWPORT_DIMS: 0x0d3a;
  readonly SUBPIXEL_BITS: 0x0d50;
  readonly RED_BITS: 0x0d52;
  readonly GREEN_BITS: 0x0d53;
  readonly BLUE_BITS: 0x0d54;
  readonly ALPHA_BITS: 0x0d55;
  readonly DEPTH_BITS: 0x0d56;
  readonly STENCIL_BITS: 0x0d57;
  readonly POLYGON_OFFSET_UNITS: 0x2a00;
  readonly POLYGON_OFFSET_FACTOR: 0x8038;
  readonly TEXTURE_BINDING_2D: 0x8069;
  readonly SAMPLE_BUFFERS: 0x80a8;
  readonly SAMPLES: 0x80a9;
  readonly SAMPLE_COVERAGE_VALUE: 0x80aa;
  readonly SAMPLE_COVERAGE_INVERT: 0x80ab;
  readonly COMPRESSED_TEXTURE_FORMATS: 0x86a3;
  readonly DONT_CARE: 0x1100;
  readonly FASTEST: 0x1101;
  readonly NICEST: 0x1102;
  readonly GENERATE_MIPMAP_HINT: 0x8192;
  readonly BYTE: 0x1400;
  readonly UNSIGNED_BYTE: 0x1401;
  readonly SHORT: 0x1402;
  readonly UNSIGNED_SHORT: 0x1403;
  readonly INT: 0x1404;
  readonly UNSIGNED_INT: 0x1405;
  readonly FLOAT: 0x1406;
  readonly DEPTH_COMPONENT: 0x1902;
  readonly ALPHA: 0x1906;
  readonly RGB: 0x1907;
  readonly RGBA: 0x1908;
  readonly LUMINANCE: 0x1909;
  readonly LUMINANCE_ALPHA: 0x190a;
  readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
  readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
  readonly UNSIGNED_SHORT_5_6_5: 0x8363;
  readonly FRAGMENT_SHADER: 0x8b30;
  readonly VERTEX_SHADER: 0x8b31;
  readonly MAX_VERTEX_ATTRIBS: 0x8869;
  readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb;
  readonly MAX_VARYING_VECTORS: 0x8dfc;
  readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d;
  readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c;
  readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
  readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd;
  readonly SHADER_TYPE: 0x8b4f;
  readonly DELETE_STATUS: 0x8b80;
  readonly LINK_STATUS: 0x8b82;
  readonly VALIDATE_STATUS: 0x8b83;
  readonly ATTACHED_SHADERS: 0x8b85;
  readonly ACTIVE_UNIFORMS: 0x8b86;
  readonly ACTIVE_ATTRIBUTES: 0x8b89;
  readonly SHADING_LANGUAGE_VERSION: 0x8b8c;
  readonly CURRENT_PROGRAM: 0x8b8d;
  readonly NEVER: 0x0200;
  readonly LESS: 0x0201;
  readonly EQUAL: 0x0202;
  readonly LEQUAL: 0x0203;
  readonly GREATER: 0x0204;
  readonly NOTEQUAL: 0x0205;
  readonly GEQUAL: 0x0206;
  readonly ALWAYS: 0x0207;
  readonly KEEP: 0x1e00;
  readonly REPLACE: 0x1e01;
  readonly INCR: 0x1e02;
  readonly DECR: 0x1e03;
  readonly INVERT: 0x150a;
  readonly INCR_WRAP: 0x8507;
  readonly DECR_WRAP: 0x8508;
  readonly VENDOR: 0x1f00;
  readonly RENDERER: 0x1f01;
  readonly VERSION: 0x1f02;
  readonly NEAREST: 0x2600;
  readonly LINEAR: 0x2601;
  readonly NEAREST_MIPMAP_NEAREST: 0x2700;
  readonly LINEAR_MIPMAP_NEAREST: 0x2701;
  readonly NEAREST_MIPMAP_LINEAR: 0x2702;
  readonly LINEAR_MIPMAP_LINEAR: 0x2703;
  readonly TEXTURE_MAG_FILTER: 0x2800;
  readonly TEXTURE_MIN_FILTER: 0x2801;
  readonly TEXTURE_WRAP_S: 0x2802;
  readonly TEXTURE_WRAP_T: 0x2803;
  readonly TEXTURE_2D: 0x0de1;
  readonly TEXTURE: 0x1702;
  readonly TEXTURE_CUBE_MAP: 0x8513;
  readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
  readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
  readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
  readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a;
  readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c;
  readonly TEXTURE0: 0x84c0;
  readonly TEXTURE1: 0x84c1;
  readonly TEXTURE2: 0x84c2;
  readonly TEXTURE3: 0x84c3;
  readonly TEXTURE4: 0x84c4;
  readonly TEXTURE5: 0x84c5;
  readonly TEXTURE6: 0x84c6;
  readonly TEXTURE7: 0x84c7;
  readonly TEXTURE8: 0x84c8;
  readonly TEXTURE9: 0x84c9;
  readonly TEXTURE10: 0x84ca;
  readonly TEXTURE11: 0x84cb;
  readonly TEXTURE12: 0x84cc;
  readonly TEXTURE13: 0x84cd;
  readonly TEXTURE14: 0x84ce;
  readonly TEXTURE15: 0x84cf;
  readonly TEXTURE16: 0x84d0;
  readonly TEXTURE17: 0x84d1;
  readonly TEXTURE18: 0x84d2;
  readonly TEXTURE19: 0x84d3;
  readonly TEXTURE20: 0x84d4;
  readonly TEXTURE21: 0x84d5;
  readonly TEXTURE22: 0x84d6;
  readonly TEXTURE23: 0x84d7;
  readonly TEXTURE24: 0x84d8;
  readonly TEXTURE25: 0x84d9;
  readonly TEXTURE26: 0x84da;
  readonly TEXTURE27: 0x84db;
  readonly TEXTURE28: 0x84dc;
  readonly TEXTURE29: 0x84dd;
  readonly TEXTURE30: 0x84de;
  readonly TEXTURE31: 0x84df;
  readonly ACTIVE_TEXTURE: 0x84e0;
  readonly REPEAT: 0x2901;
  readonly CLAMP_TO_EDGE: 0x812f;
  readonly MIRRORED_REPEAT: 0x8370;
  readonly FLOAT_VEC2: 0x8b50;
  readonly FLOAT_VEC3: 0x8b51;
  readonly FLOAT_VEC4: 0x8b52;
  readonly INT_VEC2: 0x8b53;
  readonly INT_VEC3: 0x8b54;
  readonly INT_VEC4: 0x8b55;
  readonly BOOL: 0x8b56;
  readonly BOOL_VEC2: 0x8b57;
  readonly BOOL_VEC3: 0x8b58;
  readonly BOOL_VEC4: 0x8b59;
  readonly FLOAT_MAT2: 0x8b5a;
  readonly FLOAT_MAT3: 0x8b5b;
  readonly FLOAT_MAT4: 0x8b5c;
  readonly SAMPLER_2D: 0x8b5e;
  readonly SAMPLER_CUBE: 0x8b60;
  readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
  readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
  readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
  readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
  readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a;
  readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
  readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f;
  readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a;
  readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b;
  readonly COMPILE_STATUS: 0x8b81;
  readonly LOW_FLOAT: 0x8df0;
  readonly MEDIUM_FLOAT: 0x8df1;
  readonly HIGH_FLOAT: 0x8df2;
  readonly LOW_INT: 0x8df3;
  readonly MEDIUM_INT: 0x8df4;
  readonly HIGH_INT: 0x8df5;
  readonly FRAMEBUFFER: 0x8d40;
  readonly RENDERBUFFER: 0x8d41;
  readonly RGBA4: 0x8056;
  readonly RGB5_A1: 0x8057;
  readonly RGBA8: 0x8058;
  readonly RGB565: 0x8d62;
  readonly DEPTH_COMPONENT16: 0x81a5;
  readonly STENCIL_INDEX8: 0x8d48;
  readonly DEPTH_STENCIL: 0x84f9;
  readonly RENDERBUFFER_WIDTH: 0x8d42;
  readonly RENDERBUFFER_HEIGHT: 0x8d43;
  readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8d44;
  readonly RENDERBUFFER_RED_SIZE: 0x8d50;
  readonly RENDERBUFFER_GREEN_SIZE: 0x8d51;
  readonly RENDERBUFFER_BLUE_SIZE: 0x8d52;
  readonly RENDERBUFFER_ALPHA_SIZE: 0x8d53;
  readonly RENDERBUFFER_DEPTH_SIZE: 0x8d54;
  readonly RENDERBUFFER_STENCIL_SIZE: 0x8d55;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0;
  readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2;
  readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3;
  readonly COLOR_ATTACHMENT0: 0x8ce0;
  readonly DEPTH_ATTACHMENT: 0x8d00;
  readonly STENCIL_ATTACHMENT: 0x8d20;
  readonly DEPTH_STENCIL_ATTACHMENT: 0x821a;
  readonly NONE: 0;
  readonly FRAMEBUFFER_COMPLETE: 0x8cd5;
  readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6;
  readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7;
  readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9;
  readonly FRAMEBUFFER_UNSUPPORTED: 0x8cdd;
  readonly FRAMEBUFFER_BINDING: 0x8ca6;
  readonly RENDERBUFFER_BINDING: 0x8ca7;
  readonly MAX_RENDERBUFFER_SIZE: 0x84e8;
  readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
  readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
  readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
  readonly CONTEXT_LOST_WEBGL: 0x9242;
  readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
  readonly BROWSER_DEFAULT_WEBGL: 0x9244;
}

interface WebGLRenderingContextOverloads {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
   */
  bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;
  bufferData(
    target: GLenum,
    data: AllowSharedBufferSource | null,
    usage: GLenum,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
   */
  bufferSubData(
    target: GLenum,
    offset: GLintptr,
    data: AllowSharedBufferSource,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
   */
  compressedTexImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLenum,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    data: ArrayBufferView,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
   */
  compressedTexSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    data: ArrayBufferView,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
   */
  readPixels(
    x: GLint,
    y: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    pixels: ArrayBufferView | null,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
   */
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    width: GLsizei,
    height: GLsizei,
    border: GLint,
    format: GLenum,
    type: GLenum,
    pixels: ArrayBufferView | null,
  ): void;
  texImage2D(
    target: GLenum,
    level: GLint,
    internalformat: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
   */
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    width: GLsizei,
    height: GLsizei,
    format: GLenum,
    type: GLenum,
    pixels: ArrayBufferView | null,
  ): void;
  texSubImage2D(
    target: GLenum,
    level: GLint,
    xoffset: GLint,
    yoffset: GLint,
    format: GLenum,
    type: GLenum,
    source: TexImageSource,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
   */
  uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix2fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    value: Float32List,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix3fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    value: Float32List,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
   */
  uniformMatrix4fv(
    location: WebGLUniformLocation | null,
    transpose: GLboolean,
    value: Float32List,
  ): void;
}

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler) */
interface WebGLSampler {}

declare var WebGLSampler: {
  readonly prototype: WebGLSampler;
  new (): WebGLSampler;
};

/**
 * The WebGLShader is part of the WebGL API and can either be a vertex or a
 * fragment shader. A WebGLProgram requires both types of shaders.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
 */
interface WebGLShader {}

declare var WebGLShader: {
  readonly prototype: WebGLShader;
  new (): WebGLShader;
};

/**
 * Part of the WebGL API and represents the information returned by calling the
 * WebGLRenderingContext.getShaderPrecisionFormat() method.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
 */
interface WebGLShaderPrecisionFormat {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)
   */
  readonly precision: GLint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)
   */
  readonly rangeMax: GLint;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)
   */
  readonly rangeMin: GLint;
}

declare var WebGLShaderPrecisionFormat: {
  readonly prototype: WebGLShaderPrecisionFormat;
  new (): WebGLShaderPrecisionFormat;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync) */
interface WebGLSync {}

declare var WebGLSync: {
  readonly prototype: WebGLSync;
  new (): WebGLSync;
};

/**
 * Part of the WebGL API and represents an opaque texture object providing
 * storage and state for texturing operations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
 */
interface WebGLTexture {}

declare var WebGLTexture: {
  readonly prototype: WebGLTexture;
  new (): WebGLTexture;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)
 */
interface WebGLTransformFeedback {}

declare var WebGLTransformFeedback: {
  readonly prototype: WebGLTransformFeedback;
  new (): WebGLTransformFeedback;
};

/**
 * Part of the WebGL API and represents the location of a uniform variable in a
 * shader program.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
 */
interface WebGLUniformLocation {}

declare var WebGLUniformLocation: {
  readonly prototype: WebGLUniformLocation;
  new (): WebGLUniformLocation;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)
 */
interface WebGLVertexArrayObject {}

declare var WebGLVertexArrayObject: {
  readonly prototype: WebGLVertexArrayObject;
  new (): WebGLVertexArrayObject;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObjectOES)
 */
interface WebGLVertexArrayObjectOES {}

interface WebSocketEventMap {
  readonly close: CloseEvent;
  readonly error: Event;
  readonly message: MessageEvent;
  readonly open: Event;
}

/**
 * Provides the API for creating and managing a WebSocket connection to a
 * server, as well as for sending and receiving data on the connection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
 */
interface WebSocket extends EventTarget {
  /**
   * Returns a string that indicates how binary data from the WebSocket object
   * is exposed to scripts:
   *
   * Can be set, to change how binary data is returned. The default is "blob".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
   */
  readonly binaryType: BinaryType;
  /**
   * Returns the number of bytes of application data (UTF-8 text and binary
   * data) that have been queued using send() but not yet been transmitted to
   * the network.
   *
   * If the WebSocket connection is closed, this attribute's value will only
   * increase with each call to the send() method. (The number does not reset
   * to zero once the connection closes.)
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
   */
  readonly bufferedAmount: number;
  /**
   * Returns the extensions selected by the server, if any.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
   */
  readonly extensions: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)
   */
  readonly onclose: ((this: WebSocket, ev: CloseEvent) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)
   */
  readonly onerror: ((this: WebSocket, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)
   */
  readonly onmessage: ((this: WebSocket, ev: MessageEvent) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)
   */
  readonly onopen: ((this: WebSocket, ev: Event) => unknown) | null;
  /**
   * Returns the subprotocol selected by the server, if any. It can be used in
   * conjunction with the array form of the constructor's second argument to
   * perform subprotocol negotiation.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
   */
  readonly protocol: string;
  /**
   * Returns the state of the WebSocket object's connection. It can have the
   * values described below.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
   */
  readonly readyState: number;
  /**
   * Returns the URL that was used to establish the WebSocket connection.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
   */
  readonly url: string;
  /**
   * Closes the WebSocket connection, optionally using code as the the
   * WebSocket connection close code and reason as the the WebSocket
   * connection close reason.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
   */
  close(code?: number, reason?: string): void;
  /**
   * Transmits data using the WebSocket connection. data can be a string, a
   * Blob, an ArrayBuffer, or an ArrayBufferView.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
   */
  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
  readonly CONNECTING: 0;
  readonly OPEN: 1;
  readonly CLOSING: 2;
  readonly CLOSED: 3;
  addEventListener<K extends keyof WebSocketEventMap>(
    type: K,
    listener: (this: WebSocket, ev: WebSocketEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof WebSocketEventMap>(
    type: K,
    listener: (this: WebSocket, ev: WebSocketEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var WebSocket: {
  readonly prototype: WebSocket;
  new (url: string | URL, protocols?: string | readonly string[]): WebSocket;
  readonly CONNECTING: 0;
  readonly OPEN: 1;
  readonly CLOSING: 2;
  readonly CLOSED: 3;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
 */
interface WebTransport {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)
   */
  readonly closed: Promise<WebTransportCloseInfo>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)
   */
  readonly datagrams: WebTransportDatagramDuplexStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)
   */
  readonly incomingBidirectionalStreams: ReadableStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)
   */
  readonly incomingUnidirectionalStreams: ReadableStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)
   */
  readonly ready: Promise<undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/close)
   */
  close(closeInfo?: WebTransportCloseInfo): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createBidirectionalStream)
   */
  createBidirectionalStream(
    options?: WebTransportSendStreamOptions,
  ): Promise<WebTransportBidirectionalStream>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createUnidirectionalStream)
   */
  createUnidirectionalStream(
    options?: WebTransportSendStreamOptions,
  ): Promise<WritableStream>;
}

declare var WebTransport: {
  readonly prototype: WebTransport;
  new (url: string | URL, options?: WebTransportOptions): WebTransport;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
 */
interface WebTransportBidirectionalStream {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)
   */
  readonly readable: ReadableStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)
   */
  readonly writable: WritableStream;
}

declare var WebTransportBidirectionalStream: {
  readonly prototype: WebTransportBidirectionalStream;
  new (): WebTransportBidirectionalStream;
};

/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
 */
interface WebTransportDatagramDuplexStream {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)
   */
  readonly incomingHighWaterMark: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)
   */
  readonly incomingMaxAge: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)
   */
  readonly maxDatagramSize: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)
   */
  readonly outgoingHighWaterMark: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)
   */
  readonly outgoingMaxAge: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)
   */
  readonly readable: ReadableStream;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable)
   */
  readonly writable: WritableStream;
}

declare var WebTransportDatagramDuplexStream: {
  readonly prototype: WebTransportDatagramDuplexStream;
  new (): WebTransportDatagramDuplexStream;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
 */
interface WebTransportError extends DOMException {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)
   */
  readonly source: WebTransportErrorSource;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)
   */
  readonly streamErrorCode: number | null;
}

declare var WebTransportError: {
  readonly prototype: WebTransportError;
  new (message?: string, options?: WebTransportErrorOptions): WebTransportError;
};

/**
 * Events that occur due to the user moving a mouse wheel or similar input
 * device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent)
 */
interface WheelEvent extends MouseEvent {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode)
   */
  readonly deltaMode: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX)
   */
  readonly deltaX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY)
   */
  readonly deltaY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ)
   */
  readonly deltaZ: number;
  readonly DOM_DELTA_PIXEL: 0x00;
  readonly DOM_DELTA_LINE: 0x01;
  readonly DOM_DELTA_PAGE: 0x02;
}

declare var WheelEvent: {
  readonly prototype: WheelEvent;
  new (type: string, eventInitDict?: WheelEventInit): WheelEvent;
  readonly DOM_DELTA_PIXEL: 0x00;
  readonly DOM_DELTA_LINE: 0x01;
  readonly DOM_DELTA_PAGE: 0x02;
};

interface WindowEventMap
  extends GlobalEventHandlersEventMap,
    WindowEventHandlersEventMap {
  readonly DOMContentLoaded: Event;
  readonly devicemotion: DeviceMotionEvent;
  readonly deviceorientation: DeviceOrientationEvent;
  readonly deviceorientationabsolute: DeviceOrientationEvent;
  readonly gamepadconnected: GamepadEvent;
  readonly gamepaddisconnected: GamepadEvent;
  readonly orientationchange: Event;
}

/**
 * A window containing a DOM document; the document property points to the DOM
 * document loaded in that window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window)
 */
interface Window
  extends EventTarget,
    AnimationFrameProvider,
    GlobalEventHandlers,
    WindowEventHandlers,
    WindowLocalStorage,
    WindowOrWorkerGlobalScope,
    WindowSessionStorage {
  /**
   * @deprecated This is a legacy alias of `navigator`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
   */
  readonly clientInformation: Navigator;
  /**
   * Returns true if the window has been closed, false otherwise.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
   */
  readonly closed: boolean;
  /**
   * Defines a new custom element, mapping the given name to the given
   * constructor as an autonomous custom element.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
   */
  readonly customElements: CustomElementRegistry;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)
   */
  readonly devicePixelRatio: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/document)
   */
  readonly document: Document;
  /**
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)
   */
  readonly event: Event | undefined;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/external)
   */
  readonly external: External;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
   */
  readonly frameElement: Element | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames) */
  readonly frames: WindowProxy;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/history)
   */
  readonly history: History;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)
   */
  readonly innerHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)
   */
  readonly innerWidth: number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length) */
  readonly length: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/location)
   */
  get location(): Location;
  set location(href: string | Location);
  /**
   * Returns true if the location bar is visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
   */
  readonly locationbar: BarProp;
  /**
   * Returns true if the menu bar is visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
   */
  readonly menubar: BarProp;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name) */
  readonly name: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
   */
  readonly navigator: Navigator;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
   */
  readonly ondevicemotion:
    | ((this: Window, ev: DeviceMotionEvent) => unknown)
    | null;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
   */
  readonly ondeviceorientation:
    | ((this: Window, ev: DeviceOrientationEvent) => unknown)
    | null;
  /**
   * Available only in secure contexts.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
   */
  readonly ondeviceorientationabsolute:
    | ((this: Window, ev: DeviceOrientationEvent) => unknown)
    | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)
   */
  readonly onorientationchange: ((this: Window, ev: Event) => unknown) | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener) */
  readonly opener: unknown;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)
   */
  readonly orientation: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)
   */
  readonly outerHeight: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)
   */
  readonly outerWidth: number;
  /**
   * @deprecated This is a legacy alias of `scrollX`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
   */
  readonly pageXOffset: number;
  /**
   * @deprecated This is a legacy alias of `scrollY`.
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
   */
  readonly pageYOffset: number;
  /**
   * Refers to either the parent WindowProxy, or itself.
   *
   * It can rarely be null e.g. for contentWindow of an iframe that is already
   * removed from the parent.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
   */
  readonly parent: WindowProxy;
  /**
   * Returns true if the personal bar is visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
   */
  readonly personalbar: BarProp;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen) */
  readonly screen: Screen;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)
   */
  readonly screenLeft: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)
   */
  readonly screenTop: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)
   */
  readonly screenX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)
   */
  readonly screenY: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
   */
  readonly scrollX: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
   */
  readonly scrollY: number;
  /**
   * Returns true if the scrollbars are visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
   */
  readonly scrollbars: BarProp;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self) */
  readonly self: Window & typeof globalThis;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
   */
  readonly speechSynthesis: SpeechSynthesis;
  /**
   * @deprecated
   *
   *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)
   */
  readonly status: string;
  /**
   * Returns true if the status bar is visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
   */
  readonly statusbar: BarProp;
  /**
   * Returns true if the toolbar is visible; otherwise, returns false.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
   */
  readonly toolbar: BarProp;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top) */
  readonly top: WindowProxy | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
   */
  readonly visualViewport: VisualViewport | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window) */
  readonly window: Window & typeof globalThis;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert) */
  alert(message?: unknown): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur) */
  blur(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback)
   */
  cancelIdleCallback(handle: number): void;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/captureEvents)
   */
  captureEvents(): void;
  /**
   * Closes the window.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
   */
  close(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm)
   */
  confirm(message?: string): boolean;
  /**
   * Moves the focus to the window's browsing context, if any.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
   */
  focus(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle)
   */
  getComputedStyle(
    elt: Element,
    pseudoElt?: string | null,
  ): CSSStyleDeclaration;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection)
   */
  getSelection(): Selection | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia)
   */
  matchMedia(query: string): MediaQueryList;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy) */
  moveBy(x: number, y: number): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo) */
  moveTo(x: number, y: number): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open) */
  open(
    url?: string | URL,
    target?: string,
    features?: string,
  ): WindowProxy | null;
  /**
   * Posts a message to the given window. Messages can be structured objects,
   * e.g. nested objects and arrays, can contain JavaScript values (strings,
   * numbers, Date objects, etc), and can contain certain data objects such as
   * File Blob, FileList, and ArrayBuffer objects.
   *
   * Objects listed in the transfer member of options are transferred, not
   * just cloned, meaning that they are no longer usable on the sending side.
   *
   * A target origin can be specified using the targetOrigin member of
   * options. If not provided, it defaults to "/". This default restricts the
   * message to same-origin targets only.
   *
   * If the origin of the target window doesn't match the given target origin,
   * the message is discarded, to avoid information leakage. To send the
   * message to the target regardless of origin, set the target origin to
   * "*".
   *
   * Throws a "DataCloneError" DOMException if transfer array contains
   * duplicate objects or if message could not be cloned.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
   */
  postMessage(
    message: unknown,
    targetOrigin: string,
    transfer?: readonly Transferable[],
  ): void;
  postMessage(message: unknown, options?: WindowPostMessageOptions): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print) */
  print(): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt) */
  prompt(message?: string, _default?: string): string | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents)
   */
  releaseEvents(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
   */
  requestIdleCallback(
    callback: IdleRequestCallback,
    options?: IdleRequestOptions,
  ): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy)
   */
  resizeBy(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo)
   */
  resizeTo(width: number, height: number): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll) */
  scroll(options?: ScrollToOptions): void;
  scroll(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy)
   */
  scrollBy(options?: ScrollToOptions): void;
  scrollBy(x: number, y: number): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo)
   */
  scrollTo(options?: ScrollToOptions): void;
  scrollTo(x: number, y: number): void;
  /**
   * Cancels the document load.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
   */
  stop(): void;
  addEventListener<K extends keyof WindowEventMap>(
    type: K,
    listener: (this: Window, ev: WindowEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof WindowEventMap>(
    type: K,
    listener: (this: Window, ev: WindowEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
  readonly [index: number]: Window;
}

declare var Window: {
  readonly prototype: Window;
  new (): Window;
};

interface WindowEventHandlersEventMap {
  readonly afterprint: Event;
  readonly beforeprint: Event;
  readonly beforeunload: BeforeUnloadEvent;
  readonly gamepadconnected: GamepadEvent;
  readonly gamepaddisconnected: GamepadEvent;
  readonly hashchange: HashChangeEvent;
  readonly languagechange: Event;
  readonly message: MessageEvent;
  readonly messageerror: MessageEvent;
  readonly offline: Event;
  readonly online: Event;
  readonly pagehide: PageTransitionEvent;
  readonly pageshow: PageTransitionEvent;
  readonly popstate: PopStateEvent;
  readonly rejectionhandled: PromiseRejectionEvent;
  readonly storage: StorageEvent;
  readonly unhandledrejection: PromiseRejectionEvent;
  readonly unload: Event;
}

interface WindowEventHandlers {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
   */
  readonly onafterprint:
    | ((this: WindowEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
   */
  readonly onbeforeprint:
    | ((this: WindowEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
   */
  readonly onbeforeunload:
    | ((this: WindowEventHandlers, ev: BeforeUnloadEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
   */
  readonly ongamepadconnected:
    | ((this: WindowEventHandlers, ev: GamepadEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
   */
  readonly ongamepaddisconnected:
    | ((this: WindowEventHandlers, ev: GamepadEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
   */
  readonly onhashchange:
    | ((this: WindowEventHandlers, ev: HashChangeEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
   */
  readonly onlanguagechange:
    | ((this: WindowEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
   */
  readonly onmessage:
    | ((this: WindowEventHandlers, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
   */
  readonly onmessageerror:
    | ((this: WindowEventHandlers, ev: MessageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
   */
  readonly onoffline:
    | ((this: WindowEventHandlers, ev: Event) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
   */
  readonly ononline: ((this: WindowEventHandlers, ev: Event) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
   */
  readonly onpagehide:
    | ((this: WindowEventHandlers, ev: PageTransitionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
   */
  readonly onpageshow:
    | ((this: WindowEventHandlers, ev: PageTransitionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
   */
  readonly onpopstate:
    | ((this: WindowEventHandlers, ev: PopStateEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
   */
  readonly onrejectionhandled:
    | ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
   */
  readonly onstorage:
    | ((this: WindowEventHandlers, ev: StorageEvent) => unknown)
    | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
   */
  readonly onunhandledrejection:
    | ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => unknown)
    | null;
  /**
   * @deprecated
   *
   *   [MDN
   *   Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)
   */
  readonly onunload: ((this: WindowEventHandlers, ev: Event) => unknown) | null;
  addEventListener<K extends keyof WindowEventHandlersEventMap>(
    type: K,
    listener: (
      this: WindowEventHandlers,
      ev: WindowEventHandlersEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof WindowEventHandlersEventMap>(
    type: K,
    listener: (
      this: WindowEventHandlers,
      ev: WindowEventHandlersEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

interface WindowLocalStorage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
   */
  readonly localStorage: Storage;
}

interface WindowOrWorkerGlobalScope {
  /**
   * Available only in secure contexts.
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
   */
  readonly caches: CacheStorage;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated)
   */
  readonly crossOriginIsolated: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/crypto_property)
   */
  readonly crypto: Crypto;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB) */
  readonly indexedDB: IDBFactory;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext)
   */
  readonly isSecureContext: boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin) */
  readonly origin: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
   */
  readonly performance: Performance;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/atob) */
  atob(data: string): string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/btoa) */
  btoa(data: string): string;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearInterval) */
  clearInterval(id: number | undefined): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearTimeout) */
  clearTimeout(id: number | undefined): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
   */
  createImageBitmap(
    image: ImageBitmapSource,
    options?: ImageBitmapOptions,
  ): Promise<ImageBitmap>;
  createImageBitmap(
    image: ImageBitmapSource,
    sx: number,
    sy: number,
    sw: number,
    sh: number,
    options?: ImageBitmapOptions,
  ): Promise<ImageBitmap>;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/fetch) */
  fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/queueMicrotask)
   */
  queueMicrotask(callback: VoidFunction): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/reportError) */
  reportError(e: unknown): void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setInterval) */
  setInterval(
    handler: TimerHandler,
    timeout?: number,
    ...arguments: readonly any[]
  ): number;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setTimeout) */
  setTimeout(
    handler: TimerHandler,
    timeout?: number,
    ...arguments: readonly any[]
  ): number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/structuredClone)
   */
  structuredClone<T = unknown>(
    value: T,
    options?: StructuredSerializeOptions,
  ): T;
}

interface WindowSessionStorage {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
   */
  readonly sessionStorage: Storage;
}

interface WorkerEventMap extends AbstractWorkerEventMap {
  readonly message: MessageEvent;
  readonly messageerror: MessageEvent;
}

/**
 * This Web Workers API interface represents a background task that can be
 * easily created and can send messages back to its creator. Creating a worker
 * is as simple as calling the Worker() constructor and specifying a script to
 * be run in the worker thread.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
 */
interface Worker extends EventTarget, AbstractWorker {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Worker/message_event)
   */
  readonly onmessage: ((this: Worker, ev: MessageEvent) => unknown) | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event)
   */
  readonly onmessageerror: ((this: Worker, ev: MessageEvent) => unknown) | null;
  /**
   * Clones message and transmits it to worker's global environment. transfer
   * can be passed as a list of objects that are to be transferred rather than
   * cloned.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
   */
  postMessage(message: unknown, transfer: readonly Transferable[]): void;
  postMessage(message: unknown, options?: StructuredSerializeOptions): void;
  /**
   * Aborts worker's associated global environment.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Worker/terminate)
   */
  terminate(): void;
  addEventListener<K extends keyof WorkerEventMap>(
    type: K,
    listener: (this: Worker, ev: WorkerEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof WorkerEventMap>(
    type: K,
    listener: (this: Worker, ev: WorkerEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var Worker: {
  readonly prototype: Worker;
  new (scriptURL: string | URL, options?: WorkerOptions): Worker;
};

/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet)
 */
interface Worklet {
  /**
   * Loads and executes the module script given by moduleURL into all of
   * worklet's global scopes. It can also create additional global scopes as
   * part of this process, depending on the worklet type. The returned promise
   * will fulfill once the script has been successfully loaded and run in all
   * global scopes.
   *
   * The credentials option can be set to a credentials mode to modify the
   * script-fetching process. It defaults to "same-origin".
   *
   * Any failures in fetching the script or its dependencies will cause the
   * returned promise to be rejected with an "AbortError" DOMException. Any
   * errors in parsing the script or its dependencies will cause the returned
   * promise to be rejected with the exception generated during parsing.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Worklet/addModule)
   */
  addModule(moduleURL: string | URL, options?: WorkletOptions): Promise<void>;
}

declare var Worklet: {
  readonly prototype: Worklet;
  new (): Worklet;
};

/**
 * This Streams API interface provides a standard abstraction for writing
 * streaming data to a destination, known as a sink. This object comes with
 * built-in backpressure and queuing.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
 */
interface WritableStream<W = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked)
   */
  readonly locked: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/abort)
   */
  abort(reason?: unknown): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/close)
   */
  close(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter)
   */
  getWriter(): WritableStreamDefaultWriter<W>;
}

declare var WritableStream: {
  readonly prototype: WritableStream;
  new <W = unknown>(
    underlyingSink?: UnderlyingSink<W>,
    strategy?: QueuingStrategy<W>,
  ): WritableStream<W>;
};

/**
 * This Streams API interface represents a controller allowing control of a
 * WritableStream's state. When constructing a WritableStream, the underlying
 * sink is given a corresponding WritableStreamDefaultController instance to
 * manipulate.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
 */
interface WritableStreamDefaultController {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)
   */
  readonly signal: AbortSignal;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error)
   */
  error(e?: unknown): void;
}

declare var WritableStreamDefaultController: {
  readonly prototype: WritableStreamDefaultController;
  new (): WritableStreamDefaultController;
};

/**
 * This Streams API interface is the object returned by
 * WritableStream.getWriter() and once created locks the < writer to the
 * WritableStream ensuring that no other streams can write to the underlying
 * sink.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
 */
interface WritableStreamDefaultWriter<W = unknown> {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed)
   */
  readonly closed: Promise<undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize)
   */
  readonly desiredSize: number | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready)
   */
  readonly ready: Promise<undefined>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort)
   */
  abort(reason?: unknown): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close)
   */
  close(): Promise<void>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock)
   */
  releaseLock(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write)
   */
  write(chunk?: W): Promise<void>;
}

declare var WritableStreamDefaultWriter: {
  readonly prototype: WritableStreamDefaultWriter;
  new <W = unknown>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;
};

/**
 * An XML document. It inherits from the generic Document and does not add any
 * specific methods or properties to it: nevertheless, several algorithms behave
 * differently with the two types of documents.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLDocument)
 */
interface XMLDocument extends Document {
  addEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: XMLDocument, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
    type: K,
    listener: (this: XMLDocument, ev: DocumentEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var XMLDocument: {
  readonly prototype: XMLDocument;
  new (): XMLDocument;
};

interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {
  readonly readystatechange: Event;
}

/**
 * Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve
 * data from a URL without having to do a full page refresh. This enables a Web
 * page to update just part of a page without disrupting what the user is
 * doing.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
 */
interface XMLHttpRequest extends XMLHttpRequestEventTarget {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)
   */
  readonly onreadystatechange:
    | ((this: XMLHttpRequest, ev: Event) => unknown)
    | null;
  /**
   * Returns client's state.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
   */
  readonly readyState: number;
  /**
   * Returns the response body.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
   */
  readonly response: unknown;
  /**
   * Returns response as text.
   *
   * Throws an "InvalidStateError" DOMException if responseType is not the
   * empty string or "text".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
   */
  readonly responseText: string;
  /**
   * Returns the response type.
   *
   * Can be set to change the response type. Values are: the empty string
   * (default), "arraybuffer", "blob", "document", "json", and "text".
   *
   * When set: setting to "document" is ignored if current global object is
   * not a Window object.
   *
   * When set: throws an "InvalidStateError" DOMException if state is loading
   * or done.
   *
   * When set: throws an "InvalidAccessError" DOMException if the synchronous
   * flag is set and current global object is a Window object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
   */
  readonly responseType: XMLHttpRequestResponseType;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)
   */
  readonly responseURL: string;
  /**
   * Returns the response as document.
   *
   * Throws an "InvalidStateError" DOMException if responseType is not the
   * empty string or "document".
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)
   */
  readonly responseXML: Document | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)
   */
  readonly status: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)
   */
  readonly statusText: string;
  /**
   * Can be set to a time in milliseconds. When set to a non-zero value will
   * cause fetching to terminate after the given time has passed. When the
   * time has passed, the request has not yet completed, and this's
   * synchronous flag is unset, a timeout event will then be dispatched, or a
   * "TimeoutError" DOMException will be thrown otherwise (for the send()
   * method).
   *
   * When set: throws an "InvalidAccessError" DOMException if the synchronous
   * flag is set and current global object is a Window object.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
   */
  readonly timeout: number;
  /**
   * Returns the associated XMLHttpRequestUpload object. It can be used to
   * gather transmission information when data is transferred to a server.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
   */
  readonly upload: XMLHttpRequestUpload;
  /**
   * True when credentials are to be included in a cross-origin request. False
   * when they are to be excluded in a cross-origin request and when cookies
   * are to be ignored in its response. Initially false.
   *
   * When set: throws an "InvalidStateError" DOMException if state is not
   * unsent or opened, or if the send() flag is set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
   */
  readonly withCredentials: boolean;
  /**
   * Cancels any network activity.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/abort)
   */
  abort(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getAllResponseHeaders)
   */
  getAllResponseHeaders(): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getResponseHeader)
   */
  getResponseHeader(name: string): string | null;
  /**
   * Sets the request method, request URL, and synchronous flag.
   *
   * Throws a "SyntaxError" DOMException if either method is not a valid
   * method or url cannot be parsed.
   *
   * Throws a "SecurityError" DOMException if method is a case-insensitive
   * match for `CONNECT`, `TRACE`, or `TRACK`.
   *
   * Throws an "InvalidAccessError" DOMException if async is false, current
   * global object is a Window object, and the timeout attribute is not zero
   * or the responseType attribute is not the empty string.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
   */
  open(method: string, url: string | URL): void;
  open(
    method: string,
    url: string | URL,
    async: boolean,
    username?: string | null,
    password?: string | null,
  ): void;
  /**
   * Acts as if the `Content-Type` header value for a response is mime. (It
   * does not change the header.)
   *
   * Throws an "InvalidStateError" DOMException if state is loading or done.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/overrideMimeType)
   */
  overrideMimeType(mime: string): void;
  /**
   * Initiates the request. The body argument provides the request body, if
   * any, and is ignored if the request method is GET or HEAD.
   *
   * Throws an "InvalidStateError" DOMException if either state is not opened
   * or the send() flag is set.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/send)
   */
  send(body?: Document | XMLHttpRequestBodyInit | null): void;
  /**
   * Combines a header in author request headers.
   *
   * Throws an "InvalidStateError" DOMException if either state is not opened
   * or the send() flag is set.
   *
   * Throws a "SyntaxError" DOMException if name is not a header name or if
   * value is not a header value.
   *
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/setRequestHeader)
   */
  setRequestHeader(name: string, value: string): void;
  readonly UNSENT: 0;
  readonly OPENED: 1;
  readonly HEADERS_RECEIVED: 2;
  readonly LOADING: 3;
  readonly DONE: 4;
  addEventListener<K extends keyof XMLHttpRequestEventMap>(
    type: K,
    listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof XMLHttpRequestEventMap>(
    type: K,
    listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var XMLHttpRequest: {
  readonly prototype: XMLHttpRequest;
  new (): XMLHttpRequest;
  readonly UNSENT: 0;
  readonly OPENED: 1;
  readonly HEADERS_RECEIVED: 2;
  readonly LOADING: 3;
  readonly DONE: 4;
};

interface XMLHttpRequestEventTargetEventMap {
  readonly abort: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly error: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly load: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly loadend: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly loadstart: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly progress: ProgressEvent<XMLHttpRequestEventTarget>;
  readonly timeout: ProgressEvent<XMLHttpRequestEventTarget>;
}

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)
 */
interface XMLHttpRequestEventTarget extends EventTarget {
  readonly onabort:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly onerror:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly onload:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly onloadend:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly onloadstart:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly onprogress:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  readonly ontimeout:
    | ((this: XMLHttpRequest, ev: ProgressEvent) => unknown)
    | null;
  addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(
    type: K,
    listener: (
      this: XMLHttpRequestEventTarget,
      ev: XMLHttpRequestEventTargetEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(
    type: K,
    listener: (
      this: XMLHttpRequestEventTarget,
      ev: XMLHttpRequestEventTargetEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var XMLHttpRequestEventTarget: {
  readonly prototype: XMLHttpRequestEventTarget;
  new (): XMLHttpRequestEventTarget;
};

/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)
 */
interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
  addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(
    type: K,
    listener: (
      this: XMLHttpRequestUpload,
      ev: XMLHttpRequestEventTargetEventMap[K],
    ) => unknown,
    options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(
    type: K,
    listener: (
      this: XMLHttpRequestUpload,
      ev: XMLHttpRequestEventTargetEventMap[K],
    ) => unknown,
    options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
    type: string,
    listener: EventListenerOrEventListenerObject,
    options?: boolean | EventListenerOptions,
  ): void;
}

declare var XMLHttpRequestUpload: {
  readonly prototype: XMLHttpRequestUpload;
  new (): XMLHttpRequestUpload;
};

/**
 * Provides the serializeToString() method to construct an XML string
 * representing a DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer)
 */
interface XMLSerializer {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer/serializeToString)
   */
  serializeToString(root: Node): string;
}

declare var XMLSerializer: {
  readonly prototype: XMLSerializer;
  new (): XMLSerializer;
};

/**
 * The XPathEvaluator interface allows to compile and evaluate XPath
 * expressions.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)
 */
interface XPathEvaluator extends XPathEvaluatorBase {}

declare var XPathEvaluator: {
  readonly prototype: XPathEvaluator;
  new (): XPathEvaluator;
};

interface XPathEvaluatorBase {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createExpression)
   */
  createExpression(
    expression: string,
    resolver?: XPathNSResolver | null,
  ): XPathExpression;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/createNSResolver)
   */
  createNSResolver(nodeResolver: Node): Node;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/Document/evaluate)
   */
  evaluate(
    expression: string,
    contextNode: Node,
    resolver?: XPathNSResolver | null,
    type?: number,
    result?: XPathResult | null,
  ): XPathResult;
}

/**
 * This interface is a compiled XPath expression that can be evaluated on a
 * document or specific node to return information its DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression)
 */
interface XPathExpression {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression/evaluate)
   */
  evaluate(
    contextNode: Node,
    type?: number,
    result?: XPathResult | null,
  ): XPathResult;
}

declare var XPathExpression: {
  readonly prototype: XPathExpression;
  new (): XPathExpression;
};

/**
 * The results generated by evaluating an XPath expression within the context of
 * a given node.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult)
 */
interface XPathResult {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue)
   */
  readonly booleanValue: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState)
   */
  readonly invalidIteratorState: boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue)
   */
  readonly numberValue: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType)
   */
  readonly resultType: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue)
   */
  readonly singleNodeValue: Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength)
   */
  readonly snapshotLength: number;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue)
   */
  readonly stringValue: string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/iterateNext)
   */
  iterateNext(): Node | null;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotItem)
   */
  snapshotItem(index: number): Node | null;
  readonly ANY_TYPE: 0;
  readonly NUMBER_TYPE: 1;
  readonly STRING_TYPE: 2;
  readonly BOOLEAN_TYPE: 3;
  readonly UNORDERED_NODE_ITERATOR_TYPE: 4;
  readonly ORDERED_NODE_ITERATOR_TYPE: 5;
  readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6;
  readonly ORDERED_NODE_SNAPSHOT_TYPE: 7;
  readonly ANY_UNORDERED_NODE_TYPE: 8;
  readonly FIRST_ORDERED_NODE_TYPE: 9;
}

declare var XPathResult: {
  readonly prototype: XPathResult;
  new (): XPathResult;
  readonly ANY_TYPE: 0;
  readonly NUMBER_TYPE: 1;
  readonly STRING_TYPE: 2;
  readonly BOOLEAN_TYPE: 3;
  readonly UNORDERED_NODE_ITERATOR_TYPE: 4;
  readonly ORDERED_NODE_ITERATOR_TYPE: 5;
  readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6;
  readonly ORDERED_NODE_SNAPSHOT_TYPE: 7;
  readonly ANY_UNORDERED_NODE_TYPE: 8;
  readonly FIRST_ORDERED_NODE_TYPE: 9;
};

/**
 * An XSLTProcessor applies an XSLT stylesheet transformation to an XML document
 * to produce a new XML document as output. It has methods to load the XSLT
 * stylesheet, to manipulate [xsl:param](xsl:param) parameter values, and to
 * apply the transformation to documents.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)
 */
interface XSLTProcessor {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/clearParameters)
   */
  clearParameters(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/getParameter)
   */
  getParameter(namespaceURI: string | null, localName: string): unknown;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/importStylesheet)
   */
  importStylesheet(style: Node): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/removeParameter)
   */
  removeParameter(namespaceURI: string | null, localName: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/reset)
   */
  reset(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/setParameter)
   */
  setParameter(
    namespaceURI: string | null,
    localName: string,
    value: unknown,
  ): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToDocument)
   */
  transformToDocument(source: Node): Document;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToFragment)
   */
  transformToFragment(source: Node, output: Document): DocumentFragment;
}

declare var XSLTProcessor: {
  readonly prototype: XSLTProcessor;
  new (): XSLTProcessor;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/console) */
interface Console {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/assert_static)
   */
  assert(condition?: boolean, ...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/clear_static)
   */
  clear(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/count_static)
   */
  count(label?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/countReset_static)
   */
  countReset(label?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/debug_static)
   */
  debug(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/dir_static)
   */
  dir(item?: unknown, options?: unknown): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/dirxml_static)
   */
  dirxml(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/error_static)
   */
  error(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/group_static)
   */
  group(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static)
   */
  groupCollapsed(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static)
   */
  groupEnd(): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/info_static)
   */
  info(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)
   */
  log(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/table_static)
   */
  table(tabularData?: unknown, properties?: readonly string[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/time_static)
   */
  time(label?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static)
   */
  timeEnd(label?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/timeLog_static)
   */
  timeLog(label?: string, ...data: readonly any[]): void;
  timeStamp(label?: string): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/trace_static)
   */
  trace(...data: readonly any[]): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/console/warn_static)
   */
  warn(...data: readonly any[]): void;
}

declare let console: Console;

/**
 * Holds useful CSS-related methods. No object with this interface are
 * implemented: it contains only static methods and therefore is a utilitarian
 * interface.
 */
declare namespace CSS {
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/highlights_static)
   */
  var highlights: HighlightRegistry;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function Hz(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function Q(value: number): CSSUnitValue;
  function cap(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function ch(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cm(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqb(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqmax(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqmin(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function cqw(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function deg(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dpcm(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dpi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dppx(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvb(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvmax(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvmin(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function dvw(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function em(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/escape_static)
   */
  function escape(ident: string): string;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function ex(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function fr(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function grad(value: number): CSSUnitValue;
  function ic(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function kHz(value: number): CSSUnitValue;
  function lh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvb(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvmax(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvmin(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function lvw(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function mm(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function ms(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function number(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function pc(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function percent(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function pt(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function px(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function rad(value: number): CSSUnitValue;
  function rcap(value: number): CSSUnitValue;
  function rch(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/registerProperty_static)
   */
  function registerProperty(definition: PropertyDefinition): void;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function rem(value: number): CSSUnitValue;
  function rex(value: number): CSSUnitValue;
  function ric(value: number): CSSUnitValue;
  function rlh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function s(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/supports_static)
   */
  function supports(property: string, value: string): boolean;
  function supports(conditionText: string): boolean;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svb(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svmax(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svmin(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function svw(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function turn(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vb(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vh(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vi(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vmax(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vmin(value: number): CSSUnitValue;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
   */
  function vw(value: number): CSSUnitValue;
}

declare namespace WebAssembly {
  interface CompileError extends Error {}

  var CompileError: {
    readonly prototype: CompileError;
    new (message?: string): CompileError;
    (message?: string): CompileError;
  };

  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global)
   */
  interface Global<T extends ValueType = ValueType> {
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/value)
     */
    readonly value: ValueTypeMap[T];
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/valueOf)
     */
    valueOf(): ValueTypeMap[T];
  }

  var Global: {
    readonly prototype: Global;
    new <T extends ValueType = ValueType>(
      descriptor: GlobalDescriptor<T>,
      v?: ValueTypeMap[T],
    ): Global<T>;
  };

  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Instance)
   */
  interface Instance {
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Instance/exports)
     */
    readonly exports: Exports;
  }

  var Instance: {
    readonly prototype: Instance;
    new (module: Module, importObject?: Imports): Instance;
  };

  interface LinkError extends Error {}

  var LinkError: {
    readonly prototype: LinkError;
    new (message?: string): LinkError;
    (message?: string): LinkError;
  };

  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory)
   */
  interface Memory {
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory/buffer)
     */
    readonly buffer: ArrayBuffer;
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory/grow)
     */
    grow(delta: number): number;
  }

  var Memory: {
    readonly prototype: Memory;
    new (descriptor: MemoryDescriptor): Memory;
  };

  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module)
   */
  interface Module {}

  var Module: {
    readonly prototype: Module;
    new (bytes: BufferSource): Module;
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/customSections_static)
     */
    customSections(
      moduleObject: Module,
      sectionName: string,
    ): readonly ArrayBuffer[];
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/exports_static)
     */
    exports(moduleObject: Module): readonly ModuleExportDescriptor[];
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/imports_static)
     */
    imports(moduleObject: Module): readonly ModuleImportDescriptor[];
  };

  interface RuntimeError extends Error {}

  var RuntimeError: {
    readonly prototype: RuntimeError;
    new (message?: string): RuntimeError;
    (message?: string): RuntimeError;
  };

  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table)
   */
  interface Table {
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/length)
     */
    readonly length: number;
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/get)
     */
    get(index: number): unknown;
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/grow)
     */
    grow(delta: number, value?: unknown): number;
    /**
     * [MDN
     * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/set)
     */
    set(index: number, value?: unknown): void;
  }

  var Table: {
    readonly prototype: Table;
    new (descriptor: TableDescriptor, value?: unknown): Table;
  };

  interface GlobalDescriptor<T extends ValueType = ValueType> {
    readonly mutable?: boolean;
    readonly value: T;
  }

  interface MemoryDescriptor {
    readonly initial: number;
    readonly maximum?: number;
    readonly shared?: boolean;
  }

  interface ModuleExportDescriptor {
    readonly kind: ImportExportKind;
    readonly name: string;
  }

  interface ModuleImportDescriptor {
    readonly kind: ImportExportKind;
    readonly module: string;
    readonly name: string;
  }

  interface TableDescriptor {
    readonly element: TableKind;
    readonly initial: number;
    readonly maximum?: number;
  }

  interface ValueTypeMap {
    readonly anyfunc: Function;
    readonly externref: unknown;
    readonly f32: number;
    readonly f64: number;
    readonly i32: number;
    readonly i64: bigint;
    readonly v128: never;
  }

  interface WebAssemblyInstantiatedSource {
    readonly instance: Instance;
    readonly module: Module;
  }

  type ImportExportKind = 'function' | 'global' | 'memory' | 'table';
  type TableKind = 'anyfunc' | 'externref';
  type ExportValue = Function | Global | Memory | Table;
  type Exports = Record<string, ExportValue>;
  type ImportValue = ExportValue | number;
  type Imports = Record<string, ModuleImports>;
  type ModuleImports = Record<string, ImportValue>;
  type ValueType = keyof ValueTypeMap;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/compile_static)
   */
  function compile(bytes: BufferSource): Promise<Module>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/compileStreaming_static)
   */
  function compileStreaming(
    source: Response | PromiseLike<Response>,
  ): Promise<Module>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/instantiate_static)
   */
  function instantiate(
    bytes: BufferSource,
    importObject?: Imports,
  ): Promise<WebAssemblyInstantiatedSource>;
  function instantiate(
    moduleObject: Module,
    importObject?: Imports,
  ): Promise<Instance>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/instantiateStreaming_static)
   */
  function instantiateStreaming(
    source: Response | PromiseLike<Response>,
    importObject?: Imports,
  ): Promise<WebAssemblyInstantiatedSource>;
  /**
   * [MDN
   * Reference](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/validate_static)
   */
  function validate(bytes: BufferSource): boolean;
}

interface BlobCallback {
  (blob: Blob | null): void;
}

interface CustomElementConstructor {
  new (...params: readonly any[]): HTMLElement;
}

interface DecodeErrorCallback {
  (error: DOMException): void;
}

interface DecodeSuccessCallback {
  (decodedData: AudioBuffer): void;
}

interface EncodedVideoChunkOutputCallback {
  (chunk: EncodedVideoChunk, metadata?: EncodedVideoChunkMetadata): void;
}

interface ErrorCallback {
  (err: DOMException): void;
}

interface FileCallback {
  (file: File): void;
}

interface FileSystemEntriesCallback {
  (entries: readonly FileSystemEntry[]): void;
}

interface FileSystemEntryCallback {
  (entry: FileSystemEntry): void;
}

interface FrameRequestCallback {
  (time: DOMHighResTimeStamp): void;
}

interface FunctionStringCallback {
  (data: string): void;
}

interface IdleRequestCallback {
  (deadline: IdleDeadline): void;
}

interface IntersectionObserverCallback {
  (
    entries: readonly IntersectionObserverEntry[],
    observer: IntersectionObserver,
  ): void;
}

interface LockGrantedCallback {
  (lock: Lock | null): unknown;
}

interface MediaSessionActionHandler {
  (details: MediaSessionActionDetails): void;
}

interface MutationCallback {
  (mutations: readonly MutationRecord[], observer: MutationObserver): void;
}

interface NotificationPermissionCallback {
  (permission: NotificationPermission): void;
}

interface OnBeforeUnloadEventHandlerNonNull {
  (event: Event): string | null;
}

interface OnErrorEventHandlerNonNull {
  (
    event: Event | string,
    source?: string,
    lineno?: number,
    colno?: number,
    error?: Error,
  ): unknown;
}

interface PerformanceObserverCallback {
  (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;
}

interface PositionCallback {
  (position: GeolocationPosition): void;
}

interface PositionErrorCallback {
  (positionError: GeolocationPositionError): void;
}

interface QueuingStrategySize<T = unknown> {
  (chunk: T): number;
}

interface RTCPeerConnectionErrorCallback {
  (error: DOMException): void;
}

interface RTCSessionDescriptionCallback {
  (description: RTCSessionDescriptionInit): void;
}

interface RemotePlaybackAvailabilityCallback {
  (available: boolean): void;
}

interface ReportingObserverCallback {
  (reports: readonly Report[], observer: ReportingObserver): void;
}

interface ResizeObserverCallback {
  (entries: readonly ResizeObserverEntry[], observer: ResizeObserver): void;
}

interface TransformerFlushCallback<O> {
  (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;
}

interface TransformerStartCallback<O> {
  (controller: TransformStreamDefaultController<O>): unknown;
}

interface TransformerTransformCallback<I, O> {
  (
    chunk: I,
    controller: TransformStreamDefaultController<O>,
  ): void | PromiseLike<void>;
}

interface UnderlyingSinkAbortCallback {
  (reason?: unknown): void | PromiseLike<void>;
}

interface UnderlyingSinkCloseCallback {
  (): void | PromiseLike<void>;
}

interface UnderlyingSinkStartCallback {
  (controller: WritableStreamDefaultController): unknown;
}

interface UnderlyingSinkWriteCallback<W> {
  (
    chunk: W,
    controller: WritableStreamDefaultController,
  ): void | PromiseLike<void>;
}

interface UnderlyingSourceCancelCallback {
  (reason?: unknown): void | PromiseLike<void>;
}

interface UnderlyingSourcePullCallback<R> {
  (controller: ReadableStreamController<R>): void | PromiseLike<void>;
}

interface UnderlyingSourceStartCallback<R> {
  (controller: ReadableStreamController<R>): unknown;
}

interface VideoFrameOutputCallback {
  (output: VideoFrame): void;
}

interface VideoFrameRequestCallback {
  (now: DOMHighResTimeStamp, metadata: VideoFrameCallbackMetadata): void;
}

interface VoidFunction {
  (): void;
}

interface WebCodecsErrorCallback {
  (error: DOMException): void;
}

interface HTMLElementTagNameMap {
  readonly a: HTMLAnchorElement;
  readonly abbr: HTMLElement;
  readonly address: HTMLElement;
  readonly area: HTMLAreaElement;
  readonly article: HTMLElement;
  readonly aside: HTMLElement;
  readonly audio: HTMLAudioElement;
  readonly b: HTMLElement;
  readonly base: HTMLBaseElement;
  readonly bdi: HTMLElement;
  readonly bdo: HTMLElement;
  readonly blockquote: HTMLQuoteElement;
  readonly body: HTMLBodyElement;
  readonly br: HTMLBRElement;
  readonly button: HTMLButtonElement;
  readonly canvas: HTMLCanvasElement;
  readonly caption: HTMLTableCaptionElement;
  readonly cite: HTMLElement;
  readonly code: HTMLElement;
  readonly col: HTMLTableColElement;
  readonly colgroup: HTMLTableColElement;
  readonly data: HTMLDataElement;
  readonly datalist: HTMLDataListElement;
  readonly dd: HTMLElement;
  readonly del: HTMLModElement;
  readonly details: HTMLDetailsElement;
  readonly dfn: HTMLElement;
  readonly dialog: HTMLDialogElement;
  readonly div: HTMLDivElement;
  readonly dl: HTMLDListElement;
  readonly dt: HTMLElement;
  readonly em: HTMLElement;
  readonly embed: HTMLEmbedElement;
  readonly fieldset: HTMLFieldSetElement;
  readonly figcaption: HTMLElement;
  readonly figure: HTMLElement;
  readonly footer: HTMLElement;
  readonly form: HTMLFormElement;
  readonly h1: HTMLHeadingElement;
  readonly h2: HTMLHeadingElement;
  readonly h3: HTMLHeadingElement;
  readonly h4: HTMLHeadingElement;
  readonly h5: HTMLHeadingElement;
  readonly h6: HTMLHeadingElement;
  readonly head: HTMLHeadElement;
  readonly header: HTMLElement;
  readonly hgroup: HTMLElement;
  readonly hr: HTMLHRElement;
  readonly html: HTMLHtmlElement;
  readonly i: HTMLElement;
  readonly iframe: HTMLIFrameElement;
  readonly img: HTMLImageElement;
  readonly input: HTMLInputElement;
  readonly ins: HTMLModElement;
  readonly kbd: HTMLElement;
  readonly label: HTMLLabelElement;
  readonly legend: HTMLLegendElement;
  readonly li: HTMLLIElement;
  readonly link: HTMLLinkElement;
  readonly main: HTMLElement;
  readonly map: HTMLMapElement;
  readonly mark: HTMLElement;
  readonly menu: HTMLMenuElement;
  readonly meta: HTMLMetaElement;
  readonly meter: HTMLMeterElement;
  readonly nav: HTMLElement;
  readonly noscript: HTMLElement;
  readonly object: HTMLObjectElement;
  readonly ol: HTMLOListElement;
  readonly optgroup: HTMLOptGroupElement;
  readonly option: HTMLOptionElement;
  readonly output: HTMLOutputElement;
  readonly p: HTMLParagraphElement;
  readonly picture: HTMLPictureElement;
  readonly pre: HTMLPreElement;
  readonly progress: HTMLProgressElement;
  readonly q: HTMLQuoteElement;
  readonly rp: HTMLElement;
  readonly rt: HTMLElement;
  readonly ruby: HTMLElement;
  readonly s: HTMLElement;
  readonly samp: HTMLElement;
  readonly script: HTMLScriptElement;
  readonly search: HTMLElement;
  readonly section: HTMLElement;
  readonly select: HTMLSelectElement;
  readonly slot: HTMLSlotElement;
  readonly small: HTMLElement;
  readonly source: HTMLSourceElement;
  readonly span: HTMLSpanElement;
  readonly strong: HTMLElement;
  readonly style: HTMLStyleElement;
  readonly sub: HTMLElement;
  readonly summary: HTMLElement;
  readonly sup: HTMLElement;
  readonly table: HTMLTableElement;
  readonly tbody: HTMLTableSectionElement;
  readonly td: HTMLTableCellElement;
  readonly template: HTMLTemplateElement;
  readonly textarea: HTMLTextAreaElement;
  readonly tfoot: HTMLTableSectionElement;
  readonly th: HTMLTableCellElement;
  readonly thead: HTMLTableSectionElement;
  readonly time: HTMLTimeElement;
  readonly title: HTMLTitleElement;
  readonly tr: HTMLTableRowElement;
  readonly track: HTMLTrackElement;
  readonly u: HTMLElement;
  readonly ul: HTMLUListElement;
  readonly var: HTMLElement;
  readonly video: HTMLVideoElement;
  readonly wbr: HTMLElement;
}

interface HTMLElementDeprecatedTagNameMap {
  readonly acronym: HTMLElement;
  readonly applet: HTMLUnknownElement;
  readonly basefont: HTMLElement;
  readonly bgsound: HTMLUnknownElement;
  readonly big: HTMLElement;
  readonly blink: HTMLUnknownElement;
  readonly center: HTMLElement;
  readonly dir: HTMLDirectoryElement;
  readonly font: HTMLFontElement;
  readonly frame: HTMLFrameElement;
  readonly frameset: HTMLFrameSetElement;
  readonly isindex: HTMLUnknownElement;
  readonly keygen: HTMLUnknownElement;
  readonly listing: HTMLPreElement;
  readonly marquee: HTMLMarqueeElement;
  readonly menuitem: HTMLElement;
  readonly multicol: HTMLUnknownElement;
  readonly nextid: HTMLUnknownElement;
  readonly nobr: HTMLElement;
  readonly noembed: HTMLElement;
  readonly noframes: HTMLElement;
  readonly param: HTMLParamElement;
  readonly plaintext: HTMLElement;
  readonly rb: HTMLElement;
  readonly rtc: HTMLElement;
  readonly spacer: HTMLUnknownElement;
  readonly strike: HTMLElement;
  readonly tt: HTMLElement;
  readonly xmp: HTMLPreElement;
}

interface SVGElementTagNameMap {
  readonly a: SVGAElement;
  readonly animate: SVGAnimateElement;
  readonly animateMotion: SVGAnimateMotionElement;
  readonly animateTransform: SVGAnimateTransformElement;
  readonly circle: SVGCircleElement;
  readonly clipPath: SVGClipPathElement;
  readonly defs: SVGDefsElement;
  readonly desc: SVGDescElement;
  readonly ellipse: SVGEllipseElement;
  readonly feBlend: SVGFEBlendElement;
  readonly feColorMatrix: SVGFEColorMatrixElement;
  readonly feComponentTransfer: SVGFEComponentTransferElement;
  readonly feComposite: SVGFECompositeElement;
  readonly feConvolveMatrix: SVGFEConvolveMatrixElement;
  readonly feDiffuseLighting: SVGFEDiffuseLightingElement;
  readonly feDisplacementMap: SVGFEDisplacementMapElement;
  readonly feDistantLight: SVGFEDistantLightElement;
  readonly feDropShadow: SVGFEDropShadowElement;
  readonly feFlood: SVGFEFloodElement;
  readonly feFuncA: SVGFEFuncAElement;
  readonly feFuncB: SVGFEFuncBElement;
  readonly feFuncG: SVGFEFuncGElement;
  readonly feFuncR: SVGFEFuncRElement;
  readonly feGaussianBlur: SVGFEGaussianBlurElement;
  readonly feImage: SVGFEImageElement;
  readonly feMerge: SVGFEMergeElement;
  readonly feMergeNode: SVGFEMergeNodeElement;
  readonly feMorphology: SVGFEMorphologyElement;
  readonly feOffset: SVGFEOffsetElement;
  readonly fePointLight: SVGFEPointLightElement;
  readonly feSpecularLighting: SVGFESpecularLightingElement;
  readonly feSpotLight: SVGFESpotLightElement;
  readonly feTile: SVGFETileElement;
  readonly feTurbulence: SVGFETurbulenceElement;
  readonly filter: SVGFilterElement;
  readonly foreignObject: SVGForeignObjectElement;
  readonly g: SVGGElement;
  readonly image: SVGImageElement;
  readonly line: SVGLineElement;
  readonly linearGradient: SVGLinearGradientElement;
  readonly marker: SVGMarkerElement;
  readonly mask: SVGMaskElement;
  readonly metadata: SVGMetadataElement;
  readonly mpath: SVGMPathElement;
  readonly path: SVGPathElement;
  readonly pattern: SVGPatternElement;
  readonly polygon: SVGPolygonElement;
  readonly polyline: SVGPolylineElement;
  readonly radialGradient: SVGRadialGradientElement;
  readonly rect: SVGRectElement;
  readonly script: SVGScriptElement;
  readonly set: SVGSetElement;
  readonly stop: SVGStopElement;
  readonly style: SVGStyleElement;
  readonly svg: SVGSVGElement;
  readonly switch: SVGSwitchElement;
  readonly symbol: SVGSymbolElement;
  readonly text: SVGTextElement;
  readonly textPath: SVGTextPathElement;
  readonly title: SVGTitleElement;
  readonly tspan: SVGTSpanElement;
  readonly use: SVGUseElement;
  readonly view: SVGViewElement;
}

interface MathMLElementTagNameMap {
  readonly annotation: MathMLElement;
  readonly 'annotation-xml': MathMLElement;
  readonly maction: MathMLElement;
  readonly math: MathMLElement;
  readonly merror: MathMLElement;
  readonly mfrac: MathMLElement;
  readonly mi: MathMLElement;
  readonly mmultiscripts: MathMLElement;
  readonly mn: MathMLElement;
  readonly mo: MathMLElement;
  readonly mover: MathMLElement;
  readonly mpadded: MathMLElement;
  readonly mphantom: MathMLElement;
  readonly mprescripts: MathMLElement;
  readonly mroot: MathMLElement;
  readonly mrow: MathMLElement;
  readonly ms: MathMLElement;
  readonly mspace: MathMLElement;
  readonly msqrt: MathMLElement;
  readonly mstyle: MathMLElement;
  readonly msub: MathMLElement;
  readonly msubsup: MathMLElement;
  readonly msup: MathMLElement;
  readonly mtable: MathMLElement;
  readonly mtd: MathMLElement;
  readonly mtext: MathMLElement;
  readonly mtr: MathMLElement;
  readonly munder: MathMLElement;
  readonly munderover: MathMLElement;
  readonly semantics: MathMLElement;
}

/**
 * @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as
 *   appropriate, instead.
 */
type ElementTagNameMap = HTMLElementTagNameMap &
  Pick<
    SVGElementTagNameMap,
    Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>
  >;

declare let Audio: {
  new (src?: string): HTMLAudioElement;
};
declare let Image: {
  new (width?: number, height?: number): HTMLImageElement;
};
declare let Option: {
  new (
    text?: string,
    value?: string,
    defaultSelected?: boolean,
    selected?: boolean,
  ): HTMLOptionElement;
};
/**
 * @deprecated This is a legacy alias of `navigator`.
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
 */
declare let clientInformation: Navigator;
/**
 * Returns true if the window has been closed, false otherwise.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
 */
declare let closed: boolean;
/**
 * Defines a new custom element, mapping the given name to the given constructor
 * as an autonomous custom element.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
 */
declare let customElements: CustomElementRegistry;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)
 */
declare let devicePixelRatio: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document) */
declare let document: Document;
/**
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)
 */
declare let event: Event | undefined;
/**
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)
 */
declare let external: External;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
 */
declare let frameElement: Element | null;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames) */
declare let frames: WindowProxy;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history) */
declare let history: History;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)
 */
declare let innerHeight: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth) */
declare let innerWidth: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length) */
declare let length: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/location) */
declare let location: Location;
/**
 * Returns true if the location bar is visible; otherwise, returns false.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
 */
declare let locationbar: BarProp;
/**
 * Returns true if the menu bar is visible; otherwise, returns false.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
 */
declare let menubar: BarProp;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name) */
/** @deprecated */
declare const name: void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator) */
declare let navigator: Navigator;
/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
 */
declare let ondevicemotion:
  | ((this: Window, ev: DeviceMotionEvent) => unknown)
  | null;
/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
 */
declare let ondeviceorientation:
  | ((this: Window, ev: DeviceOrientationEvent) => unknown)
  | null;
/**
 * Available only in secure contexts.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
 */
declare let ondeviceorientationabsolute:
  | ((this: Window, ev: DeviceOrientationEvent) => unknown)
  | null;
/**
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)
 */
declare let onorientationchange: ((this: Window, ev: Event) => unknown) | null;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener) */
declare let opener: unknown;
/**
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)
 */
declare let orientation: number;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)
 */
declare let outerHeight: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth) */
declare let outerWidth: number;
/**
 * @deprecated This is a legacy alias of `scrollX`.
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
 */
declare let pageXOffset: number;
/**
 * @deprecated This is a legacy alias of `scrollY`.
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
 */
declare let pageYOffset: number;
/**
 * Refers to either the parent WindowProxy, or itself.
 *
 * It can rarely be null e.g. for contentWindow of an iframe that is already
 * removed from the parent.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
 */
declare let parent: WindowProxy;
/**
 * Returns true if the personal bar is visible; otherwise, returns false.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
 */
declare let personalbar: BarProp;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen) */
declare let screen: Screen;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft) */
declare let screenLeft: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop) */
declare let screenTop: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX) */
declare let screenX: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY) */
declare let screenY: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX) */
declare let scrollX: number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY) */
declare let scrollY: number;
/**
 * Returns true if the scrollbars are visible; otherwise, returns false.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
 */
declare let scrollbars: BarProp;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self) */
declare let self: Window & typeof globalThis;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
 */
declare let speechSynthesis: SpeechSynthesis;
/**
 * @deprecated
 *
 *   [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)
 */
declare let status: string;
/**
 * Returns true if the status bar is visible; otherwise, returns false.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
 */
declare let statusbar: BarProp;
/**
 * Returns true if the toolbar is visible; otherwise, returns false.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
 */
declare let toolbar: BarProp;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top) */
declare let top: WindowProxy | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
 */
declare let visualViewport: VisualViewport | null;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window) */
declare let window: Window & typeof globalThis;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert) */
declare function alert(message?: unknown): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur) */
declare function blur(): void;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback)
 */
declare function cancelIdleCallback(handle: number): void;
/**
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Window/captureEvents)
 */
declare function captureEvents(): void;
/**
 * Closes the window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
 */
declare function close(): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm) */
declare function confirm(message?: string): boolean;
/**
 * Moves the focus to the window's browsing context, if any.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
 */
declare function focus(): void;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle)
 */
declare function getComputedStyle(
  elt: Element,
  pseudoElt?: string | null,
): CSSStyleDeclaration;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection)
 */
declare function getSelection(): Selection | null;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia) */
declare function matchMedia(query: string): MediaQueryList;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy) */
declare function moveBy(x: number, y: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo) */
declare function moveTo(x: number, y: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open) */
declare function open(
  url?: string | URL,
  target?: string,
  features?: string,
): WindowProxy | null;
/**
 * Posts a message to the given window. Messages can be structured objects, e.g.
 * nested objects and arrays, can contain JavaScript values (strings, numbers,
 * Date objects, etc), and can contain certain data objects such as File Blob,
 * FileList, and ArrayBuffer objects.
 *
 * Objects listed in the transfer member of options are transferred, not just
 * cloned, meaning that they are no longer usable on the sending side.
 *
 * A target origin can be specified using the targetOrigin member of options. If
 * not provided, it defaults to "/". This default restricts the message to
 * same-origin targets only.
 *
 * If the origin of the target window doesn't match the given target origin, the
 * message is discarded, to avoid information leakage. To send the message to
 * the target regardless of origin, set the target origin to "*".
 *
 * Throws a "DataCloneError" DOMException if transfer array contains duplicate
 * objects or if message could not be cloned.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
 */
declare function postMessage(
  message: unknown,
  targetOrigin: string,
  transfer?: readonly Transferable[],
): void;
declare function postMessage(
  message: unknown,
  options?: WindowPostMessageOptions,
): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print) */
declare function print(): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt) */
declare function prompt(message?: string, _default?: string): string | null;
/**
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents)
 */
declare function releaseEvents(): void;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
 */
declare function requestIdleCallback(
  callback: IdleRequestCallback,
  options?: IdleRequestOptions,
): number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy) */
declare function resizeBy(x: number, y: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo) */
declare function resizeTo(width: number, height: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll) */
declare function scroll(options?: ScrollToOptions): void;
declare function scroll(x: number, y: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) */
declare function scrollBy(options?: ScrollToOptions): void;
declare function scrollBy(x: number, y: number): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) */
declare function scrollTo(options?: ScrollToOptions): void;
declare function scrollTo(x: number, y: number): void;
/**
 * Cancels the document load.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
 */
declare function stop(): void;
declare function toString(): string;
/**
 * Dispatches a synthetic event event to target and returns true if either
 * event's cancelable attribute value is false or its preventDefault() method
 * was not invoked, and false otherwise.
 *
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
 */
declare function dispatchEvent(event: Event): boolean;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame)
 */
declare function cancelAnimationFrame(handle: number): void;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame)
 */
declare function requestAnimationFrame(callback: FrameRequestCallback): number;
/**
 * Fires when the user aborts the download.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
 */
declare let onabort: ((this: Window, ev: UIEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
 */
declare let onanimationcancel:
  | ((this: Window, ev: AnimationEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
 */
declare let onanimationend:
  | ((this: Window, ev: AnimationEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
 */
declare let onanimationiteration:
  | ((this: Window, ev: AnimationEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
 */
declare let onanimationstart:
  | ((this: Window, ev: AnimationEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
 */
declare let onauxclick: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
 */
declare let onbeforeinput: ((this: Window, ev: InputEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
 */
declare let onbeforetoggle: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the object loses the input focus.
 *
 * @param ev The focus event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
 */
declare let onblur: ((this: Window, ev: FocusEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
 */
declare let oncancel: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when playback is possible, but would require further buffering.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
 */
declare let oncanplay: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
 */
declare let oncanplaythrough: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the contents of the object or selection have changed.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
 */
declare let onchange: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the user clicks the left mouse button on the object
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
 */
declare let onclick: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
 */
declare let onclose: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the user clicks the right mouse button in the client area, opening
 * the context menu.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
 */
declare let oncontextmenu: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
 */
declare let oncopy: ((this: Window, ev: ClipboardEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
 */
declare let oncuechange: ((this: Window, ev: Event) => unknown) | null;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event) */
declare let oncut: ((this: Window, ev: ClipboardEvent) => unknown) | null;
/**
 * Fires when the user double-clicks the object.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
 */
declare let ondblclick: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * Fires on the source object continuously during a drag operation.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
 */
declare let ondrag: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Fires on the source object when the user releases the mouse at the close of a
 * drag operation.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
 */
declare let ondragend: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Fires on the target element when the user drags the object to a valid drop
 * target.
 *
 * @param ev The drag event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
 */
declare let ondragenter: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Fires on the target object when the user moves the mouse out of a valid drop
 * target during a drag operation.
 *
 * @param ev The drag event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
 */
declare let ondragleave: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Fires on the target element continuously while the user drags the object over
 * a valid drop target.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
 */
declare let ondragover: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Fires on the source object when the user starts to drag a text selection or
 * selected object.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
 */
declare let ondragstart: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
 */
declare let ondrop: ((this: Window, ev: DragEvent) => unknown) | null;
/**
 * Occurs when the duration attribute is updated.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
 */
declare let ondurationchange: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the media element is reset to its initial state.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
 */
declare let onemptied: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the end of playback is reached.
 *
 * @param ev The event
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
 */
declare let onended: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when an error occurs during object loading.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
 */
declare let onerror: OnErrorEventHandler;
/**
 * Fires when the object receives focus.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
 */
declare let onfocus: ((this: Window, ev: FocusEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
 */
declare let onformdata: ((this: Window, ev: FormDataEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
 */
declare let ongotpointercapture:
  | ((this: Window, ev: PointerEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
 */
declare let oninput: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
 */
declare let oninvalid: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the user presses a key.
 *
 * @param ev The keyboard event
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
 */
declare let onkeydown: ((this: Window, ev: KeyboardEvent) => unknown) | null;
/**
 * Fires when the user presses an alphanumeric key.
 *
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
 * @param ev The event.
 */
declare let onkeypress: ((this: Window, ev: KeyboardEvent) => unknown) | null;
/**
 * Fires when the user releases a key.
 *
 * @param ev The keyboard event
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
 */
declare let onkeyup: ((this: Window, ev: KeyboardEvent) => unknown) | null;
/**
 * Fires immediately after the browser loads the object.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
 */
declare let onload: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when media data is loaded at the current playback position.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
 */
declare let onloadeddata: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the duration and dimensions of the media have been determined.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
 */
declare let onloadedmetadata: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when Internet Explorer begins looking for media data.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
 */
declare let onloadstart: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event)
 */
declare let onlostpointercapture:
  | ((this: Window, ev: PointerEvent) => unknown)
  | null;
/**
 * Fires when the user clicks the object with either mouse button.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
 */
declare let onmousedown: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
 */
declare let onmouseenter: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
 */
declare let onmouseleave: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * Fires when the user moves the mouse over the object.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
 */
declare let onmousemove: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * Fires when the user moves the mouse pointer outside the boundaries of the
 * object.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
 */
declare let onmouseout: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * Fires when the user moves the mouse pointer into the object.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
 */
declare let onmouseover: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * Fires when the user releases a mouse button while the mouse is over the
 * object.
 *
 * @param ev The mouse event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
 */
declare let onmouseup: ((this: Window, ev: MouseEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
 */
declare let onpaste: ((this: Window, ev: ClipboardEvent) => unknown) | null;
/**
 * Occurs when playback is paused.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
 */
declare let onpause: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the play method is requested.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
 */
declare let onplay: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the audio or video has started playing.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
 */
declare let onplaying: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
 */
declare let onpointercancel:
  | ((this: Window, ev: PointerEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
 */
declare let onpointerdown: ((this: Window, ev: PointerEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
 */
declare let onpointerenter:
  | ((this: Window, ev: PointerEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
 */
declare let onpointerleave:
  | ((this: Window, ev: PointerEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
 */
declare let onpointermove: ((this: Window, ev: PointerEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
 */
declare let onpointerout: ((this: Window, ev: PointerEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
 */
declare let onpointerover: ((this: Window, ev: PointerEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
 */
declare let onpointerup: ((this: Window, ev: PointerEvent) => unknown) | null;
/**
 * Occurs to indicate progress while downloading media data.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
 */
declare let onprogress: ((this: Window, ev: ProgressEvent) => unknown) | null;
/**
 * Occurs when the playback rate is increased or decreased.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
 */
declare let onratechange: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the user resets a form.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
 */
declare let onreset: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
 */
declare let onresize: ((this: Window, ev: UIEvent) => unknown) | null;
/**
 * Fires when the user repositions the scroll box in the scroll bar on the
 * object.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
 */
declare let onscroll: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
 */
declare let onscrollend: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
 */
declare let onsecuritypolicyviolation:
  | ((this: Window, ev: SecurityPolicyViolationEvent) => unknown)
  | null;
/**
 * Occurs when the seek operation ends.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
 */
declare let onseeked: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the current playback position is moved.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
 */
declare let onseeking: ((this: Window, ev: Event) => unknown) | null;
/**
 * Fires when the current selection changes.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
 */
declare let onselect: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
 */
declare let onselectionchange: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
 */
declare let onselectstart: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
 */
declare let onslotchange: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when the download has stopped.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
 */
declare let onstalled: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
 */
declare let onsubmit: ((this: Window, ev: SubmitEvent) => unknown) | null;
/**
 * Occurs if the load operation has been intentionally halted.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
 */
declare let onsuspend: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs to indicate the current playback position.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
 */
declare let ontimeupdate: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event)
 */
declare let ontoggle: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
 */
declare let ontouchcancel:
  | ((this: Window, ev: TouchEvent) => unknown)
  | null
  | undefined;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
 */
declare let ontouchend:
  | ((this: Window, ev: TouchEvent) => unknown)
  | null
  | undefined;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
 */
declare let ontouchmove:
  | ((this: Window, ev: TouchEvent) => unknown)
  | null
  | undefined;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
 */
declare let ontouchstart:
  | ((this: Window, ev: TouchEvent) => unknown)
  | null
  | undefined;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
 */
declare let ontransitioncancel:
  | ((this: Window, ev: TransitionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
 */
declare let ontransitionend:
  | ((this: Window, ev: TransitionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
 */
declare let ontransitionrun:
  | ((this: Window, ev: TransitionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
 */
declare let ontransitionstart:
  | ((this: Window, ev: TransitionEvent) => unknown)
  | null;
/**
 * Occurs when the volume is changed, or playback is muted or unmuted.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
 */
declare let onvolumechange: ((this: Window, ev: Event) => unknown) | null;
/**
 * Occurs when playback stops because the next frame of a video resource is not
 * available.
 *
 * @param ev The event.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
 */
declare let onwaiting: ((this: Window, ev: Event) => unknown) | null;
/**
 * @deprecated This is a legacy alias of `onanimationend`.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
 */
declare let onwebkitanimationend: ((this: Window, ev: Event) => unknown) | null;
/**
 * @deprecated This is a legacy alias of `onanimationiteration`.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
 */
declare let onwebkitanimationiteration:
  | ((this: Window, ev: Event) => unknown)
  | null;
/**
 * @deprecated This is a legacy alias of `onanimationstart`.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
 */
declare let onwebkitanimationstart:
  | ((this: Window, ev: Event) => unknown)
  | null;
/**
 * @deprecated This is a legacy alias of `ontransitionend`.
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
 */
declare let onwebkittransitionend:
  | ((this: Window, ev: Event) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
 */
declare let onwheel: ((this: Window, ev: WheelEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
 */
declare let onafterprint: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
 */
declare let onbeforeprint: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
 */
declare let onbeforeunload:
  | ((this: Window, ev: BeforeUnloadEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
 */
declare let ongamepadconnected:
  | ((this: Window, ev: GamepadEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
 */
declare let ongamepaddisconnected:
  | ((this: Window, ev: GamepadEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
 */
declare let onhashchange:
  | ((this: Window, ev: HashChangeEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
 */
declare let onlanguagechange: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
 */
declare let onmessage: ((this: Window, ev: MessageEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
 */
declare let onmessageerror:
  | ((this: Window, ev: MessageEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
 */
declare let onoffline: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
 */
declare let ononline: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
 */
declare let onpagehide:
  | ((this: Window, ev: PageTransitionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
 */
declare let onpageshow:
  | ((this: Window, ev: PageTransitionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
 */
declare let onpopstate: ((this: Window, ev: PopStateEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
 */
declare let onrejectionhandled:
  | ((this: Window, ev: PromiseRejectionEvent) => unknown)
  | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
 */
declare let onstorage: ((this: Window, ev: StorageEvent) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
 */
declare let onunhandledrejection:
  | ((this: Window, ev: PromiseRejectionEvent) => unknown)
  | null;
/**
 * @deprecated
 *
 *   [MDN
 *   Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)
 */
declare let onunload: ((this: Window, ev: Event) => unknown) | null;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
 */
declare let localStorage: Storage;
/**
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
 */
declare let caches: CacheStorage;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated)
 */
declare let crossOriginIsolated: boolean;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property) */
declare let crypto: Crypto;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB) */
declare let indexedDB: IDBFactory;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext) */
declare let isSecureContext: boolean;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin) */
declare let origin: string;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
 */
declare let performance: Performance;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/atob) */
declare function atob(data: string): string;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/btoa) */
declare function btoa(data: string): string;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearInterval) */
declare function clearInterval(id: number | undefined): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearTimeout) */
declare function clearTimeout(id: number | undefined): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap) */
declare function createImageBitmap(
  image: ImageBitmapSource,
  options?: ImageBitmapOptions,
): Promise<ImageBitmap>;
declare function createImageBitmap(
  image: ImageBitmapSource,
  sx: number,
  sy: number,
  sw: number,
  sh: number,
  options?: ImageBitmapOptions,
): Promise<ImageBitmap>;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/fetch) */
declare function fetch(
  input: RequestInfo | URL,
  init?: RequestInit,
): Promise<Response>;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/queueMicrotask) */
declare function queueMicrotask(callback: VoidFunction): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/reportError) */
declare function reportError(e: unknown): void;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setInterval) */
declare function setInterval(
  handler: TimerHandler,
  timeout?: number,
  ...arguments: readonly any[]
): number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/setTimeout) */
declare function setTimeout(
  handler: TimerHandler,
  timeout?: number,
  ...arguments: readonly any[]
): number;
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/structuredClone) */
declare function structuredClone<T = unknown>(
  value: T,
  options?: StructuredSerializeOptions,
): T;
/**
 * [MDN
 * Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
 */
declare let sessionStorage: Storage;
declare function addEventListener<K extends keyof WindowEventMap>(
  type: K,
  listener: (this: Window, ev: WindowEventMap[K]) => unknown,
  options?: boolean | AddEventListenerOptions,
): void;
declare function addEventListener(
  type: string,
  listener: EventListenerOrEventListenerObject,
  options?: boolean | AddEventListenerOptions,
): void;
declare function removeEventListener<K extends keyof WindowEventMap>(
  type: K,
  listener: (this: Window, ev: WindowEventMap[K]) => unknown,
  options?: boolean | EventListenerOptions,
): void;
declare function removeEventListener(
  type: string,
  listener: EventListenerOrEventListenerObject,
  options?: boolean | EventListenerOptions,
): void;
type AlgorithmIdentifier = Algorithm | string;
type AllowSharedBufferSource = ArrayBuffer | ArrayBufferView;
type AutoFill =
  | AutoFillBase
  | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;
type AutoFillField =
  | AutoFillNormalField
  | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;
type AutoFillSection = `section-${string}`;
type BigInteger = Uint8Array;
type BinaryData = ArrayBuffer | ArrayBufferView;
type BlobPart = BufferSource | Blob | string;
type BodyInit = ReadableStream | XMLHttpRequestBodyInit;
type BufferSource = ArrayBufferView | ArrayBuffer;
type COSEAlgorithmIdentifier = number;
type CSSKeywordish = string | CSSKeywordValue;
type CSSNumberish = number | CSSNumericValue;
type CSSPerspectiveValue = CSSNumericValue | CSSKeywordish;
type CSSUnparsedSegment = string | CSSVariableReferenceValue;
type CanvasImageSource =
  | HTMLOrSVGImageElement
  | HTMLVideoElement
  | HTMLCanvasElement
  | ImageBitmap
  | OffscreenCanvas
  | VideoFrame;
type ClipboardItemData = Promise<string | Blob>;
type ClipboardItems = readonly ClipboardItem[];
type ConstrainBoolean = boolean | ConstrainBooleanParameters;
type ConstrainDOMString =
  | string
  | readonly string[]
  | ConstrainDOMStringParameters;
type ConstrainDouble = number | ConstrainDoubleRange;
type ConstrainULong = number | ConstrainULongRange;
type DOMHighResTimeStamp = number;
type EpochTimeStamp = number;
type EventListenerOrEventListenerObject = EventListener | EventListenerObject;
type FileSystemWriteChunkType = BufferSource | Blob | string | WriteParams;
type Float32List = Float32Array | readonly GLfloat[];
type FormDataEntryValue = File | string;
type GLbitfield = number;
type GLboolean = boolean;
type GLclampf = number;
type GLenum = number;
type GLfloat = number;
type GLint = number;
type GLint64 = number;
type GLintptr = number;
type GLsizei = number;
type GLsizeiptr = number;
type GLuint = number;
type GLuint64 = number;
type HTMLOrSVGImageElement = HTMLImageElement | SVGImageElement;
type HTMLOrSVGScriptElement = HTMLScriptElement | SVGScriptElement;
type HashAlgorithmIdentifier = AlgorithmIdentifier;
type HeadersInit =
  | readonly (readonly [string, string])[]
  | Record<string, string>
  | Headers;
type IDBValidKey =
  | number
  | string
  | Date
  | BufferSource
  | readonly IDBValidKey[];
type ImageBitmapSource = CanvasImageSource | Blob | ImageData;
type Int32List = Int32Array | readonly GLint[];
type LineAndPositionSetting = number | AutoKeyword;
type MediaProvider = MediaStream | MediaSource | Blob;
type MessageEventSource = WindowProxy | MessagePort | ServiceWorker;
type MutationRecordType = 'attributes' | 'characterData' | 'childList';
type NamedCurve = string;
type OffscreenRenderingContext =
  | OffscreenCanvasRenderingContext2D
  | ImageBitmapRenderingContext
  | WebGLRenderingContext
  | WebGL2RenderingContext;
type OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull | null;
type OnErrorEventHandler = OnErrorEventHandlerNonNull | null;
type OptionalPostfixToken<T extends string> = ` ${T}` | '';
type OptionalPrefixToken<T extends string> = `${T} ` | '';
type PerformanceEntryList = readonly PerformanceEntry[];
type RTCRtpTransform = RTCRtpScriptTransform;
type ReadableStreamController<T> =
  | ReadableStreamDefaultController<T>
  | ReadableByteStreamController;
type ReadableStreamReadResult<T> =
  | ReadableStreamReadValueResult<T>
  | ReadableStreamReadDoneResult<T>;
type ReadableStreamReader<T> =
  | ReadableStreamDefaultReader<T>
  | ReadableStreamBYOBReader;
type RenderingContext =
  | CanvasRenderingContext2D
  | ImageBitmapRenderingContext
  | WebGLRenderingContext
  | WebGL2RenderingContext;
type ReportList = readonly Report[];
type RequestInfo = Request | string;
type TexImageSource =
  | ImageBitmap
  | ImageData
  | HTMLImageElement
  | HTMLCanvasElement
  | HTMLVideoElement
  | OffscreenCanvas
  | VideoFrame;
type TimerHandler = string | Function;
type Transferable =
  | OffscreenCanvas
  | ImageBitmap
  | MessagePort
  | ReadableStream
  | WritableStream
  | TransformStream
  | VideoFrame
  | ArrayBuffer;
type Uint32List = Uint32Array | readonly GLuint[];
type VibratePattern = number | readonly number[];
type WindowProxy = Window;
type XMLHttpRequestBodyInit =
  | Blob
  | BufferSource
  | FormData
  | URLSearchParams
  | string;
type AlignSetting = 'center' | 'end' | 'left' | 'right' | 'start';
type AlphaOption = 'discard' | 'keep';
type AnimationPlayState = 'finished' | 'idle' | 'paused' | 'running';
type AnimationReplaceState = 'active' | 'persisted' | 'removed';
type AppendMode = 'segments' | 'sequence';
type AttestationConveyancePreference =
  | 'direct'
  | 'enterprise'
  | 'indirect'
  | 'none';
type AudioContextLatencyCategory = 'balanced' | 'interactive' | 'playback';
type AudioContextState = 'closed' | 'running' | 'suspended';
type AuthenticatorAttachment = 'cross-platform' | 'platform';
type AuthenticatorTransport = 'ble' | 'hybrid' | 'internal' | 'nfc' | 'usb';
type AutoFillAddressKind = 'billing' | 'shipping';
type AutoFillBase = '' | 'off' | 'on';
type AutoFillContactField =
  | 'email'
  | 'tel'
  | 'tel-area-code'
  | 'tel-country-code'
  | 'tel-extension'
  | 'tel-local'
  | 'tel-local-prefix'
  | 'tel-local-suffix'
  | 'tel-national';
type AutoFillContactKind = 'home' | 'mobile' | 'work';
type AutoFillCredentialField = 'webauthn';
type AutoFillNormalField =
  | 'additional-name'
  | 'address-level1'
  | 'address-level2'
  | 'address-level3'
  | 'address-level4'
  | 'address-line1'
  | 'address-line2'
  | 'address-line3'
  | 'bday-day'
  | 'bday-month'
  | 'bday-year'
  | 'cc-csc'
  | 'cc-exp'
  | 'cc-exp-month'
  | 'cc-exp-year'
  | 'cc-family-name'
  | 'cc-given-name'
  | 'cc-name'
  | 'cc-number'
  | 'cc-type'
  | 'country'
  | 'country-name'
  | 'current-password'
  | 'family-name'
  | 'given-name'
  | 'honorific-prefix'
  | 'honorific-suffix'
  | 'name'
  | 'new-password'
  | 'one-time-code'
  | 'organization'
  | 'postal-code'
  | 'street-address'
  | 'transaction-amount'
  | 'transaction-currency'
  | 'username';
type AutoKeyword = 'auto';
type AutomationRate = 'a-rate' | 'k-rate';
type AvcBitstreamFormat = 'annexb' | 'avc';
type BinaryType = 'arraybuffer' | 'blob';
type BiquadFilterType =
  | 'allpass'
  | 'bandpass'
  | 'highpass'
  | 'highshelf'
  | 'lowpass'
  | 'lowshelf'
  | 'notch'
  | 'peaking';
type CSSMathOperator =
  | 'clamp'
  | 'invert'
  | 'max'
  | 'min'
  | 'negate'
  | 'product'
  | 'sum';
type CSSNumericBaseType =
  | 'angle'
  | 'flex'
  | 'frequency'
  | 'length'
  | 'percent'
  | 'resolution'
  | 'time';
type CanPlayTypeResult = '' | 'maybe' | 'probably';
type CanvasDirection = 'inherit' | 'ltr' | 'rtl';
type CanvasFillRule = 'evenodd' | 'nonzero';
type CanvasFontKerning = 'auto' | 'none' | 'normal';
type CanvasFontStretch =
  | 'condensed'
  | 'expanded'
  | 'extra-condensed'
  | 'extra-expanded'
  | 'normal'
  | 'semi-condensed'
  | 'semi-expanded'
  | 'ultra-condensed'
  | 'ultra-expanded';
type CanvasFontVariantCaps =
  | 'all-petite-caps'
  | 'all-small-caps'
  | 'normal'
  | 'petite-caps'
  | 'small-caps'
  | 'titling-caps'
  | 'unicase';
type CanvasLineCap = 'butt' | 'round' | 'square';
type CanvasLineJoin = 'bevel' | 'miter' | 'round';
type CanvasTextAlign = 'center' | 'end' | 'left' | 'right' | 'start';
type CanvasTextBaseline =
  | 'alphabetic'
  | 'bottom'
  | 'hanging'
  | 'ideographic'
  | 'middle'
  | 'top';
type CanvasTextRendering =
  | 'auto'
  | 'geometricPrecision'
  | 'optimizeLegibility'
  | 'optimizeSpeed';
type ChannelCountMode = 'clamped-max' | 'explicit' | 'max';
type ChannelInterpretation = 'discrete' | 'speakers';
type ClientTypes = 'all' | 'sharedworker' | 'window' | 'worker';
type CodecState = 'closed' | 'configured' | 'unconfigured';
type ColorGamut = 'p3' | 'rec2020' | 'srgb';
type ColorSpaceConversion = 'default' | 'none';
type CompositeOperation = 'accumulate' | 'add' | 'replace';
type CompositeOperationOrAuto = 'accumulate' | 'add' | 'auto' | 'replace';
type CompressionFormat = 'deflate' | 'deflate-raw' | 'gzip';
type CredentialMediationRequirement =
  | 'conditional'
  | 'optional'
  | 'required'
  | 'silent';
type DOMParserSupportedType =
  | 'application/xhtml+xml'
  | 'application/xml'
  | 'image/svg+xml'
  | 'text/html'
  | 'text/xml';
type DirectionSetting = '' | 'lr' | 'rl';
type DisplayCaptureSurfaceType = 'browser' | 'monitor' | 'window';
type DistanceModelType = 'exponential' | 'inverse' | 'linear';
type DocumentReadyState = 'complete' | 'interactive' | 'loading';
type DocumentVisibilityState = 'hidden' | 'visible';
type EncodedVideoChunkType = 'delta' | 'key';
type EndOfStreamError = 'decode' | 'network';
type EndingType = 'native' | 'transparent';
type FileSystemHandleKind = 'directory' | 'file';
type FillMode = 'auto' | 'backwards' | 'both' | 'forwards' | 'none';
type FontDisplay = 'auto' | 'block' | 'fallback' | 'optional' | 'swap';
type FontFaceLoadStatus = 'error' | 'loaded' | 'loading' | 'unloaded';
type FontFaceSetLoadStatus = 'loaded' | 'loading';
type FullscreenNavigationUI = 'auto' | 'hide' | 'show';
type GamepadHapticActuatorType = 'vibration';
type GamepadHapticEffectType = 'dual-rumble';
type GamepadHapticsResult = 'complete' | 'preempted';
type GamepadMappingType = '' | 'standard' | 'xr-standard';
type GlobalCompositeOperation =
  | 'color'
  | 'color-burn'
  | 'color-dodge'
  | 'copy'
  | 'darken'
  | 'destination-atop'
  | 'destination-in'
  | 'destination-out'
  | 'destination-over'
  | 'difference'
  | 'exclusion'
  | 'hard-light'
  | 'hue'
  | 'lighten'
  | 'lighter'
  | 'luminosity'
  | 'multiply'
  | 'overlay'
  | 'saturation'
  | 'screen'
  | 'soft-light'
  | 'source-atop'
  | 'source-in'
  | 'source-out'
  | 'source-over'
  | 'xor';
type HardwareAcceleration =
  | 'no-preference'
  | 'prefer-hardware'
  | 'prefer-software';
type HdrMetadataType = 'smpteSt2086' | 'smpteSt2094-10' | 'smpteSt2094-40';
type HighlightType = 'grammar-error' | 'highlight' | 'spelling-error';
type IDBCursorDirection = 'next' | 'nextunique' | 'prev' | 'prevunique';
type IDBRequestReadyState = 'done' | 'pending';
type IDBTransactionDurability = 'default' | 'relaxed' | 'strict';
type IDBTransactionMode = 'readonly' | 'readwrite' | 'versionchange';
type ImageOrientation = 'flipY' | 'from-image' | 'none';
type ImageSmoothingQuality = 'high' | 'low' | 'medium';
type InsertPosition = 'afterbegin' | 'afterend' | 'beforebegin' | 'beforeend';
type IterationCompositeOperation = 'accumulate' | 'replace';
type KeyFormat = 'jwk' | 'pkcs8' | 'raw' | 'spki';
type KeyType = 'private' | 'public' | 'secret';
type KeyUsage =
  | 'decrypt'
  | 'deriveBits'
  | 'deriveKey'
  | 'encrypt'
  | 'sign'
  | 'unwrapKey'
  | 'verify'
  | 'wrapKey';
type LatencyMode = 'quality' | 'realtime';
type LineAlignSetting = 'center' | 'end' | 'start';
type LockMode = 'exclusive' | 'shared';
type MIDIPortConnectionState = 'closed' | 'open' | 'pending';
type MIDIPortDeviceState = 'connected' | 'disconnected';
type MIDIPortType = 'input' | 'output';
type MediaDecodingType = 'file' | 'media-source' | 'webrtc';
type MediaDeviceKind = 'audioinput' | 'audiooutput' | 'videoinput';
type MediaEncodingType = 'record' | 'webrtc';
type MediaKeyMessageType =
  | 'individualization-request'
  | 'license-release'
  | 'license-renewal'
  | 'license-request';
type MediaKeySessionClosedReason =
  | 'closed-by-application'
  | 'hardware-context-reset'
  | 'internal-error'
  | 'release-acknowledged'
  | 'resource-evicted';
type MediaKeySessionType = 'persistent-license' | 'temporary';
type MediaKeyStatus =
  | 'expired'
  | 'internal-error'
  | 'output-downscaled'
  | 'output-restricted'
  | 'released'
  | 'status-pending'
  | 'usable'
  | 'usable-in-future';
type MediaKeysRequirement = 'not-allowed' | 'optional' | 'required';
type MediaSessionAction =
  | 'nexttrack'
  | 'pause'
  | 'play'
  | 'previoustrack'
  | 'seekbackward'
  | 'seekforward'
  | 'seekto'
  | 'skipad'
  | 'stop';
type MediaSessionPlaybackState = 'none' | 'paused' | 'playing';
type MediaStreamTrackState = 'ended' | 'live';
type NavigationTimingType =
  | 'back_forward'
  | 'navigate'
  | 'prerender'
  | 'reload';
type NotificationDirection = 'auto' | 'ltr' | 'rtl';
type NotificationPermission = 'default' | 'denied' | 'granted';
type OffscreenRenderingContextId =
  | '2d'
  | 'bitmaprenderer'
  | 'webgl'
  | 'webgl2'
  | 'webgpu';
type OrientationType =
  | 'landscape-primary'
  | 'landscape-secondary'
  | 'portrait-primary'
  | 'portrait-secondary';
type OscillatorType = 'custom' | 'sawtooth' | 'sine' | 'square' | 'triangle';
type OverSampleType = '2x' | '4x' | 'none';
type PanningModelType = 'HRTF' | 'equalpower';
type PaymentComplete = 'fail' | 'success' | 'unknown';
type PermissionName =
  | 'geolocation'
  | 'notifications'
  | 'persistent-storage'
  | 'push'
  | 'screen-wake-lock'
  | 'xr-spatial-tracking';
type PermissionState = 'denied' | 'granted' | 'prompt';
type PlaybackDirection =
  | 'alternate'
  | 'alternate-reverse'
  | 'normal'
  | 'reverse';
type PositionAlignSetting = 'auto' | 'center' | 'line-left' | 'line-right';
type PredefinedColorSpace = 'display-p3' | 'srgb';
type PremultiplyAlpha = 'default' | 'none' | 'premultiply';
type PresentationStyle = 'attachment' | 'inline' | 'unspecified';
type PublicKeyCredentialType = 'public-key';
type PushEncryptionKeyName = 'auth' | 'p256dh';
type RTCBundlePolicy = 'balanced' | 'max-bundle' | 'max-compat';
type RTCDataChannelState = 'closed' | 'closing' | 'connecting' | 'open';
type RTCDegradationPreference =
  | 'balanced'
  | 'maintain-framerate'
  | 'maintain-resolution';
type RTCDtlsTransportState =
  | 'closed'
  | 'connected'
  | 'connecting'
  | 'failed'
  | 'new';
type RTCEncodedVideoFrameType = 'delta' | 'empty' | 'key';
type RTCErrorDetailType =
  | 'data-channel-failure'
  | 'dtls-failure'
  | 'fingerprint-failure'
  | 'hardware-encoder-error'
  | 'hardware-encoder-not-available'
  | 'sctp-failure'
  | 'sdp-syntax-error';
type RTCIceCandidateType = 'host' | 'prflx' | 'relay' | 'srflx';
type RTCIceComponent = 'rtcp' | 'rtp';
type RTCIceConnectionState =
  | 'checking'
  | 'closed'
  | 'completed'
  | 'connected'
  | 'disconnected'
  | 'failed'
  | 'new';
type RTCIceGathererState = 'complete' | 'gathering' | 'new';
type RTCIceGatheringState = 'complete' | 'gathering' | 'new';
type RTCIceProtocol = 'tcp' | 'udp';
type RTCIceTcpCandidateType = 'active' | 'passive' | 'so';
type RTCIceTransportPolicy = 'all' | 'relay';
type RTCIceTransportState =
  | 'checking'
  | 'closed'
  | 'completed'
  | 'connected'
  | 'disconnected'
  | 'failed'
  | 'new';
type RTCPeerConnectionState =
  | 'closed'
  | 'connected'
  | 'connecting'
  | 'disconnected'
  | 'failed'
  | 'new';
type RTCPriorityType = 'high' | 'low' | 'medium' | 'very-low';
type RTCRtcpMuxPolicy = 'require';
type RTCRtpTransceiverDirection =
  | 'inactive'
  | 'recvonly'
  | 'sendonly'
  | 'sendrecv'
  | 'stopped';
type RTCSctpTransportState = 'closed' | 'connected' | 'connecting';
type RTCSdpType = 'answer' | 'offer' | 'pranswer' | 'rollback';
type RTCSignalingState =
  | 'closed'
  | 'have-local-offer'
  | 'have-local-pranswer'
  | 'have-remote-offer'
  | 'have-remote-pranswer'
  | 'stable';
type RTCStatsIceCandidatePairState =
  | 'failed'
  | 'frozen'
  | 'in-progress'
  | 'inprogress'
  | 'succeeded'
  | 'waiting';
type RTCStatsType =
  | 'candidate-pair'
  | 'certificate'
  | 'codec'
  | 'data-channel'
  | 'inbound-rtp'
  | 'local-candidate'
  | 'media-playout'
  | 'media-source'
  | 'outbound-rtp'
  | 'peer-connection'
  | 'remote-candidate'
  | 'remote-inbound-rtp'
  | 'remote-outbound-rtp'
  | 'transport';
type ReadableStreamReaderMode = 'byob';
type ReadableStreamType = 'bytes';
type ReadyState = 'closed' | 'ended' | 'open';
type RecordingState = 'inactive' | 'paused' | 'recording';
type ReferrerPolicy =
  | ''
  | 'no-referrer'
  | 'no-referrer-when-downgrade'
  | 'origin'
  | 'origin-when-cross-origin'
  | 'same-origin'
  | 'strict-origin'
  | 'strict-origin-when-cross-origin'
  | 'unsafe-url';
type RemotePlaybackState = 'connected' | 'connecting' | 'disconnected';
type RequestCache =
  | 'default'
  | 'force-cache'
  | 'no-cache'
  | 'no-store'
  | 'only-if-cached'
  | 'reload';
type RequestCredentials = 'include' | 'omit' | 'same-origin';
type RequestDestination =
  | ''
  | 'audio'
  | 'audioworklet'
  | 'document'
  | 'embed'
  | 'font'
  | 'frame'
  | 'iframe'
  | 'image'
  | 'manifest'
  | 'object'
  | 'paintworklet'
  | 'report'
  | 'script'
  | 'sharedworker'
  | 'style'
  | 'track'
  | 'video'
  | 'worker'
  | 'xslt';
type RequestMode = 'cors' | 'navigate' | 'no-cors' | 'same-origin';
type RequestPriority = 'auto' | 'high' | 'low';
type RequestRedirect = 'error' | 'follow' | 'manual';
type ResidentKeyRequirement = 'discouraged' | 'preferred' | 'required';
type ResizeObserverBoxOptions =
  | 'border-box'
  | 'content-box'
  | 'device-pixel-content-box';
type ResizeQuality = 'high' | 'low' | 'medium' | 'pixelated';
type ResponseType =
  | 'basic'
  | 'cors'
  | 'default'
  | 'error'
  | 'opaque'
  | 'opaqueredirect';
type ScrollBehavior = 'auto' | 'instant' | 'smooth';
type ScrollLogicalPosition = 'center' | 'end' | 'nearest' | 'start';
type ScrollRestoration = 'auto' | 'manual';
type ScrollSetting = '' | 'up';
type SecurityPolicyViolationEventDisposition = 'enforce' | 'report';
type SelectionMode = 'end' | 'preserve' | 'select' | 'start';
type ServiceWorkerState =
  | 'activated'
  | 'activating'
  | 'installed'
  | 'installing'
  | 'parsed'
  | 'redundant';
type ServiceWorkerUpdateViaCache = 'all' | 'imports' | 'none';
type ShadowRootMode = 'closed' | 'open';
type SlotAssignmentMode = 'manual' | 'named';
type SpeechSynthesisErrorCode =
  | 'audio-busy'
  | 'audio-hardware'
  | 'canceled'
  | 'interrupted'
  | 'invalid-argument'
  | 'language-unavailable'
  | 'network'
  | 'not-allowed'
  | 'synthesis-failed'
  | 'synthesis-unavailable'
  | 'text-too-long'
  | 'voice-unavailable';
type TextTrackKind =
  | 'captions'
  | 'chapters'
  | 'descriptions'
  | 'metadata'
  | 'subtitles';
type TextTrackMode = 'disabled' | 'hidden' | 'showing';
type TouchType = 'direct' | 'stylus';
type TransferFunction = 'hlg' | 'pq' | 'srgb';
type UserVerificationRequirement = 'discouraged' | 'preferred' | 'required';
type VideoColorPrimaries = 'bt470bg' | 'bt709' | 'smpte170m';
type VideoEncoderBitrateMode = 'constant' | 'quantizer' | 'variable';
type VideoFacingModeEnum = 'environment' | 'left' | 'right' | 'user';
type VideoMatrixCoefficients = 'bt470bg' | 'bt709' | 'rgb' | 'smpte170m';
type VideoPixelFormat =
  | 'BGRA'
  | 'BGRX'
  | 'I420'
  | 'I420A'
  | 'I422'
  | 'I444'
  | 'NV12'
  | 'RGBA'
  | 'RGBX';
type VideoTransferCharacteristics = 'bt709' | 'iec61966-2-1' | 'smpte170m';
type WakeLockType = 'screen';
type WebGLPowerPreference = 'default' | 'high-performance' | 'low-power';
type WebTransportCongestionControl = 'default' | 'low-latency' | 'throughput';
type WebTransportErrorSource = 'session' | 'stream';
type WorkerType = 'classic' | 'module';
type WriteCommandType = 'seek' | 'truncate' | 'write';
type XMLHttpRequestResponseType =
  | ''
  | 'arraybuffer'
  | 'blob'
  | 'document'
  | 'json'
  | 'text';
