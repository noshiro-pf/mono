@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2020.intl" />
+/// <reference path="./lib.es2020.intl.d.ts" />
 
 interface BigIntToLocaleStringOptions {
   /**
@@ -23,11 +9,11 @@ interface BigIntToLocaleStringOptions {
    * information about this option, see the
    * {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.
    */
-  localeMatcher?: string;
+  readonly localeMatcher?: string;
   /** The formatting style to use , the default is "decimal". */
-  style?: string;
+  readonly style?: string;
 
-  numberingSystem?: string;
+  readonly numberingSystem?: string;
   /**
    * The unit to use in unit formatting, Possible values are core unit
    * identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from
@@ -35,13 +21,13 @@ interface BigIntToLocaleStringOptions {
    * be concatenated with "-per-" to make a compound unit. There is no default
    * value; if the style is "unit", the unit property must be provided.
    */
-  unit?: string;
+  readonly unit?: string;
 
   /**
    * The unit formatting style to use in unit formatting, the defaults is
    * "short".
    */
-  unitDisplay?: string;
+  readonly unitDisplay?: string;
 
   /**
    * The currency to use in currency formatting. Possible values are the ISO
@@ -51,7 +37,7 @@ interface BigIntToLocaleStringOptions {
    * property must be provided. It is only used when [[Style]] has the value
    * "currency".
    */
-  currency?: string;
+  readonly currency?: string;
 
   /**
    * How to display the currency in currency formatting. It is only used when
@@ -63,40 +49,19 @@ interface BigIntToLocaleStringOptions {
    *
    * "name" to use a localized currency name such as "dollar"
    */
-  currencyDisplay?: string;
+  readonly currencyDisplay?: string;
 
   /**
    * Whether to use grouping separators, such as thousands separators or
    * thousand/lakh/crore separators. The default is true.
    */
-  useGrouping?: boolean;
+  readonly useGrouping?: boolean;
 
   /**
    * The minimum number of integer digits to use. Possible values are from 1 to
    * 21; the default is 1.
    */
-  minimumIntegerDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumIntegerDigits?: UintRange<1, 22>;
 
   /**
    * The minimum number of fraction digits to use. Possible values are from 0 to
@@ -105,28 +70,7 @@ interface BigIntToLocaleStringOptions {
    * {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list}
    * (2 if the list doesn't provide that information).
    */
-  minimumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly minimumFractionDigits?: UintRange<0, 21>;
 
   /**
    * The maximum number of fraction digits to use. Possible values are from 0 to
@@ -138,82 +82,19 @@ interface BigIntToLocaleStringOptions {
    * (2 if the list doesn't provide that information); the default for percent
    * formatting is the larger of minimumFractionDigits and 0.
    */
-  maximumFractionDigits?:
-    | 0
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20;
+  readonly maximumFractionDigits?: UintRange<0, 21>;
 
   /**
    * The minimum number of significant digits to use. Possible values are from 1
    * to 21; the default is 1.
    */
-  minimumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly minimumSignificantDigits?: UintRange<1, 22>;
 
   /**
    * The maximum number of significant digits to use. Possible values are from 1
    * to 21; the default is 21.
    */
-  maximumSignificantDigits?:
-    | 1
-    | 2
-    | 3
-    | 4
-    | 5
-    | 6
-    | 7
-    | 8
-    | 9
-    | 10
-    | 11
-    | 12
-    | 13
-    | 14
-    | 15
-    | 16
-    | 17
-    | 18
-    | 19
-    | 20
-    | 21;
+  readonly maximumSignificantDigits?: UintRange<1, 22>;
 
   /**
    * The formatting that should be displayed for the number, the defaults is
@@ -227,10 +108,10 @@ interface BigIntToLocaleStringOptions {
    *
    *     "compact" string representing exponent, defaults is using the "short" form
    */
-  notation?: string;
+  readonly notation?: string;
 
   /** Used only when notation is "compact" */
-  compactDisplay?: string;
+  readonly compactDisplay?: string;
 }
 
 interface BigInt {
@@ -239,7 +120,7 @@ interface BigInt {
    *
    * @param radix Specifies a radix for converting numeric values to strings.
    */
-  toString(radix?: number): string;
+  toString(radix?: UintRange<2, 37>): string;
 
   /**
    * Returns a string representation appropriate to the host environment's
@@ -267,7 +148,7 @@ interface BigIntConstructor {
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asIntN(bits: number, int: bigint): bigint;
+  asIntN(bits: UintRange<0, 65>, int: bigint): bigint;
   /**
    * Interprets the low bits of a BigInt as an unsigned integer. All higher bits
    * are discarded.
@@ -275,10 +156,10 @@ interface BigIntConstructor {
    * @param bits The number of low bits to use
    * @param int The BigInt whose bits to extract
    */
-  asUintN(bits: number, int: bigint): bigint;
+  asUintN(bits: UintRange<0, 65>, int: bigint): bigint;
 }
 
-declare var BigInt: BigIntConstructor;
+declare const BigInt: BigIntConstructor;
 
 /**
  * A typed array of 64-bit signed integer values. The contents are initialized
@@ -289,16 +170,16 @@ interface BigInt64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
 
   /** The length in bytes of the array. */
-  readonly byteLength: number;
+  readonly byteLength: NumberType.TypedArraySize;
 
   /** The offset in bytes of the array. */
-  readonly byteOffset: number;
+  readonly byteOffset: NumberType.TypedArraySize;
 
   /**
    * Returns the this object after copying a section of the array identified by
@@ -311,10 +192,14 @@ interface BigInt64Array<
    * @param end If not specified, length of the this object is used as its
    *   default value.
    */
-  copyWithin(target: number, start: number, end?: number): this;
+  copyWithin(
+    target: NumberType.TypedArraySizeArg,
+    start: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [NumberType.TypedArraySize, BigInt64]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -328,11 +213,11 @@ interface BigInt64Array<
    */
   every(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -345,7 +230,11 @@ interface BigInt64Array<
    * @param end Index to stop filling the array at. If end is negative, it is
    *   treated as length+end.
    */
-  fill(value: bigint, start?: number, end?: number): this;
+  fill(
+    value: BigInt64,
+    start?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): this;
 
   /**
    * Returns the elements of an array that meet the condition specified in a
@@ -360,11 +249,11 @@ interface BigInt64Array<
    */
   filter(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -381,12 +270,12 @@ interface BigInt64Array<
    */
   find(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
-  ): bigint | undefined;
+    thisArg?: unknown,
+  ): BigInt64 | undefined;
 
   /**
    * Returns the index of the first element in the array where predicate is
@@ -402,12 +291,12 @@ interface BigInt64Array<
    */
   findIndex(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
-  ): number;
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
    * Performs the specified action for each element in an array.
@@ -420,11 +309,11 @@ interface BigInt64Array<
    */
   forEach(
     callbackfn: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -435,7 +324,10 @@ interface BigInt64Array<
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: bigint, fromIndex?: number): boolean;
+  includes(
+    searchElement: BigInt64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 
   /**
    * Returns the index of the first occurrence of a value in an array.
@@ -444,7 +336,10 @@ interface BigInt64Array<
    * @param fromIndex The array index at which to begin the search. If fromIndex
    *   is omitted, the search starts at index 0.
    */
-  indexOf(searchElement: bigint, fromIndex?: number): number;
+  indexOf(
+    searchElement: BigInt64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): NumberType.TypedArraySearchResult;
 
   /**
    * Adds all the elements of an array separated by the specified separator
@@ -457,7 +352,7 @@ interface BigInt64Array<
   join(separator?: string): string;
 
   /** Yields each index in the array. */
-  keys(): ArrayIterator<number>;
+  keys(): ArrayIterator<NumberType.TypedArraySize>;
 
   /**
    * Returns the index of the last occurrence of a value in an array.
@@ -466,7 +361,10 @@ interface BigInt64Array<
    * @param fromIndex The array index at which to begin the search. If fromIndex
    *   is omitted, the search starts at index 0.
    */
-  lastIndexOf(searchElement: bigint, fromIndex?: number): number;
+  lastIndexOf(
+    searchElement: BigInt64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): NumberType.TypedArraySearchResult;
 
   /** The length of the array. */
   readonly length: number;
@@ -484,11 +382,11 @@ interface BigInt64Array<
    */
   map(
     callbackfn: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
-    ) => bigint,
-    thisArg?: any,
+    ) => BigInt64,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 
   /**
@@ -505,12 +403,12 @@ interface BigInt64Array<
    */
   reduce(
     callbackfn: (
-      previousValue: bigint,
-      currentValue: bigint,
-      currentIndex: number,
+      previousValue: BigInt64,
+      currentValue: BigInt64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
-    ) => bigint,
-  ): bigint;
+    ) => BigInt64,
+  ): BigInt64;
 
   /**
    * Calls the specified callback function for all the elements in an array. The
@@ -527,8 +425,8 @@ interface BigInt64Array<
   reduce<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: bigint,
-      currentIndex: number,
+      currentValue: BigInt64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => U,
     initialValue: U,
@@ -549,12 +447,12 @@ interface BigInt64Array<
    */
   reduceRight(
     callbackfn: (
-      previousValue: bigint,
-      currentValue: bigint,
-      currentIndex: number,
+      previousValue: BigInt64,
+      currentValue: BigInt64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
-    ) => bigint,
-  ): bigint;
+    ) => BigInt64,
+  ): BigInt64;
 
   /**
    * Calls the specified callback function for all the elements in an array, in
@@ -572,8 +470,8 @@ interface BigInt64Array<
   reduceRight<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: bigint,
-      currentIndex: number,
+      currentValue: BigInt64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => U,
     initialValue: U,
@@ -589,7 +487,10 @@ interface BigInt64Array<
    * @param offset The index in the current array at which the values are to be
    *   written.
    */
-  set(array: ArrayLike<bigint>, offset?: number): void;
+  set(
+    array: ArrayLike<BigInt64>,
+    offset?: NumberType.TypedArraySizeArgNonNegative,
+  ): void;
 
   /**
    * Returns a section of an array.
@@ -597,7 +498,10 @@ interface BigInt64Array<
    * @param start The beginning of the specified portion of the array.
    * @param end The end of the specified portion of the array.
    */
-  slice(start?: number, end?: number): BigInt64Array<ArrayBuffer>;
+  slice(
+    start?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): BigInt64Array<ArrayBuffer>;
 
   /**
    * Determines whether the specified callback function returns true for any
@@ -612,11 +516,11 @@ interface BigInt64Array<
    */
   some(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigInt64,
+      index: NumberType.TypedArraySize,
       array: BigInt64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -625,7 +529,7 @@ interface BigInt64Array<
    * @param compareFn The function used to determine the order of the elements.
    *   If omitted, the elements are sorted in ascending order.
    */
-  sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;
+  sort(compareFn?: (a: BigInt64, b: BigInt64) => number | bigint): this;
 
   /**
    * Gets a new BigInt64Array view of the ArrayBuffer store for this array,
@@ -634,11 +538,14 @@ interface BigInt64Array<
    * @param begin The index of the beginning of the array.
    * @param end The index of the end of the array.
    */
-  subarray(begin?: number, end?: number): BigInt64Array<TArrayBuffer>;
+  subarray(
+    begin?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): BigInt64Array<TArrayBuffer>;
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -649,34 +556,36 @@ interface BigInt64Array<
   valueOf(): BigInt64Array<TArrayBuffer>;
 
   /** Yields each value in the array. */
-  values(): ArrayIterator<bigint>;
+  values(): ArrayIterator<BigInt64>;
 
-  [Symbol.iterator](): ArrayIterator<bigint>;
+  [Symbol.iterator](): ArrayIterator<BigInt64>;
 
   readonly [Symbol.toStringTag]: 'BigInt64Array';
 
-  [index: number]: bigint;
+  [index: number]: BigInt64;
 }
 interface BigInt64ArrayConstructor {
   readonly prototype: BigInt64Array<ArrayBufferLike>;
-  new (length?: number): BigInt64Array<ArrayBuffer>;
-  new (array: ArrayLike<bigint> | Iterable<bigint>): BigInt64Array<ArrayBuffer>;
+  new (length?: NumberType.TypedArraySize): BigInt64Array<ArrayBuffer>;
+  new (
+    array: ArrayLike<BigInt64> | Iterable<BigInt64>,
+  ): BigInt64Array<ArrayBuffer>;
   new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(
     buffer: TArrayBuffer,
-    byteOffset?: number,
-    length?: number,
+    byteOffset?: NumberType.TypedArraySizeArgNonNegative,
+    length?: NumberType.TypedArraySize,
   ): BigInt64Array<TArrayBuffer>;
-  new (array: ArrayLike<bigint> | ArrayBuffer): BigInt64Array<ArrayBuffer>;
+  new (array: ArrayLike<BigInt64> | ArrayBuffer): BigInt64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigInt64Array<ArrayBuffer>;
+  of(...items: readonly BigInt64[]): BigInt64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -685,7 +594,7 @@ interface BigInt64ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: ArrayLike<bigint>): BigInt64Array<ArrayBuffer>;
+  from(arrayLike: ArrayLike<BigInt64>): BigInt64Array<ArrayBuffer>;
   /**
    * Creates an array from an array-like or iterable object.
    *
@@ -695,11 +604,11 @@ interface BigInt64ArrayConstructor {
    */
   from<U>(
     arrayLike: ArrayLike<U>,
-    mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    mapfn: (v: U, k: NumberType.TypedArraySize) => BigInt64,
+    thisArg?: unknown,
   ): BigInt64Array<ArrayBuffer>;
 }
-declare var BigInt64Array: BigInt64ArrayConstructor;
+declare const BigInt64Array: BigInt64ArrayConstructor;
 
 /**
  * A typed array of 64-bit unsigned integer values. The contents are initialized
@@ -710,16 +619,16 @@ interface BigUint64Array<
   TArrayBuffer extends ArrayBufferLike = ArrayBufferLike,
 > {
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /** The ArrayBuffer instance referenced by the array. */
   readonly buffer: TArrayBuffer;
 
   /** The length in bytes of the array. */
-  readonly byteLength: number;
+  readonly byteLength: NumberType.TypedArraySize;
 
   /** The offset in bytes of the array. */
-  readonly byteOffset: number;
+  readonly byteOffset: NumberType.TypedArraySize;
 
   /**
    * Returns the this object after copying a section of the array identified by
@@ -732,10 +641,14 @@ interface BigUint64Array<
    * @param end If not specified, length of the this object is used as its
    *   default value.
    */
-  copyWithin(target: number, start: number, end?: number): this;
+  copyWithin(
+    target: NumberType.TypedArraySizeArg,
+    start: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): this;
 
   /** Yields index, value pairs for every entry in the array. */
-  entries(): ArrayIterator<[number, bigint]>;
+  entries(): ArrayIterator<readonly [NumberType.TypedArraySize, BigUint64]>;
 
   /**
    * Determines whether all the members of an array satisfy the specified test.
@@ -749,11 +662,11 @@ interface BigUint64Array<
    */
   every(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -766,7 +679,11 @@ interface BigUint64Array<
    * @param end Index to stop filling the array at. If end is negative, it is
    *   treated as length+end.
    */
-  fill(value: bigint, start?: number, end?: number): this;
+  fill(
+    value: BigUint64,
+    start?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): this;
 
   /**
    * Returns the elements of an array that meet the condition specified in a
@@ -781,11 +698,11 @@ interface BigUint64Array<
    */
   filter(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
-    ) => any,
-    thisArg?: any,
+    ) => boolean,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -802,12 +719,12 @@ interface BigUint64Array<
    */
   find(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
-  ): bigint | undefined;
+    thisArg?: unknown,
+  ): BigUint64 | undefined;
 
   /**
    * Returns the index of the first element in the array where predicate is
@@ -823,12 +740,12 @@ interface BigUint64Array<
    */
   findIndex(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
-  ): number;
+    thisArg?: unknown,
+  ): NumberType.TypedArraySearchResult;
 
   /**
    * Performs the specified action for each element in an array.
@@ -841,11 +758,11 @@ interface BigUint64Array<
    */
   forEach(
     callbackfn: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => void,
-    thisArg?: any,
+    thisArg?: unknown,
   ): void;
 
   /**
@@ -856,7 +773,10 @@ interface BigUint64Array<
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: bigint, fromIndex?: number): boolean;
+  includes(
+    searchElement: BigUint64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 
   /**
    * Returns the index of the first occurrence of a value in an array.
@@ -865,7 +785,10 @@ interface BigUint64Array<
    * @param fromIndex The array index at which to begin the search. If fromIndex
    *   is omitted, the search starts at index 0.
    */
-  indexOf(searchElement: bigint, fromIndex?: number): number;
+  indexOf(
+    searchElement: BigUint64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): NumberType.TypedArraySearchResult;
 
   /**
    * Adds all the elements of an array separated by the specified separator
@@ -878,7 +801,7 @@ interface BigUint64Array<
   join(separator?: string): string;
 
   /** Yields each index in the array. */
-  keys(): ArrayIterator<number>;
+  keys(): ArrayIterator<NumberType.TypedArraySize>;
 
   /**
    * Returns the index of the last occurrence of a value in an array.
@@ -887,7 +810,10 @@ interface BigUint64Array<
    * @param fromIndex The array index at which to begin the search. If fromIndex
    *   is omitted, the search starts at index 0.
    */
-  lastIndexOf(searchElement: bigint, fromIndex?: number): number;
+  lastIndexOf(
+    searchElement: BigUint64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): NumberType.TypedArraySearchResult;
 
   /** The length of the array. */
   readonly length: number;
@@ -905,11 +831,11 @@ interface BigUint64Array<
    */
   map(
     callbackfn: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
-    ) => bigint,
-    thisArg?: any,
+    ) => BigUint64,
+    thisArg?: unknown,
   ): BigUint64Array<ArrayBuffer>;
 
   /**
@@ -926,12 +852,12 @@ interface BigUint64Array<
    */
   reduce(
     callbackfn: (
-      previousValue: bigint,
-      currentValue: bigint,
-      currentIndex: number,
+      previousValue: BigUint64,
+      currentValue: BigUint64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
-    ) => bigint,
-  ): bigint;
+    ) => BigUint64,
+  ): BigUint64;
 
   /**
    * Calls the specified callback function for all the elements in an array. The
@@ -948,8 +874,8 @@ interface BigUint64Array<
   reduce<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: bigint,
-      currentIndex: number,
+      currentValue: BigUint64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => U,
     initialValue: U,
@@ -970,12 +896,12 @@ interface BigUint64Array<
    */
   reduceRight(
     callbackfn: (
-      previousValue: bigint,
-      currentValue: bigint,
-      currentIndex: number,
+      previousValue: BigUint64,
+      currentValue: BigUint64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
-    ) => bigint,
-  ): bigint;
+    ) => BigUint64,
+  ): BigUint64;
 
   /**
    * Calls the specified callback function for all the elements in an array, in
@@ -993,8 +919,8 @@ interface BigUint64Array<
   reduceRight<U>(
     callbackfn: (
       previousValue: U,
-      currentValue: bigint,
-      currentIndex: number,
+      currentValue: BigUint64,
+      currentIndex: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => U,
     initialValue: U,
@@ -1010,7 +936,10 @@ interface BigUint64Array<
    * @param offset The index in the current array at which the values are to be
    *   written.
    */
-  set(array: ArrayLike<bigint>, offset?: number): void;
+  set(
+    array: ArrayLike<BigUint64>,
+    offset?: NumberType.TypedArraySizeArgNonNegative,
+  ): void;
 
   /**
    * Returns a section of an array.
@@ -1018,7 +947,10 @@ interface BigUint64Array<
    * @param start The beginning of the specified portion of the array.
    * @param end The end of the specified portion of the array.
    */
-  slice(start?: number, end?: number): BigUint64Array<ArrayBuffer>;
+  slice(
+    start?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): BigUint64Array<ArrayBuffer>;
 
   /**
    * Determines whether the specified callback function returns true for any
@@ -1033,11 +965,11 @@ interface BigUint64Array<
    */
   some(
     predicate: (
-      value: bigint,
-      index: number,
+      value: BigUint64,
+      index: NumberType.TypedArraySize,
       array: BigUint64Array<TArrayBuffer>,
     ) => boolean,
-    thisArg?: any,
+    thisArg?: unknown,
   ): boolean;
 
   /**
@@ -1046,7 +978,7 @@ interface BigUint64Array<
    * @param compareFn The function used to determine the order of the elements.
    *   If omitted, the elements are sorted in ascending order.
    */
-  sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;
+  sort(compareFn?: (a: BigUint64, b: BigUint64) => number | bigint): this;
 
   /**
    * Gets a new BigUint64Array view of the ArrayBuffer store for this array,
@@ -1055,11 +987,14 @@ interface BigUint64Array<
    * @param begin The index of the beginning of the array.
    * @param end The index of the end of the array.
    */
-  subarray(begin?: number, end?: number): BigUint64Array<TArrayBuffer>;
+  subarray(
+    begin?: NumberType.TypedArraySizeArg,
+    end?: NumberType.TypedArraySizeArg,
+  ): BigUint64Array<TArrayBuffer>;
 
   /** Converts the array to a string by using the current locale. */
   toLocaleString(
-    locales?: string | string[],
+    locales?: string | readonly string[],
     options?: Intl.NumberFormatOptions,
   ): string;
 
@@ -1070,36 +1005,36 @@ interface BigUint64Array<
   valueOf(): BigUint64Array<TArrayBuffer>;
 
   /** Yields each value in the array. */
-  values(): ArrayIterator<bigint>;
+  values(): ArrayIterator<BigUint64>;
 
-  [Symbol.iterator](): ArrayIterator<bigint>;
+  [Symbol.iterator](): ArrayIterator<BigUint64>;
 
   readonly [Symbol.toStringTag]: 'BigUint64Array';
 
-  [index: number]: bigint;
+  [index: number]: BigUint64;
 }
 interface BigUint64ArrayConstructor {
   readonly prototype: BigUint64Array<ArrayBufferLike>;
-  new (length?: number): BigUint64Array<ArrayBuffer>;
+  new (length?: NumberType.TypedArraySize): BigUint64Array<ArrayBuffer>;
   new (
-    array: ArrayLike<bigint> | Iterable<bigint>,
+    array: ArrayLike<BigUint64> | Iterable<BigUint64>,
   ): BigUint64Array<ArrayBuffer>;
   new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(
     buffer: TArrayBuffer,
-    byteOffset?: number,
-    length?: number,
+    byteOffset?: NumberType.TypedArraySizeArgNonNegative,
+    length?: NumberType.TypedArraySize,
   ): BigUint64Array<TArrayBuffer>;
-  new (array: ArrayLike<bigint> | ArrayBuffer): BigUint64Array<ArrayBuffer>;
+  new (array: ArrayLike<BigUint64> | ArrayBuffer): BigUint64Array<ArrayBuffer>;
 
   /** The size in bytes of each element in the array. */
-  readonly BYTES_PER_ELEMENT: number;
+  readonly BYTES_PER_ELEMENT: 8;
 
   /**
    * Returns a new array from a set of elements.
    *
    * @param items A set of elements to include in the new array object.
    */
-  of(...items: bigint[]): BigUint64Array<ArrayBuffer>;
+  of(...items: readonly BigUint64[]): BigUint64Array<ArrayBuffer>;
 
   /**
    * Creates an array from an array-like or iterable object.
@@ -1108,14 +1043,14 @@ interface BigUint64ArrayConstructor {
    * @param mapfn A mapping function to call on every element of the array.
    * @param thisArg Value of 'this' used to invoke the mapfn.
    */
-  from(arrayLike: ArrayLike<bigint>): BigUint64Array;
+  from(arrayLike: ArrayLike<BigUint64>): BigUint64Array;
   from<U>(
     arrayLike: ArrayLike<U>,
-    mapfn: (v: U, k: number) => bigint,
-    thisArg?: any,
+    mapfn: (v: U, k: NumberType.TypedArraySize) => BigUint64,
+    thisArg?: unknown,
   ): BigUint64Array;
 }
-declare var BigUint64Array: BigUint64ArrayConstructor;
+declare const BigUint64Array: BigUint64ArrayConstructor;
 
 interface DataView<TArrayBuffer extends ArrayBufferLike> {
   /**
@@ -1128,7 +1063,10 @@ interface DataView<TArrayBuffer extends ArrayBufferLike> {
    * @param littleEndian If false or undefined, a big-endian value should be
    *   read.
    */
-  getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;
+  getBigInt64(
+    byteOffset: NumberType.TypedArraySizeArgNonNegative,
+    littleEndian?: boolean,
+  ): BigInt64;
 
   /**
    * Gets the BigUint64 value at the specified byte offset from the start of the
@@ -1140,7 +1078,10 @@ interface DataView<TArrayBuffer extends ArrayBufferLike> {
    * @param littleEndian If false or undefined, a big-endian value should be
    *   read.
    */
-  getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;
+  getBigUint64(
+    byteOffset: NumberType.TypedArraySizeArgNonNegative,
+    littleEndian?: boolean,
+  ): BigUint64;
 
   /**
    * Stores a BigInt64 value at the specified byte offset from the start of the
@@ -1151,7 +1092,11 @@ interface DataView<TArrayBuffer extends ArrayBufferLike> {
    * @param littleEndian If false or undefined, a big-endian value should be
    *   written.
    */
-  setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
+  setBigInt64(
+    byteOffset: NumberType.TypedArraySizeArgNonNegative,
+    value: BigInt64,
+    littleEndian?: boolean,
+  ): void;
 
   /**
    * Stores a BigUint64 value at the specified byte offset from the start of the
@@ -1162,7 +1107,11 @@ interface DataView<TArrayBuffer extends ArrayBufferLike> {
    * @param littleEndian If false or undefined, a big-endian value should be
    *   written.
    */
-  setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;
+  setBigUint64(
+    byteOffset: NumberType.TypedArraySizeArgNonNegative,
+    value: BigUint64,
+    littleEndian?: boolean,
+  ): void;
 }
 
 declare namespace Intl {
