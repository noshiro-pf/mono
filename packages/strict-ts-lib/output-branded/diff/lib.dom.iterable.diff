@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 /////////////////////////////
 /// Window Iterable APIs
@@ -67,8 +53,8 @@ interface CSSKeyframesRule {
 
 interface CSSNumericArray {
   [Symbol.iterator](): ArrayIterator<CSSNumericValue>;
-  entries(): ArrayIterator<[number, CSSNumericValue]>;
-  keys(): ArrayIterator<number>;
+  entries(): ArrayIterator<readonly [NumberType.ArraySize, CSSNumericValue]>;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   values(): ArrayIterator<CSSNumericValue>;
 }
 
@@ -82,15 +68,17 @@ interface CSSStyleDeclaration {
 
 interface CSSTransformValue {
   [Symbol.iterator](): ArrayIterator<CSSTransformComponent>;
-  entries(): ArrayIterator<[number, CSSTransformComponent]>;
-  keys(): ArrayIterator<number>;
+  entries(): ArrayIterator<
+    readonly [NumberType.ArraySize, CSSTransformComponent]
+  >;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   values(): ArrayIterator<CSSTransformComponent>;
 }
 
 interface CSSUnparsedValue {
   [Symbol.iterator](): ArrayIterator<CSSUnparsedSegment>;
-  entries(): ArrayIterator<[number, CSSUnparsedSegment]>;
-  keys(): ArrayIterator<number>;
+  entries(): ArrayIterator<readonly [NumberType.ArraySize, CSSUnparsedSegment]>;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   values(): ArrayIterator<CSSUnparsedSegment>;
 }
 
@@ -133,8 +121,8 @@ interface DOMStringList {
 
 interface DOMTokenList {
   [Symbol.iterator](): ArrayIterator<string>;
-  entries(): ArrayIterator<[number, string]>;
-  keys(): ArrayIterator<number>;
+  entries(): ArrayIterator<readonly [NumberType.ArraySize, string]>;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   values(): ArrayIterator<string>;
 }
 
@@ -156,9 +144,9 @@ interface FormDataIterator<T>
 }
 
 interface FormData {
-  [Symbol.iterator](): FormDataIterator<[string, FormDataEntryValue]>;
+  [Symbol.iterator](): FormDataIterator<readonly [string, FormDataEntryValue]>;
   /** Returns an array of key, value pairs for every entry in the list. */
-  entries(): FormDataIterator<[string, FormDataEntryValue]>;
+  entries(): FormDataIterator<readonly [string, FormDataEntryValue]>;
   /** Returns a list of keys in the list. */
   keys(): FormDataIterator<string>;
   /** Returns a list of values in the list. */
@@ -191,12 +179,12 @@ interface HeadersIterator<T>
 }
 
 interface Headers {
-  [Symbol.iterator](): HeadersIterator<[string, string]>;
+  [Symbol.iterator](): HeadersIterator<readonly [string, string]>;
   /**
    * Returns an iterator allowing to go through all key/value pairs contained in
    * this object.
    */
-  entries(): HeadersIterator<[string, string]>;
+  entries(): HeadersIterator<readonly [string, string]>;
   /**
    * Returns an iterator allowing to go through all keys of the key/value pairs
    * contained in this object.
@@ -264,9 +252,9 @@ interface MediaKeyStatusMapIterator<T>
 
 interface MediaKeyStatusMap {
   [Symbol.iterator](): MediaKeyStatusMapIterator<
-    [BufferSource, MediaKeyStatus]
+    readonly [BufferSource, MediaKeyStatus]
   >;
-  entries(): MediaKeyStatusMapIterator<[BufferSource, MediaKeyStatus]>;
+  entries(): MediaKeyStatusMapIterator<readonly [BufferSource, MediaKeyStatus]>;
   keys(): MediaKeyStatusMapIterator<BufferSource>;
   values(): MediaKeyStatusMapIterator<MediaKeyStatus>;
 }
@@ -275,13 +263,13 @@ interface MediaList {
   [Symbol.iterator](): ArrayIterator<string>;
 }
 
-interface MessageEvent<T = any> {
+interface MessageEvent<T = unknown> {
   /** @deprecated */
   initMessageEvent(
     type: string,
     bubbles?: boolean,
     cancelable?: boolean,
-    data?: any,
+    data?: unknown,
     origin?: string,
     lastEventId?: string,
     source?: MessageEventSource | null,
@@ -318,9 +306,9 @@ interface Navigator {
 interface NodeList {
   [Symbol.iterator](): ArrayIterator<Node>;
   /** Returns an array of key, value pairs for every entry in the list. */
-  entries(): ArrayIterator<[number, Node]>;
+  entries(): ArrayIterator<readonly [NumberType.ArraySize, Node]>;
   /** Returns an list of keys in the list. */
-  keys(): ArrayIterator<number>;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   /** Returns an list of values in the list. */
   values(): ArrayIterator<Node>;
 }
@@ -328,9 +316,9 @@ interface NodeList {
 interface NodeListOf<TNode extends Node> {
   [Symbol.iterator](): ArrayIterator<TNode>;
   /** Returns an array of key, value pairs for every entry in the list. */
-  entries(): ArrayIterator<[number, TNode]>;
+  entries(): ArrayIterator<readonly [NumberType.ArraySize, TNode]>;
   /** Returns an list of keys in the list. */
-  keys(): ArrayIterator<number>;
+  keys(): ArrayIterator<NumberType.ArraySize>;
   /** Returns an list of values in the list. */
   values(): ArrayIterator<TNode>;
 }
@@ -351,7 +339,7 @@ interface RTCRtpTransceiver {
   setCodecPreferences(codecs: Iterable<RTCRtpCodec>): void;
 }
 
-interface RTCStatsReport extends ReadonlyMap<string, any> {}
+interface RTCStatsReport extends ReadonlyMap<string, unknown> {}
 
 interface SVGLengthList {
   [Symbol.iterator](): ArrayIterator<SVGLength>;
@@ -392,10 +380,10 @@ interface StylePropertyMapReadOnlyIterator<T>
 
 interface StylePropertyMapReadOnly {
   [Symbol.iterator](): StylePropertyMapReadOnlyIterator<
-    [string, Iterable<CSSStyleValue>]
+    readonly [string, Iterable<CSSStyleValue>]
   >;
   entries(): StylePropertyMapReadOnlyIterator<
-    [string, Iterable<CSSStyleValue>]
+    readonly [string, Iterable<CSSStyleValue>]
   >;
   keys(): StylePropertyMapReadOnlyIterator<string>;
   values(): StylePropertyMapReadOnlyIterator<Iterable<CSSStyleValue>>;
@@ -521,9 +509,9 @@ interface URLSearchParamsIterator<T>
 }
 
 interface URLSearchParams {
-  [Symbol.iterator](): URLSearchParamsIterator<[string, string]>;
+  [Symbol.iterator](): URLSearchParamsIterator<readonly [string, string]>;
   /** Returns an array of key, value pairs for every entry in the search params. */
-  entries(): URLSearchParamsIterator<[string, string]>;
+  entries(): URLSearchParamsIterator<readonly [string, string]>;
   /** Returns a list of keys in the search params. */
   keys(): URLSearchParamsIterator<string>;
   /** Returns a list of values in the search params. */
@@ -639,7 +627,7 @@ interface WebGL2RenderingContextBase {
     program: WebGLProgram,
     uniformIndices: Iterable<GLuint>,
     pname: GLenum,
-  ): any;
+  ): unknown;
   /**
    * [MDN
    * Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
