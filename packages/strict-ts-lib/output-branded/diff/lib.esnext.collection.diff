@@ -1,21 +1,7 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
-/// <reference lib="es2024.collection" />
+/// <reference path="./lib.es2024.collection.d.ts" />
 
 interface ReadonlySetLike<T> {
   /** Despite its name, returns an iterator of the values in the set-like. */
@@ -34,22 +20,22 @@ interface Set<T> {
    * @returns A new Set containing all the elements in this Set and also all the
    *   elements in the argument.
    */
-  union<U>(other: ReadonlySetLike<U>): Set<T | U>;
+  union<U>(other: ReadonlySetLike<U>): ReadonlySet<T | U>;
   /**
    * @returns A new Set containing all the elements which are both in this Set
    *   and in the argument.
    */
-  intersection<U>(other: ReadonlySetLike<U>): Set<T & U>;
+  intersection<U>(other: ReadonlySetLike<U>): ReadonlySet<T & U>;
   /**
    * @returns A new Set containing all the elements in this Set which are not
    *   also in the argument.
    */
-  difference<U>(other: ReadonlySetLike<U>): Set<T>;
+  difference<U>(other: ReadonlySetLike<U>): ReadonlySet<T>;
   /**
    * @returns A new Set containing all the elements which are in either this Set
    *   or in the argument, but not in both.
    */
-  symmetricDifference<U>(other: ReadonlySetLike<U>): Set<T | U>;
+  symmetricDifference<U>(other: ReadonlySetLike<U>): ReadonlySet<T | U>;
   /**
    * @returns A boolean indicating whether all the elements in this Set are also
    *   in the argument.
@@ -72,22 +58,22 @@ interface ReadonlySet<T> {
    * @returns A new Set containing all the elements in this Set and also all the
    *   elements in the argument.
    */
-  union<U>(other: ReadonlySetLike<U>): Set<T | U>;
+  union<U>(other: ReadonlySetLike<U>): ReadonlySet<T | U>;
   /**
    * @returns A new Set containing all the elements which are both in this Set
    *   and in the argument.
    */
-  intersection<U>(other: ReadonlySetLike<U>): Set<T & U>;
+  intersection<U>(other: ReadonlySetLike<U>): ReadonlySet<T & U>;
   /**
    * @returns A new Set containing all the elements in this Set which are not
    *   also in the argument.
    */
-  difference<U>(other: ReadonlySetLike<U>): Set<T>;
+  difference<U>(other: ReadonlySetLike<U>): ReadonlySet<T>;
   /**
    * @returns A new Set containing all the elements which are in either this Set
    *   or in the argument, but not in both.
    */
-  symmetricDifference<U>(other: ReadonlySetLike<U>): Set<T | U>;
+  symmetricDifference<U>(other: ReadonlySetLike<U>): ReadonlySet<T | U>;
   /**
    * @returns A boolean indicating whether all the elements in this Set are also
    *   in the argument.
