@@ -14,6 +14,7 @@ and limitations under the License.
 ***************************************************************************** */
 
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
@@ -22,7 +23,7 @@ interface Array<T> {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): T | undefined;
+  at(index: NumberType.ArraySizeArg): T | undefined;
 }
 
 interface ReadonlyArray<T> {
@@ -32,7 +33,7 @@ interface ReadonlyArray<T> {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): T | undefined;
+  at(index: NumberType.ArraySizeArg): T | undefined;
 }
 
 interface Int8Array {
@@ -42,7 +43,7 @@ interface Int8Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int8 | undefined;
 }
 
 interface Uint8Array {
@@ -52,7 +53,7 @@ interface Uint8Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint8 | undefined;
 }
 
 interface Uint8ClampedArray {
@@ -62,7 +63,7 @@ interface Uint8ClampedArray {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint8 | undefined;
 }
 
 interface Int16Array {
@@ -72,7 +73,7 @@ interface Int16Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int16 | undefined;
 }
 
 interface Uint16Array {
@@ -82,7 +83,7 @@ interface Uint16Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint16 | undefined;
 }
 
 interface Int32Array {
@@ -92,7 +93,7 @@ interface Int32Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Int32 | undefined;
 }
 
 interface Uint32Array {
@@ -102,7 +103,7 @@ interface Uint32Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Uint32 | undefined;
 }
 
 interface Float32Array {
@@ -112,7 +113,7 @@ interface Float32Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Float32 | undefined;
 }
 
 interface Float64Array {
@@ -122,7 +123,7 @@ interface Float64Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): number | undefined;
+  at(index: NumberType.TypedArraySizeArg): Float64 | undefined;
 }
 
 interface BigInt64Array {
@@ -132,7 +133,7 @@ interface BigInt64Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): bigint | undefined;
+  at(index: NumberType.TypedArraySizeArg): BigInt64 | undefined;
 }
 
 interface BigUint64Array {
@@ -142,5 +143,5 @@ interface BigUint64Array {
    * @param index The zero-based index of the desired code unit. A negative
    *   index will count back from the last item.
    */
-  at(index: number): bigint | undefined;
+  at(index: NumberType.TypedArraySizeArg): BigUint64 | undefined;
 }
