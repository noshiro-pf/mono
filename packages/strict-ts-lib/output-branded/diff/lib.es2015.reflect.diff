@@ -1,19 +1,5 @@
-/*! *****************************************************************************
-Copyright (c) Microsoft Corporation. All rights reserved.
-Licensed under the Apache License, Version 2.0 (the "License"); you may not use
-this file except in compliance with the License. You may obtain a copy of the
-License at http://www.apache.org/licenses/LICENSE-2.0
-
-THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
-WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
-MERCHANTABLITY OR NON-INFRINGEMENT.
-
-See the Apache Version 2.0 License for specific language governing permissions
-and limitations under the License.
-***************************************************************************** */
-
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 declare namespace Reflect {
   /**
@@ -25,16 +11,16 @@ declare namespace Reflect {
    * @param argumentsList An array of argument values to be passed to the
    *   function.
    */
-  function apply<T, A extends readonly any[], R>(
+  function apply<T, A extends readonly unknown[], R>(
     target: (this: T, ...args: A) => R,
     thisArgument: T,
     argumentsList: Readonly<A>,
   ): R;
   function apply(
     target: Function,
-    thisArgument: any,
-    argumentsList: ArrayLike<any>,
-  ): any;
+    thisArgument: unknown,
+    argumentsList: ArrayLike<unknown>,
+  ): unknown;
 
   /**
    * Constructs the target with the elements of specified array as the arguments
@@ -45,16 +31,16 @@ declare namespace Reflect {
    *   constructor.
    * @param newTarget The constructor to be used as the `new.target` object.
    */
-  function construct<A extends readonly any[], R>(
+  function construct<A extends readonly unknown[], R>(
     target: new (...args: A) => R,
     argumentsList: Readonly<A>,
-    newTarget?: new (...args: any) => any,
+    newTarget?: new (...args: readonly never[]) => unknown,
   ): R;
   function construct(
     target: Function,
-    argumentsList: ArrayLike<any>,
+    argumentsList: ArrayLike<unknown>,
     newTarget?: Function,
-  ): any;
+  ): unknown;
 
   /**
    * Adds a property to an object, or modifies attributes of an existing
@@ -70,7 +56,7 @@ declare namespace Reflect {
   function defineProperty(
     target: object,
     propertyKey: PropertyKey,
-    attributes: PropertyDescriptor & ThisType<any>,
+    attributes: PropertyDescriptor & ThisType<unknown>,
   ): boolean;
 
   /**
@@ -97,7 +83,7 @@ declare namespace Reflect {
     target: T,
     propertyKey: P,
     receiver?: unknown,
-  ): P extends keyof T ? T[P] : any;
+  ): P extends keyof T ? T[P] : unknown;
 
   /**
    * Gets the own property descriptor of the specified object. An own property
@@ -110,7 +96,7 @@ declare namespace Reflect {
   function getOwnPropertyDescriptor<T extends object, P extends PropertyKey>(
     target: T,
     propertyKey: P,
-  ): TypedPropertyDescriptor<P extends keyof T ? T[P] : any> | undefined;
+  ): TypedPropertyDescriptor<P extends keyof T ? T[P] : unknown> | undefined;
 
   /**
    * Returns the prototype of an object.
@@ -143,7 +129,7 @@ declare namespace Reflect {
    *
    * @param target Object that contains the own properties.
    */
-  function ownKeys(target: object): (string | symbol)[];
+  function ownKeys(target: object): readonly (string | symbol)[];
 
   /**
    * Prevents the addition of new properties to an object.
@@ -166,14 +152,14 @@ declare namespace Reflect {
   function set<T extends object, P extends PropertyKey>(
     target: T,
     propertyKey: P,
-    value: P extends keyof T ? T[P] : any,
-    receiver?: any,
+    value: P extends keyof T ? T[P] : unknown,
+    receiver?: unknown,
   ): boolean;
   function set(
     target: object,
     propertyKey: PropertyKey,
-    value: any,
-    receiver?: any,
+    value: unknown,
+    receiver?: unknown,
   ): boolean;
 
   /**
