@@ -14,6 +14,7 @@ and limitations under the License.
 ***************************************************************************** */
 
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Atomics {
   /**
@@ -22,10 +23,15 @@ interface Atomics {
    * write operation against the array will block.
    */
   add(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  add(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Stores the bitwise AND of a value with the value at the given position in
@@ -33,10 +39,15 @@ interface Atomics {
    * completes, any other read or write operation against the array will block.
    */
   and(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  and(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Replaces the value at the given position in the array if the original value
@@ -45,11 +56,17 @@ interface Atomics {
    * array will block.
    */
   compareExchange(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    expectedValue: bigint,
-    replacementValue: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: BigInt64,
+    replacementValue: BigInt64,
+  ): BigInt64;
+  compareExchange(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    expectedValue: BigUint64,
+    replacementValue: BigUint64,
+  ): BigUint64;
 
   /**
    * Replaces the value at the given position in the array, returning the
@@ -57,17 +74,29 @@ interface Atomics {
    * write operation against the array will block.
    */
   exchange(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  exchange(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Returns the value at the given position in the array. Until this atomic
    * operation completes, any other read or write operation against the array
    * will block.
    */
-  load(typedArray: BigInt64Array | BigUint64Array, index: number): bigint;
+  load(
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+  ): BigInt64;
+  load(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+  ): BigUint64;
 
   /**
    * Stores the bitwise OR of a value with the value at the given position in
@@ -75,10 +104,15 @@ interface Atomics {
    * completes, any other read or write operation against the array will block.
    */
   or(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  or(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Stores a value at the given position in the array, returning the new value.
@@ -86,10 +120,15 @@ interface Atomics {
    * against the array will block.
    */
   store(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  store(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * Subtracts a value from the value at the given position in the array,
@@ -97,10 +136,15 @@ interface Atomics {
    * other read or write operation against the array will block.
    */
   sub(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  sub(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 
   /**
    * If the value at the given position in the array is equal to the provided
@@ -110,8 +154,8 @@ interface Atomics {
    */
   wait(
     typedArray: BigInt64Array,
-    index: number,
-    value: bigint,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
     timeout?: number,
   ): 'ok' | 'not-equal' | 'timed-out';
 
@@ -124,7 +168,11 @@ interface Atomics {
    * @param count The number of sleeping agents to notify. Defaults to
    *   +Infinity.
    */
-  notify(typedArray: BigInt64Array, index: number, count?: number): number;
+  notify(
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    count?: SafeUint,
+  ): SafeUint;
 
   /**
    * Stores the bitwise XOR of a value with the value at the given position in
@@ -132,8 +180,13 @@ interface Atomics {
    * completes, any other read or write operation against the array will block.
    */
   xor(
-    typedArray: BigInt64Array | BigUint64Array,
-    index: number,
-    value: bigint,
-  ): bigint;
+    typedArray: BigInt64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigInt64,
+  ): BigInt64;
+  xor(
+    typedArray: BigUint64Array,
+    index: NumberType.TypedArraySizeArg,
+    value: BigUint64,
+  ): BigUint64;
 }
