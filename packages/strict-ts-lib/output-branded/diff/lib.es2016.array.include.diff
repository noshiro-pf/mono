@@ -14,6 +14,7 @@ and limitations under the License.
 ***************************************************************************** */
 
 /// <reference no-default-lib="true"/>
+/// <reference types="@noshiro/ts-type-utils" />
 
 interface Array<T> {
   /**
@@ -24,7 +25,10 @@ interface Array<T> {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: T, fromIndex?: number): boolean;
+  includes(
+    searchElement: T | (WidenLiteral<T> & {}),
+    fromIndex?: NumberType.ArraySizeArg,
+  ): searchElement is T;
 }
 
 interface ReadonlyArray<T> {
@@ -36,7 +40,10 @@ interface ReadonlyArray<T> {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: T, fromIndex?: number): boolean;
+  includes(
+    searchElement: T | (WidenLiteral<T> & {}),
+    fromIndex?: NumberType.ArraySizeArg,
+  ): searchElement is T;
 }
 
 interface Int8Array {
@@ -48,7 +55,10 @@ interface Int8Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Int8,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Uint8Array {
@@ -60,7 +70,10 @@ interface Uint8Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Uint8,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Uint8ClampedArray {
@@ -72,7 +85,10 @@ interface Uint8ClampedArray {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Uint8,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Int16Array {
@@ -84,7 +100,10 @@ interface Int16Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Int16,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Uint16Array {
@@ -96,7 +115,10 @@ interface Uint16Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Uint16,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Int32Array {
@@ -108,7 +130,10 @@ interface Int32Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Int32,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Uint32Array {
@@ -120,7 +145,10 @@ interface Uint32Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Uint32,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Float32Array {
@@ -132,7 +160,10 @@ interface Float32Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Float32,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
 
 interface Float64Array {
@@ -144,5 +175,8 @@ interface Float64Array {
    * @param fromIndex The position in this array at which to begin searching for
    *   searchElement.
    */
-  includes(searchElement: number, fromIndex?: number): boolean;
+  includes(
+    searchElement: Float64,
+    fromIndex?: NumberType.TypedArraySizeArg,
+  ): boolean;
 }
