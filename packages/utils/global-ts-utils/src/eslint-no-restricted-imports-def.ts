export const eslintNoRestrictedImportsDef = {
  name: '@noshiro/ts-utils',
  importNames: [
    'Arr',
    'ArrayUtils',
    'assertNotUndefined',
    'castWritable',
    'createQueue',
    'createTinyObservable',
    'DateUtils',
    'expectType',
    'FiniteNumber',
    'hasKeyValue',
    'idfn',
    'ifThen',
    'IMap',
    'IMapMapped',
    'Int',
    'Int16',
    'Int32',
    'Int8',
    'isBigint',
    'isBoolean',
    'ISet',
    'ISetMapped',
    'isInt16',
    'isInt32',
    'isNonNegative',
    'isNonNullish',
    'isNonNullObject',
    'isNotBigint',
    'isNotBoolean',
    'isNotNull',
    'isNotNumber',
    'isNotString',
    'isNotSymbol',
    'isNotUndefined',
    'isNull',
    'isNullish',
    'isNumber',
    'isPrimitive',
    'isRecord',
    'isSafeUint',
    'isString',
    'isSymbol',
    'isUint',
    'isUint16',
    'isUint32',
    'isUndefined',
    'Json',
    'mapOptional',
    'mapOptionalC',
    'match',
    'Maybe',
    'memoizeFunction',
    'MutableMap',
    'MutableSet',
    'NonNegativeNumber',
    'noop',
    'Num',
    'Obj',
    'pipe',
    'range',
    'RecordUtils',
    'Result',
    'SafeInt',
    'SafeUint',
    'Str',
    'toBoolean',
    'toFiniteNumber',
    'toInt',
    'toInt16',
    'toInt32',
    'toInt8',
    'toNonNegativeNumber',
    'toSafeInt',
    'toSafeUint',
    'toUint',
    'toUint16',
    'toUint32',
    'toUint8',
    'tp',
    'Tpl',
    'TupleUtils',
    'Uint',
    'Uint16',
    'Uint32',
    'Uint8',
    'DateUtils',
    'IMap',
    'IMapMapped',
    'ISet',
    'ISetMapped',
    'Maybe',
    'Queue',
    'Result',
    'Subscription',
    'TinyObservable',
    'TinyObservableSource',
  ],
  message: 'use global variable instead.',
};
