import {
  type DateType as TYPE_DateType,
  type IMap as TYPE_IMap,
  type IMapMapped as TYPE_IMapMapped,
  type ISet as TYPE_ISet,
  type ISetMapped as TYPE_ISetMapped,
  type Maybe as TYPE_Maybe,
  type Queue as TYPE_Queue,
  type Result as TYPE_Result,
  type Subscription as TYPE_Subscription,
  type TinyObservable as TYPE_TinyObservable,
  type TinyObservableSource as TYPE_TinyObservableSource,
  type Arr as VAR_Arr,
  type ArrayUtils as VAR_ArrayUtils,
  type assertNotUndefined as VAR_assertNotUndefined,
  type castDeepReadonly as VAR_castDeepReadonly,
  type castDeepWritable as VAR_castDeepWritable,
  type castReadonly as VAR_castReadonly,
  type castRemoveSmallInt as VAR_castRemoveSmallInt,
  type castWritable as VAR_castWritable,
  type createQueue as VAR_createQueue,
  type createTinyObservable as VAR_createTinyObservable,
  type DateUtils as VAR_DateUtils,
  type expectType as VAR_expectType,
  type FiniteNumber as VAR_FiniteNumber,
  type hasKeyValue as VAR_hasKeyValue,
  type idfn as VAR_idfn,
  type ifThen as VAR_ifThen,
  type IMap as VAR_IMap,
  type IMapMapped as VAR_IMapMapped,
  type Int as VAR_Int,
  type Int16 as VAR_Int16,
  type Int32 as VAR_Int32,
  type Int8 as VAR_Int8,
  type isBigint as VAR_isBigint,
  type isBoolean as VAR_isBoolean,
  type ISet as VAR_ISet,
  type ISetMapped as VAR_ISetMapped,
  type isInt16 as VAR_isInt16,
  type isInt32 as VAR_isInt32,
  type isNonNegativeFiniteNumber as VAR_isNonNegativeFiniteNumber,
  type isNonNullish as VAR_isNonNullish,
  type isNonNullObject as VAR_isNonNullObject,
  type isNotBigint as VAR_isNotBigint,
  type isNotBoolean as VAR_isNotBoolean,
  type isNotNull as VAR_isNotNull,
  type isNotNumber as VAR_isNotNumber,
  type isNotString as VAR_isNotString,
  type isNotSymbol as VAR_isNotSymbol,
  type isNotUndefined as VAR_isNotUndefined,
  type isNull as VAR_isNull,
  type isNullish as VAR_isNullish,
  type isNumber as VAR_isNumber,
  type isPositiveFiniteNumber as VAR_isPositiveFiniteNumber,
  type isPositiveInt as VAR_isPositiveInt,
  type isPositiveSafeInt as VAR_isPositiveSafeInt,
  type isPrimitive as VAR_isPrimitive,
  type isRecord as VAR_isRecord,
  type isSafeUint as VAR_isSafeUint,
  type isString as VAR_isString,
  type isSymbol as VAR_isSymbol,
  type isUint as VAR_isUint,
  type isUint16 as VAR_isUint16,
  type isUint32 as VAR_isUint32,
  type isUndefined as VAR_isUndefined,
  type Json as VAR_Json,
  type keyIsIn as VAR_keyIsIn,
  type mapOptional as VAR_mapOptional,
  type mapOptionalC as VAR_mapOptionalC,
  type match as VAR_match,
  type Maybe as VAR_Maybe,
  type memoizeFunction as VAR_memoizeFunction,
  type MutableMap as VAR_MutableMap,
  type MutableSet as VAR_MutableSet,
  type NonNegativeNumber as VAR_NonNegativeNumber,
  type noop as VAR_noop,
  type Num as VAR_Num,
  type Obj as VAR_Obj,
  type pipe as VAR_pipe,
  type PositiveInt as VAR_PositiveInt,
  type PositiveNumber as VAR_PositiveNumber,
  type PositiveSafeInt as VAR_PositiveSafeInt,
  type range as VAR_range,
  type RecordUtils as VAR_RecordUtils,
  type Result as VAR_Result,
  type SafeInt as VAR_SafeInt,
  type SafeUint as VAR_SafeUint,
  type Str as VAR_Str,
  type toBoolean as VAR_toBoolean,
  type toFiniteNumber as VAR_toFiniteNumber,
  type toInt as VAR_toInt,
  type toInt16 as VAR_toInt16,
  type toInt32 as VAR_toInt32,
  type toInt8 as VAR_toInt8,
  type toNonNegativeFiniteNumber as VAR_toNonNegativeFiniteNumber,
  type toPositiveFiniteNumber as VAR_toPositiveFiniteNumber,
  type toPositiveInt as VAR_toPositiveInt,
  type toPositiveSafeInt as VAR_toPositiveSafeInt,
  type toSafeInt as VAR_toSafeInt,
  type toSafeUint as VAR_toSafeUint,
  type toUint as VAR_toUint,
  type toUint16 as VAR_toUint16,
  type toUint32 as VAR_toUint32,
  type toUint8 as VAR_toUint8,
  type tp as VAR_tp,
  type Tpl as VAR_Tpl,
  type TupleUtils as VAR_TupleUtils,
  type Uint as VAR_Uint,
  type Uint16 as VAR_Uint16,
  type Uint32 as VAR_Uint32,
  type Uint8 as VAR_Uint8,
} from '@noshiro/ts-utils';

declare global {
  type DateType = TYPE_DateType;
  type IMap<K, V> = TYPE_IMap<K, V>;
  type IMapMapped<K, V, KM extends number | string> = TYPE_IMapMapped<K, V, KM>;
  type ISet<S> = TYPE_ISet<S>;
  type ISetMapped<K, KM extends number | string> = TYPE_ISetMapped<K, KM>;
  type Maybe<S> = TYPE_Maybe<S>;
  type Queue<T> = TYPE_Queue<T>;
  type Result<S, E> = TYPE_Result<S, E>;
  type Subscription = TYPE_Subscription;
  type TinyObservable<T> = TYPE_TinyObservable<T>;
  type TinyObservableSource<T> = TYPE_TinyObservableSource<T>;

  /* custom types */

  const Arr: typeof VAR_Arr;
  const ArrayUtils: typeof VAR_ArrayUtils;
  const assertNotUndefined: typeof VAR_assertNotUndefined;
  const castDeepReadonly: typeof VAR_castDeepReadonly;
  const castDeepWritable: typeof VAR_castDeepWritable;
  const castReadonly: typeof VAR_castReadonly;
  const castRemoveSmallInt: typeof VAR_castRemoveSmallInt;
  const castWritable: typeof VAR_castWritable;
  const createQueue: typeof VAR_createQueue;
  const createTinyObservable: typeof VAR_createTinyObservable;
  const DateUtils: typeof VAR_DateUtils;
  const expectType: typeof VAR_expectType;
  const FiniteNumber: typeof VAR_FiniteNumber;
  const hasKeyValue: typeof VAR_hasKeyValue;
  const idfn: typeof VAR_idfn;
  const ifThen: typeof VAR_ifThen;
  const IMap: typeof VAR_IMap;
  const IMapMapped: typeof VAR_IMapMapped;
  const Int: typeof VAR_Int;
  const Int16: typeof VAR_Int16;
  const Int32: typeof VAR_Int32;
  const Int8: typeof VAR_Int8;
  const isBigint: typeof VAR_isBigint;
  const isBoolean: typeof VAR_isBoolean;
  const ISet: typeof VAR_ISet;
  const ISetMapped: typeof VAR_ISetMapped;
  const isInt16: typeof VAR_isInt16;
  const isInt32: typeof VAR_isInt32;
  const isNonNegativeFiniteNumber: typeof VAR_isNonNegativeFiniteNumber;
  const isNonNullish: typeof VAR_isNonNullish;
  const isNonNullObject: typeof VAR_isNonNullObject;
  const isNotBigint: typeof VAR_isNotBigint;
  const isNotBoolean: typeof VAR_isNotBoolean;
  const isNotNull: typeof VAR_isNotNull;
  const isNotNumber: typeof VAR_isNotNumber;
  const isNotString: typeof VAR_isNotString;
  const isNotSymbol: typeof VAR_isNotSymbol;
  const isNotUndefined: typeof VAR_isNotUndefined;
  const isNull: typeof VAR_isNull;
  const isNullish: typeof VAR_isNullish;
  const isNumber: typeof VAR_isNumber;
  const isPositiveFiniteNumber: typeof VAR_isPositiveFiniteNumber;
  const isPositiveInt: typeof VAR_isPositiveInt;
  const isPositiveSafeInt: typeof VAR_isPositiveSafeInt;
  const isPrimitive: typeof VAR_isPrimitive;
  const isRecord: typeof VAR_isRecord;
  const isSafeUint: typeof VAR_isSafeUint;
  const isString: typeof VAR_isString;
  const isSymbol: typeof VAR_isSymbol;
  const isUint: typeof VAR_isUint;
  const isUint16: typeof VAR_isUint16;
  const isUint32: typeof VAR_isUint32;
  const isUndefined: typeof VAR_isUndefined;
  const Json: typeof VAR_Json;
  const keyIsIn: typeof VAR_keyIsIn;
  const mapOptional: typeof VAR_mapOptional;
  const mapOptionalC: typeof VAR_mapOptionalC;
  const match: typeof VAR_match;
  const Maybe: typeof VAR_Maybe;
  const memoizeFunction: typeof VAR_memoizeFunction;
  const MutableMap: typeof VAR_MutableMap;
  const MutableSet: typeof VAR_MutableSet;
  const NonNegativeNumber: typeof VAR_NonNegativeNumber;
  const noop: typeof VAR_noop;
  const Num: typeof VAR_Num;
  const Obj: typeof VAR_Obj;
  const pipe: typeof VAR_pipe;
  const PositiveInt: typeof VAR_PositiveInt;
  const PositiveNumber: typeof VAR_PositiveNumber;
  const PositiveSafeInt: typeof VAR_PositiveSafeInt;
  const range: typeof VAR_range;
  const RecordUtils: typeof VAR_RecordUtils;
  const Result: typeof VAR_Result;
  const SafeInt: typeof VAR_SafeInt;
  const SafeUint: typeof VAR_SafeUint;
  const Str: typeof VAR_Str;
  const toBoolean: typeof VAR_toBoolean;
  const toFiniteNumber: typeof VAR_toFiniteNumber;
  const toInt: typeof VAR_toInt;
  const toInt16: typeof VAR_toInt16;
  const toInt32: typeof VAR_toInt32;
  const toInt8: typeof VAR_toInt8;
  const toNonNegativeFiniteNumber: typeof VAR_toNonNegativeFiniteNumber;
  const toPositiveFiniteNumber: typeof VAR_toPositiveFiniteNumber;
  const toPositiveInt: typeof VAR_toPositiveInt;
  const toPositiveSafeInt: typeof VAR_toPositiveSafeInt;
  const toSafeInt: typeof VAR_toSafeInt;
  const toSafeUint: typeof VAR_toSafeUint;
  const toUint: typeof VAR_toUint;
  const toUint16: typeof VAR_toUint16;
  const toUint32: typeof VAR_toUint32;
  const toUint8: typeof VAR_toUint8;
  const tp: typeof VAR_tp;
  const Tpl: typeof VAR_Tpl;
  const TupleUtils: typeof VAR_TupleUtils;
  const Uint: typeof VAR_Uint;
  const Uint16: typeof VAR_Uint16;
  const Uint32: typeof VAR_Uint32;
  const Uint8: typeof VAR_Uint8;

  /* custom variables */
}
