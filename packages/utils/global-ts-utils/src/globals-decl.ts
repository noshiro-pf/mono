import {
  type Arr as VAR_Arr,
  type ArrayUtils as VAR_ArrayUtils,
  type assertNotUndefined as VAR_assertNotUndefined,
  type castWritable as VAR_castWritable,
  type createQueue as VAR_createQueue,
  type createTinyObservable as VAR_createTinyObservable,
  type DateUtils as TYPE_DateUtils,
  type DateUtils as VAR_DateUtils,
  type Err as TYPE_Err,
  type expectType as VAR_expectType,
  type hasKey as VAR_hasKey,
  type hasKeyValue as VAR_hasKeyValue,
  type idfn as VAR_idfn,
  type ifThen as VAR_ifThen,
  type IMap as TYPE_IMap,
  type IMap as VAR_IMap,
  type IMapMapped as TYPE_IMapMapped,
  type IMapMapped as VAR_IMapMapped,
  type isBoolean as VAR_isBoolean,
  type ISet as TYPE_ISet,
  type ISet as VAR_ISet,
  type ISetMapped as TYPE_ISetMapped,
  type ISetMapped as VAR_ISetMapped,
  type isNonNullObject as VAR_isNonNullObject,
  type isNotBoolean as VAR_isNotBoolean,
  type isNotNull as VAR_isNotNull,
  type isNotNumber as VAR_isNotNumber,
  type isNotString as VAR_isNotString,
  type isNotSymbol as VAR_isNotSymbol,
  type isNotUndefined as VAR_isNotUndefined,
  type isNull as VAR_isNull,
  type isNumber as VAR_isNumber,
  type isPrimitive as VAR_isPrimitive,
  type isRecord as VAR_isRecord,
  type isString as VAR_isString,
  type isSymbol as VAR_isSymbol,
  type isUndefined as VAR_isUndefined,
  type Json as VAR_Json,
  type mapOptional as VAR_mapOptional,
  type mapOptionalC as VAR_mapOptionalC,
  type match as VAR_match,
  type Maybe as TYPE_Maybe,
  type Maybe as VAR_Maybe,
  type memoizeFunction as VAR_memoizeFunction,
  type MutableMap as VAR_MutableMap,
  type MutableSet as VAR_MutableSet,
  type None as TYPE_None,
  type noop as VAR_noop,
  type Num as VAR_Num,
  type Obj as VAR_Obj,
  type Ok as TYPE_Ok,
  type pipe as VAR_pipe,
  type Queue as TYPE_Queue,
  type range as VAR_range,
  type RecordUtils as VAR_RecordUtils,
  type Result as TYPE_Result,
  type Result as VAR_Result,
  type Some as TYPE_Some,
  type Str as VAR_Str,
  type Subscription as TYPE_Subscription,
  type TinyObservable as TYPE_TinyObservable,
  type TinyObservableSource as TYPE_TinyObservableSource,
  type toBoolean as VAR_toBoolean,
  type tp as VAR_tp,
} from '@noshiro/ts-utils';

declare global {
  type Err<E> = TYPE_Err<E>;
  type DateUtils = TYPE_DateUtils;
  type IMap<K, V> = TYPE_IMap<K, V>;
  type IMapMapped<K, V, KM extends RecordKeyType> = TYPE_IMapMapped<K, V, KM>;
  type ISet<S> = TYPE_ISet<S>;
  type ISetMapped<K, KM extends RecordKeyType> = TYPE_ISetMapped<K, KM>;
  type Maybe<S> = TYPE_Maybe<S>;
  type None = TYPE_None;
  type Ok<S> = TYPE_Ok<S>;
  type Queue<T> = TYPE_Queue<T>;
  type Result<S, E> = TYPE_Result<S, E>;
  type Some<S> = TYPE_Some<S>;
  type Subscription = TYPE_Subscription;
  type TinyObservable<T> = TYPE_TinyObservable<T>;
  type TinyObservableSource<T> = TYPE_TinyObservableSource<T>;

  /* custom types */

  const Arr: typeof VAR_Arr;
  const ArrayUtils: typeof VAR_ArrayUtils;
  const assertNotUndefined: typeof VAR_assertNotUndefined;
  const castWritable: typeof VAR_castWritable;
  const createQueue: typeof VAR_createQueue;
  const createTinyObservable: typeof VAR_createTinyObservable;
  const DateUtils: typeof VAR_DateUtils;
  const expectType: typeof VAR_expectType;
  const hasKey: typeof VAR_hasKey;
  const hasKeyValue: typeof VAR_hasKeyValue;
  const idfn: typeof VAR_idfn;
  const ifThen: typeof VAR_ifThen;
  const IMap: typeof VAR_IMap;
  const IMapMapped: typeof VAR_IMapMapped;
  const isBoolean: typeof VAR_isBoolean;
  const ISet: typeof VAR_ISet;
  const ISetMapped: typeof VAR_ISetMapped;
  const isNonNullObject: typeof VAR_isNonNullObject;
  const isNotBoolean: typeof VAR_isNotBoolean;
  const isNotNull: typeof VAR_isNotNull;
  const isNotNumber: typeof VAR_isNotNumber;
  const isNotString: typeof VAR_isNotString;
  const isNotSymbol: typeof VAR_isNotSymbol;
  const isNotUndefined: typeof VAR_isNotUndefined;
  const isNull: typeof VAR_isNull;
  const isNumber: typeof VAR_isNumber;
  const isPrimitive: typeof VAR_isPrimitive;
  const isRecord: typeof VAR_isRecord;
  const isString: typeof VAR_isString;
  const isSymbol: typeof VAR_isSymbol;
  const isUndefined: typeof VAR_isUndefined;
  const Json: typeof VAR_Json;
  const mapOptional: typeof VAR_mapOptional;
  const mapOptionalC: typeof VAR_mapOptionalC;
  const match: typeof VAR_match;
  const Maybe: typeof VAR_Maybe;
  const memoizeFunction: typeof VAR_memoizeFunction;
  const MutableMap: typeof VAR_MutableMap;
  const MutableSet: typeof VAR_MutableSet;
  const noop: typeof VAR_noop;
  const Num: typeof VAR_Num;
  const Obj: typeof VAR_Obj;
  const pipe: typeof VAR_pipe;
  const range: typeof VAR_range;
  const RecordUtils: typeof VAR_RecordUtils;
  const Result: typeof VAR_Result;
  const Str: typeof VAR_Str;
  const toBoolean: typeof VAR_toBoolean;
  const tp: typeof VAR_tp;

  /* custom variables */
}
