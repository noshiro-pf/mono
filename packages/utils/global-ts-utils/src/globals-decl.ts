import {
  type Arr as _Arr,
  type ArrayUtils as _ArrayUtils,
  type assertNotUndefined as _assertNotUndefined,
  type castWritable as _castWritable,
  type createQueue as _createQueue,
  type createTinyObservable as _createTinyObservable,
  type DateUtils as _DateUtils,
  type Err as _Err,
  type expectType as _expectType,
  type hasKey as _hasKey,
  type hasKeyValue as _hasKeyValue,
  type idfn as _idfn,
  type ifThen as _ifThen,
  type IMap as _IMap,
  type IMapMapped as _IMapMapped,
  type isBoolean as _isBoolean,
  type ISet as _ISet,
  type ISetMapped as _ISetMapped,
  type isNonNullObject as _isNonNullObject,
  type isNotBoolean as _isNotBoolean,
  type isNotNull as _isNotNull,
  type isNotNumber as _isNotNumber,
  type isNotString as _isNotString,
  type isNotSymbol as _isNotSymbol,
  type isNotUndefined as _isNotUndefined,
  type isNull as _isNull,
  type isNumber as _isNumber,
  type isPrimitive as _isPrimitive,
  type isRecord as _isRecord,
  type isString as _isString,
  type isSymbol as _isSymbol,
  type isUndefined as _isUndefined,
  type Json as _Json,
  type mapOptional as _mapOptional,
  type mapOptionalC as _mapOptionalC,
  type match as _match,
  type Maybe as _Maybe,
  type memoizeFunction as _memoizeFunction,
  type MutableMap as _MutableMap,
  type MutableSet as _MutableSet,
  type None as _None,
  type noop as _noop,
  type Num as _Num,
  type Obj as _Obj,
  type Ok as _Ok,
  type pipe as _pipe,
  type Queue as _Queue,
  type range as _range,
  type RecordUtils as _RecordUtils,
  type Result as _Result,
  type Some as _Some,
  type Str as _Str,
  type Subscription as _Subscription,
  type TinyObservable as _TinyObservable,
  type TinyObservableSource as _TinyObservableSource,
  type toBoolean as _toBoolean,
  type tp as _tp,
} from '@noshiro/ts-utils';

declare global {
  type Err<E> = _Err<E>;
  type DateUtils = _DateUtils;
  type IMap<K, V> = _IMap<K, V>;
  type IMapMapped<K, V, KM extends RecordKeyType> = _IMapMapped<K, V, KM>;
  type ISet<S> = _ISet<S>;
  type ISetMapped<K, KM extends RecordKeyType> = _ISetMapped<K, KM>;
  type Maybe<S> = _Maybe<S>;
  type None = _None;
  type Ok<S> = _Ok<S>;
  type Queue<T> = _Queue<T>;
  type Result<S, E> = _Result<S, E>;
  type Some<S> = _Some<S>;
  type Subscription = _Subscription;
  type TinyObservable<T> = _TinyObservable<T>;
  type TinyObservableSource<T> = _TinyObservableSource<T>;

  /* custom types */

  const Arr: typeof _Arr;
  const ArrayUtils: typeof _ArrayUtils;
  const assertNotUndefined: typeof _assertNotUndefined;
  const castWritable: typeof _castWritable;
  const createQueue: typeof _createQueue;
  const createTinyObservable: typeof _createTinyObservable;
  const DateUtils: typeof _DateUtils;
  const expectType: typeof _expectType;
  const hasKey: typeof _hasKey;
  const hasKeyValue: typeof _hasKeyValue;
  const idfn: typeof _idfn;
  const ifThen: typeof _ifThen;
  const IMap: typeof _IMap;
  const IMapMapped: typeof _IMapMapped;
  const isBoolean: typeof _isBoolean;
  const ISet: typeof _ISet;
  const ISetMapped: typeof _ISetMapped;
  const isNonNullObject: typeof _isNonNullObject;
  const isNotBoolean: typeof _isNotBoolean;
  const isNotNull: typeof _isNotNull;
  const isNotNumber: typeof _isNotNumber;
  const isNotString: typeof _isNotString;
  const isNotSymbol: typeof _isNotSymbol;
  const isNotUndefined: typeof _isNotUndefined;
  const isNull: typeof _isNull;
  const isNumber: typeof _isNumber;
  const isPrimitive: typeof _isPrimitive;
  const isRecord: typeof _isRecord;
  const isString: typeof _isString;
  const isSymbol: typeof _isSymbol;
  const isUndefined: typeof _isUndefined;
  const Json: typeof _Json;
  const mapOptional: typeof _mapOptional;
  const mapOptionalC: typeof _mapOptionalC;
  const match: typeof _match;
  const Maybe: typeof _Maybe;
  const memoizeFunction: typeof _memoizeFunction;
  const MutableMap: typeof _MutableMap;
  const MutableSet: typeof _MutableSet;
  const noop: typeof _noop;
  const Num: typeof _Num;
  const Obj: typeof _Obj;
  const pipe: typeof _pipe;
  const range: typeof _range;
  const RecordUtils: typeof _RecordUtils;
  const Result: typeof _Result;
  const Str: typeof _Str;
  const toBoolean: typeof _toBoolean;
  const tp: typeof _tp;

  /* custom variables */
}
