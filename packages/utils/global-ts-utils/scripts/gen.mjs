import { generateAllGlobalDefs, toThisDir } from '@noshiro/mono-scripts';
import * as nodePath from 'node:path';
import packageJson from '../package.json' assert { type: 'json' };

await generateAllGlobalDefs({
  rootDir: nodePath.resolve(toThisDir(import.meta.url), '../'),
  packageName: packageJson.name.replace(/^@noshiro\/global-/u, '@noshiro/'),
  importsList: [
    'Arr',
    'ArrayUtils',
    'assertNotUndefined',
    'castDeepReadonly',
    'castDeepMutable',
    'castReadonly',
    'castRemoveSmallInt',
    'castMutable',
    'createQueue',
    'createTinyObservable',
    'DateUtils',
    'expectType',
    'FiniteNumber',
    'idfn',
    'ifThen',
    'IMap',
    'IMapMapped',
    'Int',
    'Int16',
    'Int32',
    'Int8',
    'isBigint',
    'isBoolean',
    'ISet',
    'ISetMapped',
    'isInt16',
    'isInt32',
    'isNonNegativeFiniteNumber',
    'isNonNullish',
    'isNonNullObject',
    'isNotBigint',
    'isNotBoolean',
    'isNotNull',
    'isNotNumber',
    'isNotString',
    'isNotSymbol',
    'isNotUndefined',
    'isNull',
    'isNullish',
    'isNumber',
    'isPositiveFiniteNumber',
    'isPositiveInt',
    'isPositiveSafeInt',
    'isPrimitive',
    'isRecord',
    'isSafeUint',
    'isString',
    'isSymbol',
    'isUint',
    'isUint16',
    'isUint32',
    'isUndefined',
    'Json',
    'keyIsIn',
    'mapOptional',
    'mapOptionalC',
    'match',
    'Maybe',
    'memoizeFunction',
    'NonNegativeFiniteNumber',
    'noop',
    'Num',
    'Obj',
    'pipe',
    'PositiveInt',
    'PositiveFiniteNumber',
    'PositiveSafeInt',
    'range',
    'RecordUtils',
    'Result',
    'SafeInt',
    'SafeUint',
    'Str',
    'toBoolean',
    'toFiniteNumber',
    'toInt',
    'toInt16',
    'toInt32',
    'toInt8',
    'toNonNegativeFiniteNumber',
    'toPositiveFiniteNumber',
    'toPositiveInt',
    'toPositiveSafeInt',
    'toSafeInt',
    'toSafeUint',
    'toUint',
    'toUint16',
    'toUint32',
    'toUint8',
    'tp',
    'Tpl',
    'TupleUtils',
    'Uint',
    'Uint16',
    'Uint32',
    'Uint8',
  ],
  typeImportsList: [
    { name: 'DateType', params: [] },
    { name: 'IMap', params: ['K', 'V'] },
    { name: 'IMapMapped', params: ['K', 'V', 'KM extends number | string'] },
    { name: 'ISet', params: ['S'] },
    { name: 'ISetMapped', params: ['K', 'KM extends number | string'] },
    { name: 'Maybe', params: ['S'] },
    { name: 'Queue', params: ['T'] },
    { name: 'Result', params: ['S', 'E'] },
    { name: 'Subscription', params: [] },
    { name: 'TinyObservable', params: ['T'] },
    { name: 'TinyObservableSource', params: ['T'] },
  ],
});
